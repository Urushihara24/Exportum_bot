import warnings
warnings.filterwarnings("ignore", message=".*LibreSSL.*")
warnings.filterwarnings("ignore", message=".*NotOpenSSLWarning.*")
warnings.filterwarnings("ignore", category=UserWarning, module='urllib3')

import os
import logging
import requests
import asyncio
import re
import time
import json
import pickle
import sqlite3
from datetime import datetime
from bs4 import BeautifulSoup
from collections import defaultdict

from aiogram import Bot, Dispatcher, types
from aiogram.utils.exceptions import MessageNotModified
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardMarkup,    # ‚Üê –î–û–ë–ê–í–ò–¢–¨
    InlineKeyboardButton,    # ‚Üê –î–û–ë–ê–í–ò–¢–¨
    CallbackQuery,           # ‚Üê –î–û–ë–ê–í–ò–¢–¨
    ReplyKeyboardRemove
)
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import csv
from io import StringIO
import shutil

try:
    import gspread
    from google.oauth2.service_account import Credentials
    GOOGLE_SHEETS_AVAILABLE = True
except ImportError:
    GOOGLE_SHEETS_AVAILABLE = False
    logging.warning("‚ö†Ô∏è Google Sheets –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

DB_PATH = "bot_data.db"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)


API_TOKEN = os.getenv('BOT_TOKEN', '8180339161:AAFRk8446gKMagAkUTGjGyFDTFHa__mVOY0')
ADMIN_ID = int(os.getenv('173014517', '1481790360'))

CONFIG = {
    'timeout': 15,
    'cache_ttl': 1800,
    'fallback_prices': {
        '–ü—à–µ–Ω–∏—Ü–∞': 15650,
        '–Ø—á–º–µ–Ω—å': 13300,
        '–ö—É–∫—É—Ä—É–∑–∞': 14000,
        '–°–æ—è': 40900,
        '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫': 38600
    },
    'south_regions': ['–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–†–æ—Å—Ç–æ–≤', '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å', '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å'],
    'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
}

# === –ö–û–ù–°–¢–ê–ù–¢–´ –§–ê–ô–õ–û–í –î–ê–ù–ù–´–• ===
DATA_DIR = 'data'  # –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
USERSFILE = os.path.join(DATA_DIR, 'users.pkl')
BATCHESFILE = os.path.join(DATA_DIR, 'batches.pkl')
PULLSFILE = os.path.join(DATA_DIR, 'pulls.pkl')
EXPEDITORSFILE = os.path.join(DATA_DIR, 'expeditors.pkl')
os.makedirs(DATA_DIR, exist_ok=True)

LOGS_DIR = 'logs'

USERS_FILE = 'data/users.json'
BATCHES_FILE = 'data/batches.pkl'
PULLS_FILE = 'data/pulls.pkl'
PRICES_FILE = 'data/prices.json'
NEWS_FILE = 'data/news.json'





SHIPPINGREQUESTSFILE = 'shippingrequests.pkl'

GOOGLE_SHEETS_CREDENTIALS = 'credentials.json'
SPREADSHEET_ID = "1DywxtuWW4-1Q0O71ajVaBB5Ih15nZjA4rvlpV7P7NOA"

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# TELEGRAM –ö–ê–ù–ê–õ –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
CHANNEL_ID = "@your_channel"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∫–∞–Ω–∞–ª–∞ (-1001234567890)


dp = Dispatcher(bot, storage=storage)

users = {}
batches = {
    '999999999': [
        {
            'id': 'BATCH001',
            'culture': '–ü—à–µ–Ω–∏—Ü–∞',
            'volume': 500,
            'price': 15000,
            'region': '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π',
            'quality_class': '3 –∫–ª–∞—Å—Å',
            'storage_type': '–≠–ª–µ–≤–∞—Ç–æ—Ä',
            'status': 'active',
            'harvest_year': 2024
        },
        {
            'id': 'BATCH002',
            'culture': '–ö—É–∫—É—Ä—É–∑–∞',
            'volume': 300,
            'price': 12000,
            'region': '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
            'quality_class': '2 –∫–ª–∞—Å—Å',
            'storage_type': '–ê–Ω–≥–∞—Ä',
            'status': 'active',
            'harvest_year': 2024
        },
        {
            'id': 'BATCH003',
            'culture': '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫',
            'volume': 200,
            'price': 25000,
            'region': '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π',
            'quality_class': '–ë–∞–∑–∏—Å–Ω—ã–π',
            'storage_type': '–≠–ª–µ–≤–∞—Ç–æ—Ä',
            'status': 'active',
            'harvest_year': 2024
        }
    ]
}

# ============================================================================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ë–û–¢–ê
# ============================================================================

CHANNEL_ID = "@your_channel"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∫–∞–Ω–∞–ª–∞ (-1001234567890)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# ============================================================================
# –•–†–ê–ù–ò–õ–ò–©–ê –î–ê–ù–ù–´–• (–¢–û–õ–¨–ö–û –û–î–ù–û –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï!)
# ============================================================================

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
users = {}
batches = {}
pulls = {}
pull_participants = {}
matches = {}
deals = {}

# –õ–æ–≥–∏—Å—Ç–∏–∫–∞
shipping_requests = {}
logistics_requests = {}
logistic_offers = {}
deliveries = {}

# –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä
expeditor_offers = {}

# –†–µ–π—Ç–∏–Ω–≥–∏
logistic_ratings = {}

# –°—á—ë—Ç—á–∏–∫–∏
batch_counter = 0
pull_counter = 0
deal_counter = 0
match_counter = 0
logistics_request_counter = 0
logistics_offer_counter = 0

# –ö—ç—à —Ü–µ–Ω –∏ –Ω–æ–≤–æ—Å—Ç–µ–π
prices_cache = {'data': {}, 'updated': None}
news_cache = {'data': [], 'updated': None}
last_prices_update = None
last_news_update = None

# ============================================================================
# –ö–û–ù–°–¢–ê–ù–¢–´
# ============================================================================

ROLES = {
    'farmer': 'üåæ –§–µ—Ä–º–µ—Ä',
    'exporter': 'üì¶ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä',
    'logistic': 'üöö –õ–æ–≥–∏—Å—Ç',
    'expeditor': 'üöõ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä'
}

CULTURES = ['–ü—à–µ–Ω–∏—Ü–∞', '–Ø—á–º–µ–Ω—å', '–ö—É–∫—É—Ä—É–∑–∞', '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫', '–†–∞–ø—Å', '–°–æ—è']

QUALITY_CLASSES = ['1 –∫–ª–∞—Å—Å', '2 –∫–ª–∞—Å—Å', '3 –∫–ª–∞—Å—Å', '4 –∫–ª–∞—Å—Å', '5 –∫–ª–∞—Å—Å']

STORAGE_TYPES = ['–≠–ª–µ–≤–∞—Ç–æ—Ä', '–°–∫–ª–∞–¥', '–ù–∞–ø–æ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–°–∏–ª–æ—Å']

DEAL_STATUSES = {
    'pending': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
    'matched': 'üéØ –ù–∞–π–¥–µ–Ω –ø–∞—Ä—Ç–Ω—ë—Ä', 
    'shipping': 'üöõ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏',
    'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
}

# ============================================================================
# –ö–†–ò–¢–ò–ß–ù–´–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –§–£–ù–ö–¶–ò–ò (–¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏)
# ============================================================================
# ==================== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò ====================
def translate_pull_status(status: str, current_volume: float = None, target_volume: float = None) -> str:
    '''–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å –ø—É–ª–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —Å —ç–º–æ–¥–∑–∏'''
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∑–∞–¥–∞–Ω, –Ω–æ –∏–∑–≤–µ—Å—Ç–Ω—ã –æ–±—ä—ë–º—ã ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    if not status and current_volume is not None and target_volume is not None:
        if current_volume >= target_volume:
            status = 'filled'
        else:
            status = 'active'
    
    status_map = {
        'active': '‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π',
        'filled': 'üéâ –ó–∞–ø–æ–ª–Ω–µ–Ω (100%)',
        'closed': 'üîí –ó–∞–∫—Ä—ã—Ç',
        'completed': '‚úîÔ∏è –ó–∞–≤–µ—Ä—à—ë–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω—ë–Ω'
    }
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –ø—É—Å—Ç–æ–π
    normalized_status = status.lower() if status else ''
    
    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –≤—Å—ë –µ—â—ë –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –Ω–æ –µ—Å—Ç—å –æ–±—ä—ë–º—ã ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    if not normalized_status and current_volume is not None and target_volume is not None:
        if current_volume >= target_volume:
            normalized_status = 'filled'
        elif current_volume > 0:
            normalized_status = 'active'
        else:
            normalized_status = 'active'
    
    return status_map.get(normalized_status, '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')

def migrate_old_pulls():
    '''–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø—É–ª–æ–≤ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞'''
    migrated_count = 0
    valid_statuses = ['active', 'filled', 'closed', 'completed', 'cancelled']
    
    for pull_id, pull in pulls.items():
        current_status = pull.get('status', None)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞
        logging.info(f"üîç –ü—É–ª #{pull_id}: —Å—Ç–∞—Ç—É—Å='{current_status}' (—Ç–∏–ø: {type(current_status).__name__}), "
                    f"–æ–±—ä—ë–º={pull.get('current_volume', 0)}/{pull.get('target_volume', 0)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: —Å—Ç–∞—Ç—É—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—É—Å—Ç–æ–π, None –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        needs_migration = (
            current_status is None or 
            current_status == '' or 
            current_status.lower() not in valid_statuses
        )
        
        if needs_migration:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
            current_vol = pull.get('current_volume', 0)
            target_vol = pull.get('target_volume', 1)
            
            if current_vol >= target_vol and target_vol > 0:
                pull['status'] = 'filled'
                logging.info(f"‚úÖ –ü—É–ª #{pull_id} –æ–±–Ω–æ–≤–ª—ë–Ω: 'filled' (–∑–∞–ø–æ–ª–Ω–µ–Ω {current_vol}/{target_vol} —Ç)")
                migrated_count += 1
            else:
                pull['status'] = 'active'
                logging.info(f"‚úÖ –ü—É–ª #{pull_id} –æ–±–Ω–æ–≤–ª—ë–Ω: 'active' (–∞–∫—Ç–∏–≤–µ–Ω {current_vol}/{target_vol} —Ç)")
                migrated_count += 1
        else:
            logging.info(f"‚ÑπÔ∏è –ü—É–ª #{pull_id}: —Å—Ç–∞—Ç—É—Å '{current_status}' –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
    
    if migrated_count > 0:
        save_pulls_to_pickle()
        logging.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–æ {migrated_count} –ø—É–ª–æ–≤")
    else:
        logging.info("‚ÑπÔ∏è –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è: –≤—Å–µ –ø—É–ª—ã —É–∂–µ –∏–º–µ—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

def parse_join_pull_callback(callback_data: str) -> dict:
    '''–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä callback –¥–ª—è join_pull'''
    try:
        parts = callback_data.split(":")
        pull_id = int(parts[1])
        timestamp = parts[2] if len(parts) >= 3 else None
        
        logging.info(f"üîó Parsed callback: pull_id={pull_id}, timestamp={timestamp}")
        return {"pull_id": pull_id, "timestamp": timestamp}
    except (ValueError, IndexError) as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ '{callback_data}': {e}")
        raise


def validate_batch_volume(batch: dict, pull: dict) -> tuple:
    '''–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ –ø–∞—Ä—Ç–∏—è –≤ –ø—É–ª'''
    batch_volume = batch.get("volume", 0)
    current_volume = pull.get("current_volume", 0)
    target_volume = pull.get("target_volume", 0)
    available = target_volume - current_volume
    
    if batch_volume > available:
        return (False, f"‚ùå –û–±—ä—ë–º –ø–∞—Ä—Ç–∏–∏ ({batch_volume} —Ç) –ø—Ä–µ–≤—ã—à–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π ({available} —Ç)")
    
    return (True, "‚úÖ –ü–∞—Ä—Ç–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç")


async def check_and_close_pool_if_full(pull_id: int):
    '''–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—É–ª –µ—Å–ª–∏ current_volume >= target_volume'''
    if pull_id not in pulls:
        logging.error(f"‚ùå –ü—É–ª #{pull_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    pull = pulls[pull_id]
    current = pull.get("current_volume", 0)
    target = pull.get("target_volume", 0)
    
    logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è –ø—É–ª–∞ #{pull_id}: {current}/{target} —Ç")
    
    if current >= target:
        pull["status"] = "–ó–∞–∫—Ä—ã—Ç"
        pull["closed_at"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        save_pulls_to_pickle()
        
        logging.info(f"üîí –ü—É–ª #{pull_id} –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –ó–ê–ö–†–´–¢ ({current}/{target} —Ç)")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞
        exporter_id = pull.get("exporter_id")
        if exporter_id:
            try:
                await bot.send_message(
                    exporter_id,
                    f"üéâ <b>–ü—É–ª #{pull_id} –∑–∞–∫—Ä—ã—Ç!</b>\n\n"
                    f"üì¶ –ö—É–ª—å—Ç—É—Ä–∞: {pull['culture']}\n"
                    f"üìä –û–±—ä—ë–º: {current}/{target} —Ç\n"
                    f"‚úÖ –ü—É–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–≥—Ä—É–∑–∫–µ.",
                    parse_mode="HTML"
                )
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞: {e}")

# ==================== –ö–û–ù–ï–¶ –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô ====================

def save_deals_to_pickle():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –≤ pickle"""
    try:
        deals_file = os.path.join(DATA_DIR, 'deals.pkl')
        with open(deals_file, 'wb') as f:
            pickle.dump(deals, f)
        logging.info("‚úÖ –°–¥–µ–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")

def save_data():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        save_users_to_pickle()
        save_batches_to_pickle()
        save_pulls_to_pickle()
        save_deals_to_pickle()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if logistics_cards:
            with open(os.path.join(DATA_DIR, 'logistics_cards.pkl'), 'wb') as f:
                pickle.dump(logistics_cards, f)

        if expeditor_cards:
            with open(os.path.join(DATA_DIR, 'expeditor_cards.pkl'), 'wb') as f:
                pickle.dump(expeditor_cards, f)

        if logistics_requests:
            with open(os.path.join(DATA_DIR, 'logistics_requests.pkl'), 'wb') as f:
                pickle.dump(logistics_requests, f)

        logging.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def get_logistics_by_port(port):
    """–ü–æ–∏—Å–∫ –ª–æ–≥–∏—Å—Ç–æ–≤ –ø–æ –ø–æ—Ä—Ç—É"""
    result = []
    for uid, card in logistics_cards.items():
        ports = card.get('ports', [])
        if isinstance(ports, str):
            ports = [p.strip() for p in ports.split(',')]
        if port in ports or '–í—Å–µ –ø–æ—Ä—Ç—ã' in ports:
            result.append({
                'user_id': uid,
                'company': card.get('company', users.get(uid, {}).get('name', '–ù/–î')),
                'phone': users.get(uid, {}).get('phone', '–ù/–î'),
                'price_per_ton': card.get('price_per_ton', 0),
                'transport_type': card.get('transport_type', '–ù/–î')
            })
    return result

def get_expeditors_by_port(port):
    """–ü–æ–∏—Å–∫ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤ –ø–æ –ø–æ—Ä—Ç—É"""
    result = []
    for uid, card in expeditor_cards.items():
        ports = card.get('ports', [])
        if isinstance(ports, str):
            ports = [p.strip() for p in ports.split(',')]
        if port in ports or '–í—Å–µ –ø–æ—Ä—Ç—ã' in ports:
            result.append({
                'user_id': uid,
                'company': card.get('company', users.get(uid, {}).get('name', '–ù/–î')),
                'phone': users.get(uid, {}).get('phone', '–ù/–î'),
                'services': card.get('services', '–ù/–î'),
                'dt_price': card.get('dt_price', 0)
            })
    return result

def format_logistics_cards(logistics):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ª–æ–≥–∏—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not logistics:
        return "‚ùå –õ–æ–≥–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"

    text = ""
    for i, log in enumerate(logistics[:5], 1):
        text += f"{i}. üöö <b>{log.get('company', '–ù/–î')}</b>\n"
        text += f"   üì± {log.get('phone', '–ù/–î')}\n"
        text += f"   üí∞ {log.get('price_per_ton', 0):,.0f} ‚ÇΩ/—Ç\n"
        text += f"   üöõ {log.get('transport_type', '–ù/–î')}\n\n"

    if len(logistics) > 5:
        text += f"... –∏ –µ—â—ë {len(logistics) - 5} –ª–æ–≥–∏—Å—Ç–æ–≤"

    return text

def format_expeditors_cards(expeditors):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    if not expeditors:
        return "‚ùå –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞"

    text = ""
    for i, exp in enumerate(expeditors[:5], 1):
        text += f"{i}. üìã <b>{exp.get('company', '–ù/–î')}</b>\n"
        text += f"   üì± {exp.get('phone', '–ù/–î')}\n"
        text += f"   üí∞ –î–¢: {exp.get('dt_price', 0):,.0f} ‚ÇΩ\n"
        text += f"   üì¶ {exp.get('services', '–ù/–î')}\n\n"

    if len(expeditors) > 5:
        text += f"... –∏ –µ—â—ë {len(expeditors) - 5} —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤"

    return text

def generate_unique_id():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID"""
    import uuid
    import time
    timestamp = int(time.time() * 1000) % 1000000
    unique = str(uuid.uuid4())[:8].upper()
    return f"{timestamp}{unique}"

def generate_id():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID"""
    import uuid, time
    return f"{int(time.time())%1000000}{str(uuid.uuid4())[:6].upper()}"

def get_logistics_by_port(port):
    """–ü–æ–∏—Å–∫ –ª–æ–≥–∏—Å—Ç–æ–≤ –ø–æ –ø–æ—Ä—Ç—É"""
    result = []
    for uid, card in logistics_cards.items():
        ports = card.get('ports', [])
        if isinstance(ports, str):
            ports = [p.strip() for p in ports.split(',')]
        if port in ports or '–í—Å–µ –ø–æ—Ä—Ç—ã' in ports:
            result.append({
                'user_id': uid,
                'company': card.get('company', users.get(uid, {}).get('name', '–ù/–î')),
                'phone': users.get(uid, {}).get('phone', '–ù/–î'),
                'price_per_ton': card.get('price_per_ton', 0),
                'transport_type': card.get('transport_type', '–ù/–î'),
                'routes': card.get('routes', '–ù/–î')
            })
    return result

def get_expeditors_by_port(port):
    """–ü–æ–∏—Å–∫ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤ –ø–æ –ø–æ—Ä—Ç—É"""
    result = []
    for uid, card in expeditor_cards.items():
        ports = card.get('ports', [])
        if isinstance(ports, str):
            ports = [p.strip() for p in ports.split(',')]
        if port in ports or '–í—Å–µ –ø–æ—Ä—Ç—ã' in ports:
            result.append({
                'user_id': uid,
                'company': card.get('company', users.get(uid, {}).get('name', '–ù/–î')),
                'phone': users.get(uid, {}).get('phone', '–ù/–î'),
                'services': card.get('services', '–ù/–î'),
                'dt_price': card.get('dt_price', 0),
                'experience': card.get('experience', '–ù/–î')
            })
    return result

def format_logistics_cards(logistics):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ª–æ–≥–∏—Å—Ç–æ–≤"""
    if not logistics:
        return "‚ùå –õ–æ–≥–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    text = ""
    for i, log in enumerate(logistics[:5], 1):
        text += f"{i}. üöö <b>{log.get('company', '–ù/–î')}</b>\\n"
        text += f"   üì± {log.get('phone')}\\n"
        text += f"   üí∞ {log.get('price_per_ton', 0):,.0f} ‚ÇΩ/—Ç\\n\\n"
    return text

def format_expeditors_cards(expeditors):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤"""
    if not expeditors:
        return "‚ùå –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    text = ""
    for i, exp in enumerate(expeditors[:5], 1):
        text += f"{i}. üìã <b>{exp.get('company', '–ù/–î')}</b>\\n"
        text += f"   üì± {exp.get('phone')}\\n"
        text += f"   üí∞ {exp.get('dt_price', 0):,.0f} ‚ÇΩ\\n\\n"
    return text

def save_deals_to_pickle():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫"""
    try:
        with open(os.path.join(DATA_DIR, 'deals.pkl'), 'wb') as f:
            pickle.dump(deals, f)
        logging.info("‚úÖ –°–¥–µ–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def save_logistics_requests_to_pickle():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É"""
    try:
        with open(os.path.join(DATA_DIR, 'logistics_requests.pkl'), 'wb') as f:
            pickle.dump(logistics_requests, f)
        logging.info("‚úÖ –ó–∞—è–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def save_logistics_offers_to_pickle():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    try:
        with open(os.path.join(DATA_DIR, 'logistics_offers.pkl'), 'wb') as f:
            pickle.dump(logistics_offers, f)
        logging.info("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def save_logistics_cards_to_pickle():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ª–æ–≥–∏—Å—Ç–æ–≤"""
    try:
        with open(os.path.join(DATA_DIR, 'logistics_cards.pkl'), 'wb') as f:
            pickle.dump(logistics_cards, f)
        logging.info("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–≥–∏—Å—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def save_expeditor_cards_to_pickle():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤"""
    try:
        with open(os.path.join(DATA_DIR, 'expeditor_cards.pkl'), 'wb') as f:
            pickle.dump(expeditor_cards, f)
        logging.info("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def save_data():
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        save_users_to_pickle()
        save_batches_to_pickle()
        save_pulls_to_pickle()
        save_deals_to_pickle()
        save_logistics_requests_to_pickle()
        save_logistics_offers_to_pickle()
        save_logistics_cards_to_pickle()
        save_expeditor_cards_to_pickle()
        logging.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def save_logistic_offers():
    try:
        with open(os.path.join(DATA_DIR, 'logistic_offers.pkl'), 'wb') as f:
            pickle.dump(logistic_offers, f)
        logging.info("‚úÖ Logistic offers saved")
    except Exception as e:
        logging.error(f"‚ùå Error saving logistic offers: {e}")


def load_logistic_offers():
    global logistic_offers
    try:
        filepath = os.path.join(DATA_DIR, 'logistic_offers.pkl')
        if os.path.exists(filepath):
            with open(filepath, 'rb') as f:
                logistic_offers = pickle.load(f)
            logging.info(f"‚úÖ Loaded {len(logistic_offers)} logistic offers")
        else:
            logistic_offers = {}
    except Exception as e:
        logging.error(f"‚ùå Error loading logistic offers: {e}")
        logistic_offers = {}


def save_deliveries():
    try:
        with open(os.path.join(DATA_DIR, 'deliveries.pkl'), 'wb') as f:
            pickle.dump(deliveries, f)
        logging.info("‚úÖ Deliveries saved")
    except Exception as e:
        logging.error(f"‚ùå Error saving deliveries: {e}")


def load_deliveries():
    global deliveries
    try:
        filepath = os.path.join(DATA_DIR, 'deliveries.pkl')
        if os.path.exists(filepath):
            with open(filepath, 'rb') as f:
                deliveries = pickle.load(f)
            logging.info(f"‚úÖ Loaded {len(deliveries)} deliveries")
        else:
            deliveries = {}
    except Exception as e:
        logging.error(f"‚ùå Error loading deliveries: {e}")
        deliveries = {}


def save_expeditor_offers():
    try:
        with open(os.path.join(DATA_DIR, 'expeditor_offers.pkl'), 'wb') as f:
            pickle.dump(expeditor_offers, f)
        logging.info("‚úÖ Expeditor offers saved")
    except Exception as e:
        logging.error(f"‚ùå Error saving expeditor offers: {e}")


def load_expeditor_offers():
    global expeditor_offers
    try:
        filepath = os.path.join(DATA_DIR, 'expeditor_offers.pkl')
        if os.path.exists(filepath):
            with open(filepath, 'rb') as f:
                expeditor_offers = pickle.load(f)
            logging.info(f"‚úÖ Loaded {len(expeditor_offers)} expeditor offers")
        else:
            expeditor_offers = {}
    except Exception as e:
        logging.error(f"‚ùå Error loading expeditor offers: {e}")
        expeditor_offers = {}

# ============================================================================
# –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–∞—Ä—Å–∏–Ω–≥ ID –∏–∑ callback_data
# ============================================================================

def parse_callback_id(callback_data: str) -> int:
    """–ü–∞—Ä—Å–∏—Ç ID –∏–∑ callback_data"""
    import logging
    
    # –°–ø–∏—Å–æ–∫ –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —Å–æ–¥–µ—Ä–∂–∞—Ç ID
    non_id_prefixes = ['culture:', 'port:', 'region:']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
    for prefix in non_id_prefixes:
        if callback_data.startswith(prefix):
            return None  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º callback –±–µ–∑ ID
    
    try:
        if ':' in callback_data:
            return int(callback_data.split(':')[-1])
        elif '_' in callback_data:
            return int(callback_data.split('_')[-1])
        return int(callback_data)
    except (ValueError, IndexError) as e:
        logging.error(f"Parse error: {e}")
        raise ValueError(f"Cannot parse ID from '{callback_data}'")



class RegistrationStatesGroup(StatesGroup):
    name = State()
    phone = State()
    email = State()
    region = State()
    role = State()
    inn = State()
    company_details = State()



# FSM –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫—É–ª—å—Ç—É—Ä–µ
class SearchByCulture(StatesGroup):
    waiting_culture = State()


# FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–≥–∏—Å—Ç–∞
class CreateLogisticCardStates(StatesGroup):
    routes = State()
    price_per_km = State()
    price_per_ton = State()
    min_volume = State()
    transport_type = State()
    ports = State()
    additional_info = State()

# FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞
class CreateExpeditorCardStates(StatesGroup):
    services = State()
    dt_price = State()
    ports = State()
    experience = State()
    additional_info = State()

class AddBatch(StatesGroup):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ —Ñ–µ—Ä–º–µ—Ä–æ–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    culture = State()
    region = State()
    volume = State()
    price = State()
    humidity = State()
    impurity = State()
    quality_class = State()
    storage_type = State()
    readiness_date = State()

class EditBatch(StatesGroup):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏"""
    field = State()
    new_value = State()

class DeleteBatch(StatesGroup):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏"""
    confirmation = State()

class EditProfile(StatesGroup):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    field = State()
    new_value = State()

class CreatePullStatesGroup(StatesGroup):
    culture = State()  # –í—ã–±–æ—Ä –∫—É–ª—å—Ç—É—Ä—ã
    volume = State()   # –û–±—ä–µ–º
    price = State()    # –¶–µ–Ω–∞
    port = State()     # –ü–æ—Ä—Ç
    moisture = State() # –í–ª–∞–∂–Ω–æ—Å—Ç—å
    nature = State()   # –ù–∞—Ç—É—Ä–∞
    impurity = State() # –°–æ—Ä–Ω–∞—è –ø—Ä–∏–º–µ—Å—å
    weed = State()     # –ó–µ—Ä–Ω–æ–≤–∞—è –ø—Ä–∏–º–µ—Å—å
    documents = State() # –î–æ–∫—É–º–µ–Ω—Ç—ã
    doctype = State()  # –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤

class JoinPullStatesGroup(StatesGroup):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–µ—Ä–º–µ—Ä–∞ –∫ –ø—É–ª—É"""
    select_pull = State()
    select_batch = State()
    enter_volume = State()
    confirm_join = State()
    volume = State()

class LogisticsOffer(StatesGroup):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞"""
    transport_type = State()
    route_from = State()
    route_to = State()
    price_per_ton = State()
    delivery_days = State()
    additional_info = State()

class LogisticOfferStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    request_id = State()
    vehicle_type = State()
    price = State()
    delivery_date = State()
    confirm = State()


class ExpeditorOfferStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    service_type = State()
    ports = State()
    price = State()
    terms = State()
    confirm = State()

class ExpeditorOffer(StatesGroup):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    services = State()
    price = State()
    terms_days = State()
    additional_info = State()

class Broadcast(StatesGroup):
    """–†–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞"""
    message = State()
    confirm = State()


class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    waiting_broadcast_message = State()
    waiting_user_search = State()
    waiting_export_format = State()
    viewing_user_details = State()
    waiting_manual_match = State()


class AdminStats(StatesGroup):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞"""
    period = State()

class ExportData(StatesGroup):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–º"""
    data_type = State()

class EditPullStatesGroup(StatesGroup):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–º"""
    select_pull = State()
    select_field = State()
    edit_culture = State()
    edit_volume = State()
    edit_price = State()
    edit_port = State()
    edit_region = State()
    edit_moisture = State()
    edit_nature = State()
    edit_impurity = State()
    edit_weed = State()
    confirm_changes = State()

class QuickBatchStatesGroup(StatesGroup):
    """FSM –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ –ø—É–ª–ª—É"""
    pull_id = State()  # ID –ø—É–ª–ª–∞
    volume = State()
    price = State()
    quality = State()
    moisture = State()
    nature = State()
    impurity = State()
    documents = State()

class SearchBatchesStatesGroup(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–∏–π"""
    culture = State()
    enter_culture = State()
    enter_max_price = State()
    enter_max_volume = State()
    enter_min_price = State()
    enter_min_volume = State()
    enter_quality_class = State()
    enter_region = State()
    enter_storage_type = State()
    region = State()

class AttachFilesStatesGroup(StatesGroup):
    """–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫ –ø–∞—Ä—Ç–∏–∏"""
    upload_files = State()
    confirm_upload = State()

class ShippingRequestStatesGroup(StatesGroup):
    """–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É"""
    pull_id = State()
    route_from = State()
    route_to = State()
    volume = State()
    culture = State()
    desired_date = State()
# –õ–æ–≥–∏—Å—Ç–∏–∫–∞ - –∑–∞—è–≤–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞

class CreateLogisticRequestStatesGroup(StatesGroup):
    route_from = State()
    loading_date = State()
    notes = State()

# –õ–æ–≥–∏—Å—Ç–∏–∫–∞ - –æ—Ç–∫–ª–∏–∫ –ª–æ–≥–∏—Å—Ç–∞
class LogisticOfferStatesGroup(StatesGroup):
    """FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    request_id = State()        # ID –∑–∞—è–≤–∫–∏
    vehicle_type = State()      # –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    price = State()             # –¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_date = State()     # –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    additional_info = State()   # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    confirm = State()           # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ


# –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –ø—É–ª—É

def validate_phone(phone):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    cleaned = re.sub(r'[\s\-\(\)\+]', '', phone)
    return len(cleaned) >= 10 and cleaned.isdigit()


def validate_email(email):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ email –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º regex"""
    if not email or not isinstance(email, str):
        return False
    # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω: –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –ø–µ—Ä–µ–¥ @
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return bool(re.match(pattern, email.strip()))

def validate_email(email):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email"""
    return re.match(r'^[\w\.-]+@[\w\.-]+\.\w+$', email) is not None

def validate_inn(inn):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù"""
    return inn.isdigit() and len(inn) in [10, 12]

def validate_volume(volume):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–º–∞"""
    try:
        vol = float(volume)
        return vol > 0
    except ValueError:
        return False

def validate_price(price):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã"""
    try:
        pr = float(price)
        return pr > 0
    except ValueError:
        return False

def validate_percentage(value):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        val = float(value)
        return 0 <= val <= 100
    except ValueError:
        return False

def validate_date(date_str):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã"""
    try:
        datetime.strptime(date_str, '%d.%m.%Y')
        return True
    except ValueError:
        return False

def farmer_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é")
    keyboard.row("üîß –ú–æ–∏ –ø–∞—Ä—Ç–∏–∏", "üéØ –ü—É–ª—ã")
    keyboard.row("üîç –ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤", "üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏")
    keyboard.row("üöö –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–æ–≤")  # ‚úÖ –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
    keyboard.row("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    keyboard.add("üìà –¶–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ", "üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞")
    return keyboard


def exporter_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—É–ª"),
        KeyboardButton("üì¶ –ú–æ–∏ –ø—É–ª—ã")
    )
    keyboard.add(
        KeyboardButton("üöö –ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É"),  # ‚Üê –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê
        KeyboardButton("üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏")
    )
    keyboard.add(
        KeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–∏–∏"),
        KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    )
    keyboard.add(
        KeyboardButton("üìà –¶–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ"),
        KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞")
    )
    return keyboard


def logistic_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏"))
    keyboard.add(KeyboardButton("üíº –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"), KeyboardButton("üöö –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"))
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∏ —Ü–µ–Ω—ã"))
    keyboard.add(KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    return keyboard


def expeditor_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"))
    keyboard.add(KeyboardButton("üíº –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"), KeyboardButton("üö¢ –ú–æ–∏ —É—Å–ª—É–≥–∏"))
    keyboard.add(KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∏ —Ü–µ–Ω—ã"))
    keyboard.add(KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"))
    return keyboard


def vehicle_type_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data="vehicle:truck"),
        InlineKeyboardButton("üöÇ –ñ/–¥", callback_data="vehicle:train")
    )
    keyboard.add(
        InlineKeyboardButton("üö¢ –°—É–¥–Ω–æ", callback_data="vehicle:ship"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    )
    return keyboard


def expeditor_service_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã", callback_data="service:docs"),
        InlineKeyboardButton("üè¢ –¢–∞–º–æ–∂–Ω—è", callback_data="service:customs")
    )
    keyboard.add(
        InlineKeyboardButton("üö¢ –§—Ä–∞—Ö—Ç", callback_data="service:freight"),
        InlineKeyboardButton("üì¶ –ü–æ–ª–Ω—ã–π —Å–µ—Ä–≤–∏—Å", callback_data="service:full")
    )
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    return keyboard

# ============= –ú–û–ò –°–î–ï–õ–ö–ò –§–ï–†–ú–ï–†–ê =============
@dp.message_handler(Text(equals='üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏'), state='*')
async def show_my_deals_message(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    user_role = users.get(user_id, {}).get('role', 'unknown')

    # ‚úÖ –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–ê –î–ê–ù–ù–´–•
    if not isinstance(batches, dict):
        logging.error(f"‚ùå batches –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø: {type(batches)}")
        batches_local = {}
    else:
        batches_local = batches

    user_batches = batches_local.get(user_id, [])
    
    if user_role == 'farmer':
        user_batches = batches.get(user_id, [])
        if not user_batches:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π", reply_markup=farmer_keyboard())
            return
        text = "üì¶ –ú–æ–∏ –ø–∞—Ä—Ç–∏–∏:\n\n"
        for b in user_batches[:10]:
            text += f"üì¶ #{b.get('id')} | {b.get('culture')} | {b.get('volume')}—Ç\n"
        await message.answer(text, reply_markup=farmer_keyboard())
    
    elif user_role == 'exporter':
        user_matches = [m for m in matches.values() 
                       if pulls.get(m.get('pull_id'), {}).get('exporter_id') == user_id]
        if not user_matches:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫", reply_markup=exporter_keyboard())
            return
        text = "üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏:\n\n"
        for m in user_matches[:10]:
            text += f"ü§ù –°–¥–µ–ª–∫–∞ #{m.get('id')} | –ü—É–ª #{m.get('pull_id')}\n"
        await message.answer(text, reply_markup=exporter_keyboard())
    
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")


@dp.message_handler(lambda m: m.text == "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏", state='*')
async def expeditor_view_available_deals(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    
    if user_id not in users or users[user_id].get('role') != 'expeditor':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞–º")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–¥–µ–ª–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º matched (–∂–¥—É—Ç –ª–æ–≥–∏—Å—Ç–∏–∫—É)
    available_deals = []
    for exporter_id, exporter_deals in deals.items():
        for deal in exporter_deals:
            if deal.get('status') == 'matched' and deal.get('expeditor_id') is None:
                available_deals.append(deal)
    
    if not available_deals:
        await message.answer(
            "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏</b>\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.",
            parse_mode='HTML'
        )
        return
    
    msg = f"üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏ ({len(available_deals)})</b>\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for deal in available_deals[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        deal_info = (
            f"üåæ {deal['culture']} ‚Ä¢ "
            f"{deal['total_volume']} —Ç ‚Ä¢ "
            f"üö¢ {deal['port']}"
        )
        
        keyboard.add(
            InlineKeyboardButton(
                deal_info,
                callback_data=f"expeditor_view_deal:{deal['id']}"
            )
        )
    
    await message.answer(msg + "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=keyboard, parse_mode='HTML')


@dp.callback_query_handler(lambda c: c.data.startswith('expeditor_view_deal:'), state='*')
async def expeditor_view_deal_details(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–∫–∏"""
    await state.finish()
    
    try:
        deal_id = parse_callback_id(callback.data)
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    # –ò—â–µ–º —Å–¥–µ–ª–∫—É
    deal = None
    for exporter_deals in deals.values():
        for d in exporter_deals:
            if d['id'] == deal_id:
                deal = d
                break
        if deal:
            break
    
    if not deal:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    msg = f"üìã <b>–°–¥–µ–ª–∫–∞ #{deal_id}</b>\n\n"
    msg += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {deal['culture']}\n"
    msg += f"üì¶ –û–±—ä—ë–º: {deal['total_volume']} —Ç\n"
    msg += f"üí∞ –¶–µ–Ω–∞: {deal['price']:,.0f} ‚ÇΩ/—Ç\n"
    msg += f"üö¢ –ü–æ—Ä—Ç: {deal['port']}\n"
    msg += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(deal.get('participants', []))}\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"expeditor_take:{deal_id}"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="expeditor_available_deals")
    )
    
    await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('expeditor_take:'), state='*')
async def expeditor_take_deal(callback: types.CallbackQuery, state: FSMContext):
    """–í–∑—è—Ç—å —Å–¥–µ–ª–∫—É –≤ —Ä–∞–±–æ—Ç—É"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    try:
        deal_id = parse_callback_id(callback.data)
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    # –ò—â–µ–º —Å–¥–µ–ª–∫—É
    deal = None
    for exporter_deals in deals.values():
        for d in exporter_deals:
            if d['id'] == deal_id:
                deal = d
                break
        if deal:
            break
    
    if not deal:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    if deal.get('expeditor_id'):
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ —É–∂–µ –≤–∑—è—Ç–∞ –¥—Ä—É–≥–∏–º —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–º", show_alert=True)
        return
    
    # –ù–∞–∑–Ω–∞—á–∞–µ–º —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞
    deal['expeditor_id'] = user_id
    deal['expeditor_name'] = users[user_id].get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    deal['status'] = 'in_progress'
    
    save_deals_to_pickle()
    
    await callback.answer("‚úÖ –°–¥–µ–ª–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!", show_alert=True)
    
    await callback.message.edit_text(
        f"‚úÖ <b>–°–¥–µ–ª–∫–∞ #{deal_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!</b>\n\n"
        f"üåæ {deal['culture']} ‚Ä¢ {deal['total_volume']} —Ç\n"
        f"üö¢ –ü–æ—Ä—Ç: {deal['port']}\n\n"
        f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ 'üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏' –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.",
        parse_mode='HTML'
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞
    try:
        await bot.send_message(
            deal['exporter_id'],
            f"‚úÖ <b>–°–¥–µ–ª–∫–∞ #{deal_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!</b>\n\n"
            f"üìã –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä: {users[user_id].get('name')}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {users[user_id].get('phone')}\n\n"
            f"–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –Ω–∞—á–Ω—ë—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.",
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞: {e}")


@dp.message_handler(lambda m: m.text == "üíº –ú–æ–∏ —Å–¥–µ–ª–∫–∏", state='*')
async def expeditor_my_deals(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–¥–µ–ª–æ–∫ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–¥–µ–ª–∫–∏ —ç—Ç–æ–≥–æ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞
    my_deals = []
    for exporter_deals in deals.values():
        for deal in exporter_deals:
            if deal.get('expeditor_id') == user_id:
                my_deals.append(deal)
    
    if not my_deals:
        await message.answer(
            "üíº <b>–ú–æ–∏ —Å–¥–µ–ª–∫–∏</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ.",
            parse_mode='HTML'
        )
        return
    
    msg = f"üíº <b>–ú–æ–∏ —Å–¥–µ–ª–∫–∏ ({len(my_deals)})</b>\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for deal in my_deals:
        status_emoji = {
            'in_progress': '‚è≥',
            'documents_ready': 'üìÑ',
            'completed': '‚úÖ'
        }.get(deal.get('status'), 'üìã')
        
        deal_info = (
            f"{status_emoji} #{deal['id']} ‚Ä¢ "
            f"{deal['culture']} ‚Ä¢ "
            f"{deal['total_volume']} —Ç"
        )
        
        keyboard.add(
            InlineKeyboardButton(
                deal_info,
                callback_data=f"expeditor_my_deal:{deal['id']}"
            )
        )
    
    await message.answer(msg + "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É:", reply_markup=keyboard, parse_mode='HTML')



def admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
        KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    keyboard.add(
        KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
        KeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    )
    keyboard.add(
        KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã"),
        KeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    )
    keyboard.add(KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard


def adminkeyboard():
    """–ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    return admin_keyboard()


def format_admin_statistics():
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    total_users = len(users)
    farmers_count = len([u for u in users.values() if u.get('role') == 'farmer'])
    exporters_count = len([u for u in users.values() if u.get('role') == 'exporter'])
    logistics_count = len([u for u in users.values() if u.get('role') == 'logistic'])
    expeditors_count = len([u for u in users.values() if u.get('role') == 'expeditor'])

    total_pulls = len(pulls)
    active_pulls = len([p for p in pulls.values() if p.get('status') == 'active'])

    total_batches = sum(len(batches) for user_batches in batches.values())

    total_requests = len(shipping_requests)
    active_requests = len([r for r in shipping_requests.values() if r.get('status') == 'active'])

    msg = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
    msg += "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    msg += f"  ‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
    msg += f"  ‚Ä¢ –§–µ—Ä–º–µ—Ä—ã: {farmers_count}\n"
    msg += f"  ‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä—ã: {exporters_count}\n"
    msg += f"  ‚Ä¢ –õ–æ–≥–∏—Å—Ç—ã: {logistics_count}\n"
    msg += f"  ‚Ä¢ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—ã: {expeditors_count}\n\n"

    msg += "üéØ <b>–ü—É–ª—ã:</b>\n"
    msg += f"  ‚Ä¢ –í—Å–µ–≥–æ: {total_pulls}\n"
    msg += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_pulls}\n\n"

    msg += "üì¶ <b>–ü–∞—Ä—Ç–∏–∏:</b>\n"
    msg += f"  ‚Ä¢ –í—Å–µ–≥–æ: {total_batches}\n\n"

    msg += "üöö <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É:</b>\n"
    msg += f"  ‚Ä¢ –í—Å–µ–≥–æ: {total_requests}\n"
    msg += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_requests}\n"

    return msg

@dp.message_handler(commands=['reset'], state='*')
async def reset_account(message: types.Message, state: FSMContext):
    """–£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.finish()

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_reset:{user_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_reset")
    )

    await message.answer(
        "‚ö†Ô∏è *–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞*\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:\n"
        "‚Ä¢ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚Ä¢ –í—Å–µ –≤–∞—à–∏ –ø–∞—Ä—Ç–∏–∏ (–¥–ª—è —Ñ–µ—Ä–º–µ—Ä–∞)\n"
        "‚Ä¢ –í—Å–µ –≤–∞—à–∏ –ø—É–ª—ã (–¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞)\n"
        "‚Ä¢ –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–∞–º—è—Ç–∏ –∏ Google Sheets\n\n"
        "‚ö†Ô∏è *–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!*",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@dp.callback_query_handler(lambda c: c.data.startswith('confirm_reset:'), state='*')
async def confirm_reset_account(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    user_id = parse_callback_id(callback.data)

    if callback.from_user.id != user_id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç", show_alert=True)
        return

    deleted_items = []

    # 1. –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è users (–ü–ê–ú–Ø–¢–¨ –ë–û–¢–ê)
    if user_id in users:
        role = users[user_id].get('role', 'user')
        del users[user_id]
        deleted_items.append(f"–ø—Ä–æ—Ñ–∏–ª—å ({role})")
        logging.info(f"‚úÖ –£–¥–∞–ª—ë–Ω user {user_id} –∏–∑ –ø–∞–º—è—Ç–∏")

    # 2. –£–¥–∞–ª—è–µ–º –ø–∞—Ä—Ç–∏–∏ —Ñ–µ—Ä–º–µ—Ä–∞ (–ü–ê–ú–Ø–¢–¨ –ë–û–¢–ê)
    if user_id in batches:
        batch_count = len(batches[user_id])
        del batches[user_id]
        deleted_items.append(f"{batch_count} –ø–∞—Ä—Ç–∏–π")
        logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {batch_count} –ø–∞—Ä—Ç–∏–π —Ñ–µ—Ä–º–µ—Ä–∞ {user_id}")
    
    # 4. –£–¥–∞–ª—è–µ–º –∏–∑ Google Sheets - Users
    try:
        worksheet = spreadsheet.worksheet('Users')
        cell = worksheet.find(str(user_id))
        if cell:
            worksheet.delete_rows(cell.row)
            deleted_items.append("–∑–∞–ø–∏—Å—å –≤ Google Sheets (Users)")
            logging.info(f"‚úÖ –£–¥–∞–ª—ë–Ω –∞–∫–∫–∞—É–Ω—Ç {user_id} –∏–∑ Google Sheets (Users)")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Google Sheets (Users): {e}")

    # 5. –£–¥–∞–ª—è–µ–º –ø–∞—Ä—Ç–∏–∏ –∏–∑ Google Sheets - Batches
    try:
        worksheet = spreadsheet.worksheet('Batches')
        all_values = worksheet.get_all_values()
        rows_to_delete = []

        for i, row in enumerate(all_values[1:], start=2):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if row and len(row) > 1 and str(row[1]) == str(user_id):  # farmer_id –≤ –∫–æ–ª–æ–Ω–∫–µ 2
                rows_to_delete.append(i)

        # –£–¥–∞–ª—è–µ–º —Å –∫–æ–Ω—Ü–∞ —á—Ç–æ–±—ã –∏–Ω–¥–µ–∫—Å—ã –Ω–µ —Å–±–∏–≤–∞–ª–∏—Å—å
        for row_num in reversed(rows_to_delete):
            worksheet.delete_rows(row_num)

        if rows_to_delete:
            deleted_items.append(f"{len(rows_to_delete)} –ø–∞—Ä—Ç–∏–π –∏–∑ Google Sheets")
            logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(rows_to_delete)} –ø–∞—Ä—Ç–∏–π –∏–∑ Google Sheets")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–π –∏–∑ Google Sheets: {e}")

    # 6. –£–¥–∞–ª—è–µ–º –ø—É–ª—ã –∏–∑ Google Sheets - Pulls
    try:
        worksheet = spreadsheet.worksheet('Pulls')
        all_values = worksheet.get_all_values()
        rows_to_delete = []

        for i, row in enumerate(all_values[1:], start=2):
            if row and len(row) > 1 and str(row[1]) == str(user_id):  # exporter_id –≤ –∫–æ–ª–æ–Ω–∫–µ 2
                rows_to_delete.append(i)

        for row_num in reversed(rows_to_delete):
            worksheet.delete_rows(row_num)

        if rows_to_delete:
            deleted_items.append(f"{len(rows_to_delete)} –ø—É–ª–ª–æ–≤ –∏–∑ Google Sheets")
            logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(rows_to_delete)} –ø—É–ª–ª–æ–≤ –∏–∑ Google Sheets")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–ª–æ–≤ –∏–∑ Google Sheets: {e}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    if deleted_items:
        items_text = "\n".join([f"‚Ä¢ {item}" for item in deleted_items])
        result_msg = (
            f"‚úÖ *–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω!*\n\n"
            f"–£–¥–∞–ª–µ–Ω–æ:\n{items_text}\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start"
        )
    else:
        result_msg = "‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω"

    await callback.message.edit_text(result_msg, parse_mode="Markdown")
    await callback.answer("‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª—ë–Ω")


@dp.callback_query_handler(lambda c: c.data == 'cancel_reset', state='*')
async def cancel_reset_account(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
def format_admin_analytics():
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    regions_count = {}
    for user in users.values():
        region = user.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')
        regions_count[region] = regions_count.get(region, 0) + 1

    top_regions = sorted(regions_count.items(), key=lambda x: x[1], reverse=True)[:5]

    cultures_count = {}
    for user_batches in batches.values():
        for batch in user_batches:
            culture = batch.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            cultures_count[culture] = cultures_count.get(culture, 0) + 1

    top_cultures = sorted(cultures_count.items(), key=lambda x: x[1], reverse=True)[:5]

    pool_stats = {'forming': 0, 'active': 0, 'completed': 0, 'cancelled': 0}
    for pull in pulls.values():
        status = pull.get('status', 'unknown')
        if status in pool_stats:
            pool_stats[status] += 1

    msg = "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"

    if top_regions:
        msg += "üó∫ <b>–¢–æ–ø-5 —Ä–µ–≥–∏–æ–Ω–æ–≤:</b>\n"
        for idx, (region, count) in enumerate(top_regions, 1):
            msg += f"  {idx}. {region}: {count} –ø–æ–ª—å–∑.\n"

    if top_cultures:
        msg += "\nüåæ <b>–¢–æ–ø-5 –∫—É–ª—å—Ç—É—Ä:</b>\n"
        for idx, (culture, count) in enumerate(top_cultures, 1):
            msg += f"  {idx}. {culture}: {count} –ø–∞—Ä—Ç–∏–π\n"

    msg += "\nüéØ <b>–°—Ç–∞—Ç—É—Å—ã –ø—É–ª–æ–≤:</b>\n"
    msg += f"  ‚Ä¢ –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è: {pool_stats['forming']}\n"
    msg += f"  ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {pool_stats['active']}\n"
    msg += f"  ‚Ä¢ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ: {pool_stats['completed']}\n"
    msg += f"  ‚Ä¢ –û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ: {pool_stats['cancelled']}\n"

    return msg


def format_admin_users():
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    farmers = [u for u in users.values() if u.get('role') == 'farmer']
    exporters = [u for u in users.values() if u.get('role') == 'exporter']
    logistics = [u for u in users.values() if u.get('role') == 'logistic']
    expeditors = [u for u in users.values() if u.get('role') == 'expeditor']

    msg = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
    msg += f"–í—Å–µ–≥–æ: {len(users)}\n\n"

    if farmers:
        msg += f"<b>üåæ –§–µ—Ä–º–µ—Ä—ã ({len(farmers)})</b>\n"
        for u in farmers[:5]:
            name = u.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            phone = u.get('phone', '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            region = u.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')
            msg += f"  ‚Ä¢ {name}\n    üì± {phone}\n    üìç {region}\n"
        if len(farmers) > 5:
            msg += f"  ... –∏ –µ—â—ë {len(farmers) - 5}\n"
        msg += "\n"

    if exporters:
        msg += f"<b>üö¢ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä—ã ({len(exporters)})</b>\n"
        for u in exporters[:5]:
            name = u.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            phone = u.get('phone', '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            msg += f"  ‚Ä¢ {name}\n    üì± {phone}\n"
        if len(exporters) > 5:
            msg += f"  ... –∏ –µ—â—ë {len(exporters) - 5}\n"
        msg += "\n"

    if logistics:
        msg += f"<b>üöö –õ–æ–≥–∏—Å—Ç—ã ({len(logistics)})</b>\n"
        for u in logistics[:5]:
            name = u.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            phone = u.get('phone', '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            msg += f"  ‚Ä¢ {name}\n    üì± {phone}\n"
        if len(logistics) > 5:
            msg += f"  ... –∏ –µ—â—ë {len(logistics) - 5}\n"
        msg += "\n"

    if expeditors:
        msg += f"<b>üìã –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—ã ({len(expeditors)})</b>\n"
        for u in expeditors[:3]:
            name = u.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            phone = u.get('phone', '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            msg += f"  ‚Ä¢ {name}\n    üì± {phone}\n"
        if len(expeditors) > 3:
            msg += f"  ... –∏ –µ—â—ë {len(expeditors) - 3}\n"

    return msg


def join_pull_keyboard(pull_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—É–ª—É"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"confirm_join_pull:{pull_id}"),
        InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é", callback_data=f"select_batch_for_pull:{pull_id}"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_pools_list")
    )
    return keyboard

def get_pull_details_keyboard(pull_id, user_id, pull):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—É–ª–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if user_id == pull.get('exporter_id'):
        keyboard.add(
            InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"viewparticipants:{pull_id}"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"editpull_{pull_id}")
        )
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –ø—É–ª", callback_data=f"closepull_{pull_id}"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"deletepull_{pull_id}")
        )

    elif user_id in users and users[user_id].get('role') == 'farmer':
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"join_pull:{pull_id}")
        )
        keyboard.add(
            InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"viewparticipants:{pull_id}")
        )
    
    else:
        keyboard.add(
            InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"viewparticipants:{pull_id}")
        )
    
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_pools")
    )
    
    return keyboard

def logistics_offer_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üöõ –§—É—Ä–∞", callback_data="transport_type:truck"),
        InlineKeyboardButton("üöÇ –ñ/–î", callback_data="transport_type:train"),
        InlineKeyboardButton("üö¢ –°—É–¥–Ω–æ", callback_data="transport_type:ship")
    )
    return keyboard

def admin_broadcast_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_confirm"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel")
    )
    return keyboard

def culture_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    crops = ["–ü—à–µ–Ω–∏—Ü–∞", "–Ø—á–º–µ–Ω—å", "–ö—É–∫—É—Ä—É–∑–∞", "–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫", "–†–∞–ø—Å", "–°–æ—è"]
    buttons = [InlineKeyboardButton(crop, callback_data=f"culture:{crop}") for crop in crops]
    keyboard.add(*buttons)
    return keyboard

def region_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    regions = [
        '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π', '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π', '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π', '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
    ]
    for region in regions:
        keyboard.add(
            InlineKeyboardButton(region, callback_data=f"region:{region}")
        )
    return keyboard

def port_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    ports = [
        "–ê—Ä–∏–±",
        "–ê—Ä–∏–±-–°–Ω–∞–±",
        "–ö–ó–ö",
        "–ü–ö–§ –Æ–¢",
        "–ü–ö–§ –í–ü",
        "–ê—Å—Ç—Ä –ü–æ—Ä—Ç",
        "–ê—Å—Ç—Ä –£–Ω–∏–≤",
        "–ê—Å—Ç—Ä –Æ–∂–Ω",
        "–ó–Æ–ô–î-–í–ï–°–¢",
        "–ê–≥—Ä–æ–§—É–¥",
        "–ü–æ—Ä—Ç 83",
        "–ü–ö–§ –¶–ì–ü",
        "–ê—Å—Ç—Ä –∑–µ—Ä–Ω",
        "–ê—Å—Ç—Ä –º–æ—Ä—Å–∫"
    ]

    buttons = [InlineKeyboardButton(port, callback_data=f"selectport_{port}") for port in ports]
    keyboard.add(*buttons)
    return keyboard

def quality_class_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    for quality_class in QUALITY_CLASSES:
        keyboard.add(
            InlineKeyboardButton(quality_class, callback_data=f"quality:{quality_class}")
        )
    return keyboard

def storage_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    for storage_type in STORAGE_TYPES:
        keyboard.add(
            InlineKeyboardButton(storage_type, callback_data=f"storage:{storage_type}")
        )
    return keyboard

def confirm_keyboard(action="confirm"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm:{action}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel:{action}")
    )
    return keyboard

def batch_actions_keyboard(batch_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_batch:{batch_id}"),
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_batch:{batch_id}")
    )
    keyboard.add(InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data=f"attach_files:{batch_id}"))
    keyboard.add(InlineKeyboardButton("üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤", callback_data=f"view_files:{batch_id}"))
    keyboard.add(InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤", callback_data=f"find_exporters:{batch_id}"))
    keyboard.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_my_batches")  # ‚Üê –ò–°–ü–†–ê–í–¨ –≠–¢–û
    )
    return keyboard


def edit_batch_fields_keyboard(batch_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üåæ –ö—É–ª—å—Ç—É—Ä–∞", callback_data=f"editfield_crop_{batch_id}")  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–û
    )
    keyboard.add(
        InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data="edit_field:price"),
        InlineKeyboardButton("üì¶ –û–±—ä—ë–º", callback_data="edit_field:volume")
    )
    keyboard.add(
        InlineKeyboardButton("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å", callback_data="edit_field:humidity"),
        InlineKeyboardButton("üåæ –°–æ—Ä–Ω–æ—Å—Ç—å", callback_data="edit_field:impurity")
    )
    keyboard.add(
        InlineKeyboardButton("‚≠ê –ö–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞", callback_data="edit_field:quality_class"),
        InlineKeyboardButton("üè≠ –¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è", callback_data="edit_field:storage_type")
    )
    keyboard.add(
        InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏", callback_data="edit_field:readiness_date"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="edit_field:status")
    )
    keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")
    )
    return keyboard

def status_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Ç–∏–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    statuses = ['–ê–∫—Ç–∏–≤–Ω–∞', '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞', '–ü—Ä–æ–¥–∞–Ω–∞', '–°–Ω—è—Ç–∞ —Å –ø—Ä–æ–¥–∞–∂–∏']
    for status in statuses:
        keyboard.add(
            InlineKeyboardButton(status, callback_data=f"status:{status}")
        )
    return keyboard

def profile_edit_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_profile:phone"),
        InlineKeyboardButton("üìß Email", callback_data="edit_profile:email")
    )
    keyboard.add(
        InlineKeyboardButton("üìç –†–µ–≥–∏–æ–Ω", callback_data="edit_profile:region"),
        InlineKeyboardButton("üè¢ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="edit_profile:company_details")
    )
    keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")
    )
    return keyboard

def search_criteria_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üåæ –ü–æ –∫—É–ª—å—Ç—É—Ä–µ", callback_data="search_by:culture"),
        InlineKeyboardButton("üìç –ü–æ —Ä–µ–≥–∏–æ–Ω—É", callback_data="search_by:region")
    )
    keyboard.add(
        InlineKeyboardButton("üì¶ –ü–æ –æ–±—ä—ë–º—É", callback_data="search_by:volume"),
        InlineKeyboardButton("üí∞ –ü–æ —Ü–µ–Ω–µ", callback_data="search_by:price")
    )
    keyboard.add(
        InlineKeyboardButton("‚≠ê –ü–æ –∫–∞—á–µ—Å—Ç–≤—É", callback_data="search_by:quality"),
        InlineKeyboardButton("üè≠ –ü–æ —Ç–∏–ø—É —Ö—Ä–∞–Ω–µ–Ω–∏—è", callback_data="search_by:storage")
    )
    keyboard.add(
        InlineKeyboardButton("üîç –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="search_by:all"),
        InlineKeyboardButton("üåæ –¢–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ", callback_data="search_by:available")
    )
    keyboard.add(
        InlineKeyboardButton("üìç –¢–æ–ø —Ä–µ–≥–∏–æ–Ω—ã", callback_data="search_by:topregions")
    )
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")  # ‚Üê –≠–¢–ê –°–¢–†–û–ö–ê
    )
    return keyboard

@dp.callback_query_handler(lambda c: c.data == 'back_to_main_menu', state='*')
async def back_to_main_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    if user_id not in users:
        await callback.message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
        )
        await callback.answer()
        return
    
    user = users[user_id]
    role = user.get('role', 'unknown')
    name = user.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    
    # –£–¥–∞–ª—è–µ–º inline —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ReplyKeyboard –¥–ª—è —Ä–æ–ª–∏
    if role == 'farmer':
        keyboard = farmer_keyboard()
        welcome_text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!\n\nüåæ <b>–ú–µ–Ω—é —Ñ–µ—Ä–º–µ—Ä–∞</b>"
    elif role == 'exporter':
        keyboard = exporter_keyboard()
        welcome_text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!\n\nüì¶ <b>–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞</b>"
    elif role == 'logistic':
        keyboard = logistic_keyboard()
        welcome_text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!\n\nüöö <b>–ú–µ–Ω—é –ª–æ–≥–∏—Å—Ç–∞</b>"
    elif role == 'expeditor':
        keyboard = expeditor_keyboard()
        welcome_text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!\n\nüè≠ <b>–ú–µ–Ω—é —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞</b>"
    else:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(KeyboardButton("üìã –ú–µ–Ω—é"))
        welcome_text = f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!"
    
    await callback.message.answer(
        welcome_text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await callback.answer()


def deal_actions_keyboard(deal_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–¥–µ–ª–∫–æ–π"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–∞—Ä—Ç–Ω—ë—Ä–∞", callback_data=f"contact_partner:{deal_id}"),
        InlineKeyboardButton("üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞", callback_data=f"logistics:{deal_id}")
    )
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"complete_deal:{deal_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"cancel_deal:{deal_id}")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Å–¥–µ–ª–æ–∫", callback_data="back_to_deals")
    )
    return keyboard

async def notify_logistic_pull_closed(pull_id):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ª–æ–≥–∏—Å—Ç–æ–≤ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–ª–∞"""
    pull = pulls.get(pull_id)
    if not pull:
        return
    
    # –ù–∞–π—Ç–∏ –≤—Å–µ—Ö –ª–æ–≥–∏—Å—Ç–æ–≤, –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏—Ö—Å—è –Ω–∞ —ç—Ç–æ—Ç –ø—É–ª–ª
    related_logistics = []
    for req_id, req in shipping_requests.items():
        if req.get('pull_id') == pull_id:
            logist_id = req.get('logist_id')
            if logist_id:
                related_logistics.append(logist_id)
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞–º
    for logist_id in set(related_logistics):
        try:
            await bot.send_message(
                logist_id,
                f"üîí <b>–ü—É–ª–ª #{pull_id} –∑–∞–∫—Ä—ã—Ç</b>\n\n"
                f"üåæ {pull.get('culture', 'N/A')}\n"
                f"üì¶ {pull.get('target_volume', 0)} —Ç\n"
                f"üìç {pull.get('port', 'N/A')}\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!",
                parse_mode='HTML'
            )
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç—É {logist_id} –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–ª–∞ {pull_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞ {logist_id}: {e}")


def format_news_message():
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
    if not news_cache or not news_cache.get('data'):
        return (
            "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞</b>\n\n"
            "‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        )
    
    news_list = news_cache['data']
    updated_time = news_cache['updated'].strftime("%d.%m.%Y %H:%M") if news_cache.get('updated') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    if not news_list:
        return (
            "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞</b>\n\n"
            "ü§∑‚Äç‚ôÇÔ∏è –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    message = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞</b>\n\n"
    
    for i, news_item in enumerate(news_list[:5], 1):   
        title = news_item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        link = news_item.get('link', '')
        date = news_item.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        if link:
            message += f"{i}. <a href='{link}'>{title}</a>\n"
        else:
            message += f"{i}. {title}\n"
        
        message += f"   üìÖ <i>{date}</i>\n\n"
    
    message += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_time}"
    
    return message

def format_prices_message():
    """‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–µ–Ω–∞–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    if not prices_cache or not prices_cache.get('data'):
        return (
            "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ</b>\n\n"
            "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        )
    
    updated_time = prices_cache['updated'].strftime("%d.%m.%Y %H:%M") if prices_cache.get('updated') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    data = prices_cache['data']
    russia = data.get('russia_south', {})
    fob = data.get('fob', 0)
    cbot = data.get('cbot', {})
    
    message = "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ</b>\n\n"
    
    if russia:
        message += "üá∑üá∫ <b>–Æ–≥ –†–æ—Å—Å–∏–∏ (—Ä—É–±/—Ç)</b>\n"
        for culture, price in russia.items():
            if isinstance(price, (int, float)):
                message += f"  ‚Ä¢ {culture}: <code>{price:,.0f} ‚ÇΩ/—Ç</code>\n"
            else:
                message += f"  ‚Ä¢ {culture}: <code>{price}</code>\n"
    
    message += "\nüö¢ <b>FOB –ß–µ—Ä–Ω–æ–µ –º–æ—Ä–µ</b>\n"
    if isinstance(fob, (int, float)):
        message += f"  ‚Ä¢ –ü—à–µ–Ω–∏—Ü–∞: <code>${fob:.2f}/—Ç</code>\n"
    else:
        message += f"  ‚Ä¢ –ü—à–µ–Ω–∏—Ü–∞: <code>{fob}</code>\n"
    
    if cbot:
        message += "\nüåé <b>CBOT</b>\n"
        for culture, price in cbot.items():
            if price:
                message += f"  ‚Ä¢ {culture}: <code>{price}</code>\n"
    
    message += f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_time}"
    
    return message

def format_farmer_card(farmer_id, batch_id=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–µ—Ä–º–µ—Ä–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    
    if farmer_id not in users:
        return "‚ùå –§–µ—Ä–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    farmer = users[farmer_id]
    
    msg = f"üë§ <b>–§–µ—Ä–º–µ—Ä: {farmer.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</b>\n\n"
    
    msg += "<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
    msg += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{farmer.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
    msg += f"üìß Email: <code>{farmer.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
    msg += f"üìç –†–µ–≥–∏–æ–Ω: {farmer.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    if farmer.get('inn'):
        msg += "<b>üè¢ –†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n"
        msg += f"–ò–ù–ù: <code>{farmer.get('inn')}</code>\n"
        if farmer.get('company_details'):
            details = farmer['company_details'][:200]
            msg += f"{details}...\n" if len(farmer['company_details']) > 200 else f"{details}\n"
        msg += "\n"
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–æ–ª—è–º –ø–∞—Ä—Ç–∏–∏
    if batch_id and farmer_id in batches:
        for batch in batches[farmer_id]:
            if batch['id'] == batch_id:
                msg += f"<b>üì¶ –ü–∞—Ä—Ç–∏—è #{batch_id}:</b>\n"
                msg += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {batch.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                msg += f"üì¶ –û–±—ä—ë–º: {batch.get('volume', 0)} —Ç\n"
                msg += f"üí∞ –¶–µ–Ω–∞: {batch.get('price', 0):,.0f} ‚ÇΩ/—Ç\n"
                
                # ‚úÖ –ö–ê–ß–ï–°–¢–í–û - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'moisture' in batch or 'nature' in batch:
                    msg += "\n<b>üî¨ –ö–∞—á–µ—Å—Ç–≤–æ:</b>\n"
                    if 'nature' in batch:
                        msg += f"   üåæ –ù–∞—Ç—É—Ä–∞: {batch.get('nature', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –≥/–ª\n"
                    if 'moisture' in batch:
                        msg += f"   üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {batch['moisture']}%\n"
                    if 'impurity' in batch:
                        msg += f"   üåø –°–æ—Ä–Ω–æ—Å—Ç—å: {batch.get('impurity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}%\n"
                
                # ‚úÖ –°–¢–ê–¢–£–°
                msg += f"\nüìä –°—Ç–∞—Ç—É—Å: {batch.get('status', '–ê–∫—Ç–∏–≤–Ω–∞')}\n"
                break
    
    # ‚úÖ –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    if farmer_id in batches:
        total_batches = len(batches[farmer_id])
        active_batches = len([b for b in batches[farmer_id] if b.get('status') == '–ê–∫—Ç–∏–≤–Ω–∞'])
        
        msg += "\n<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        msg += f"–í—Å–µ–≥–æ –ø–∞—Ä—Ç–∏–π: {total_batches}\n"
        msg += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_batches}\n"
    
    return msg


def get_role_keyboard(role):
    role = str(role).lower()
    if role in ['farmer', '—Ñ–µ—Ä–º–µ—Ä']:
        return farmer_keyboard()
    elif role in ['exporter', '—ç–∫—Å–ø–æ—Ä—Ç—ë—Ä']:
        return exporter_keyboard()
    elif role in ['logistic', '–ª–æ–≥–∏—Å—Ç']:
        return logistic_keyboard()
    elif role in ['expeditor', '—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä', 'broker', '–±—Ä–æ–∫–µ—Ä']:
        return expeditor_keyboard()
    else:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
        return keyboard

def determine_quality_class(humidity, impurity):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–µ—Ä–Ω–∞"""
    if humidity <= 14 and impurity <= 1:
        return "1 –∫–ª–∞—Å—Å"
    elif humidity <= 14.5 and impurity <= 2:
        return "2 –∫–ª–∞—Å—Å"
    elif humidity <= 15 and impurity <= 3:
        return "3 –∫–ª–∞—Å—Å"
    elif humidity <= 16 and impurity <= 5:
        return "4 –∫–ª–∞—Å—Å"
    else:
        return "5 –∫–ª–∞—Å—Å"

def validate_date(date_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã –î–î.–ú–ú.–ì–ì–ì–ì"""
    try:
        datetime.strptime(date_str, '%d.%m.%Y')
        return True
    except Exception as e:
        return False


async def find_matching_exporters(batch):
    """–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Ç–∏–∏ —Ñ–µ—Ä–º–µ—Ä–∞"""
    matching_pulls = []

    try:
        batch_culture = batch.get('culture', '').strip()
        batch_volume = batch.get('volume', 0)

        if not batch_culture or batch_volume <= 0:
            logging.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏: culture={batch_culture}, volume={batch_volume}")
            return []

        for pull_id, pull in pulls.items():
            pull_culture = pull.get('culture', '').strip()
            pull_status = pull.get('status', '')
            pull_current_volume = pull.get('current_volume', 0)
            pull_target_volume = pull.get('target_volume', 0)

            if (pull_culture.lower() == batch_culture.lower() and 
                pull_status != 'completed' and 
                pull_current_volume < pull_target_volume):

                free_space = pull_target_volume - pull_current_volume

                if free_space > 0:
                    exporter_id = pull.get('exporter_id')
                    exporter = users.get(exporter_id, {})

                    matching_pulls.append({
                        'pull_id': pull_id,
                        'pull': pull,
                        'exporter': exporter,
                        'exporter_id': exporter_id,
                        'exporter_name': exporter.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'exporter_company': exporter.get('company', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                        'exporter_phone': exporter.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                        'culture': pull_culture,
                        'price': pull.get('price', 0),
                        'port': pull.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                        'free_space': free_space,
                        'current_volume': pull_current_volume,
                        'target_volume': pull_target_volume
                    })

        if matching_pulls:
            logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matching_pulls)} –ø—É–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Ç–∏–∏ {batch.get('id')}")
        else:
            logging.info(f"‚ùå –ü—É–ª–æ–≤ –¥–ª—è {batch_culture} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        return matching_pulls

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ find_matching_exporters: {e}")
        return []


async def find_matching_batches(pull_data):
    """–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–∏–π –¥–ª—è –ø—É–ª–∞"""
    global batches
    matching_batches = []  # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û: —Å–ø–∏—Å–æ–∫ –≤–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞—Ä—è
    
    for user_id, user_batches in batches.items():
        for batch in user_batches:
            if (batch['culture'] == pull_data['culture'] and
                batch['status'] == '–ê–∫—Ç–∏–≤–Ω–∞' and
                batch['price'] <= pull_data['price'] * 75 and  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
                batch.get('humidity', 999) <= pull_data.get('moisture', 0) and
                batch.get('impurity', 999) <= pull_data.get('impurity', 0)):
                
                matching_batches.append(batch)
    
    return matching_batches


async def create_match_notification(batch_id, pull_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏"""
    global match_counter
    match_counter += 1
    
    match_data = {
        'id': match_counter,
        'batch_id': batch_id,
        'pull_id': pull_id,
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'status': 'active'
    }
    
    matches[match_counter] = match_data
    return match_counter

async def notify_match(farmer_id, batch, matching_pulls, extra=None, *args, **kwargs):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º–µ—Ä—É –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö"""
    try:
        if not matching_pulls:
            return

        batch_id = batch.get('id', '?')
        batch_culture = batch.get('culture', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        batch_volume = batch.get('volume', 0)

        text = "üéØ <b>–ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—É–ª—ã!</b>\n\n"
        text += f"üì¶ –í–∞—à–∞ –ø–∞—Ä—Ç–∏—è: {batch_culture} - {batch_volume} —Ç\n"
        text += f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—É–ª–æ–≤: {len(matching_pulls)}\n\n"

        kb = InlineKeyboardMarkup(row_width=1)
        
        for idx, match in enumerate(matching_pulls[:5], 1):
            pull_id = match.get('pull_id')
            unique_id = int(time.time() * 1000) + idx
            kb.add(InlineKeyboardButton(
                f"üîó –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ü—É–ª—É #{pull_id}",
                callback_data=f"join_pull:{pull_id}:{unique_id}"
            ))
            text += f"<b>{idx}. –ü—É–ª #{pull_id}</b>\n"
            text += f"üè¢ {match.get('exporter_company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"üë§ {match.get('exporter_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"üí∞ {match.get('price', 0):,.0f} ‚ÇΩ/—Ç\n"
            text += f"üè¢ –ü–æ—Ä—Ç: {match.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"üìä {match.get('current_volume', 0)}/{match.get('target_volume', 0)} —Ç\n"
            text += "\n"

        logging.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º–µ—Ä—É {farmer_id}...")
        logging.info(f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤): {text[:200]}...")
        logging.info(f"üîò –ö–Ω–æ–ø–æ–∫: {len(kb.inline_keyboard)}")
        await bot.send_message(farmer_id, text, parse_mode='HTML', reply_markup=kb)
        logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º–µ—Ä—É {farmer_id} –£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–µ—Ä–º–µ—Ä—É {farmer_id}: {e}")

async def auto_match_batches_and_pulls():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏ –∏ –ø—É–ª–∞–º–∏"""
    try:
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...")
        
        matches_found = 0
        
        for pull_id, pull in pulls.items():
            if pull['status'] != '–û—Ç–∫—Ä—ã—Ç':
                continue
                
            matching_batches = await find_matching_batches(pull)
            
            for batch in matching_batches:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ñ–µ—Ä–º–µ—Ä = –≤–ª–∞–¥–µ–ª—å—Ü—É –ø—É–ª–∞
                if batch.get("farmer_id") == pull.get("exporter_id"):
                    continue
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                existing_match = None
                for match in matches.values():
                    if (match['batch_id'] == batch['id'] and 
                        match['pull_id'] == pull_id and 
                        match['status'] == 'active'):
                        existing_match = match
                        break
                
                # –ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–æ–≤–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if not existing_match:
                    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π match-–æ–±—ä–µ–∫—Ç
                    match_obj = {
                        'pull_id': pull_id,
                        'exporter_company': pull.get('company', ''),
                        'exporter_name': pull.get('contact', ''),
                        'price': pull.get('price', 0),
                        'port': pull.get('port', ''),
                        'current_volume': pull.get('current_volume', 0),
                        'target_volume': pull.get('target_volume', 0)
                    }
                    
                    await notify_match(
                        batch["farmer_id"], 
                        batch, 
                        [match_obj]
                    )
                    
                    # ‚úÖ –°–û–ó–î–ê–ï–ú –ó–ê–ü–ò–°–¨ –û –°–û–í–ü–ê–î–ï–ù–ò–ò
                    match_id = len(matches) + 1
                    matches[match_id] = {
                        'id': match_id,
                        'batch_id': batch['id'],
                        'pull_id': pull_id,
                        'status': 'active',
                        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    }
                    
                    matches_found += 1
                    await asyncio.sleep(0.1)  
        
        logging.info(f"‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches_found}")
        return matches_found
    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞: {e}")
        return 0


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /start
# ============================================================================

@dp.message_handler(commands=['start'], state="*")
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await state.finish()
    user_id = message.from_user.id
    
    logging.info(f"üöÄ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if user_id in users:
        user = users[user_id]
        role = user.get('role', 'unknown')
        name = user.get('name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {role}")

        welcome_text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        if role == 'farmer':
            keyboard = farmer_keyboard()
        elif role == 'exporter':
            keyboard = exporter_keyboard()
        elif role == 'logistic':
            keyboard = logistic_keyboard()
        elif role == 'expeditor':
            keyboard = expeditor_keyboard()
        elif role == 'admin':
            keyboard = admin_keyboard()
        else:
            keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(KeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"))

        await message.answer(welcome_text, reply_markup=keyboard, parse_mode='HTML')

    else:
        # ‚úÖ –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨
        logging.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        
        welcome_text = """
üåæ <b>EXPORTUM</b>

–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–µ—Ä–Ω–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞ –¥–ª—è:

‚Ä¢ üë®‚Äçüåæ –§–µ—Ä–º–µ—Ä–æ–≤ ‚Äî –ø—Ä–æ–¥–∞–∂–∞ –ø–∞—Ä—Ç–∏–π –∑–µ—Ä–Ω–∞
‚Ä¢ üì¶ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤ ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–ª–æ–≤ –∏ –∑–∞–∫—É–ø–∫–∞
‚Ä¢ üöõ –õ–æ–≥–∏—Å—Ç–æ–≤ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —É—Å–ª—É–≥
‚Ä¢ üìã –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤ ‚Äî —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üì¢ –ö–∞–Ω–∞–ª: @EXPORTUM
üí¨ –ß–∞—Ç: @exportum_chat
ü§ñ –ë–æ—Ç: @exportumbot

üìä –ö–æ—Ç–∏—Ä–æ–≤–∫–∏ –∏ –Ω–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!
        """
        
        await message.answer(welcome_text, parse_mode='HTML')
        
        await message.answer(
            "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
            "–®–∞–≥ 1 –∏–∑ 3\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            parse_mode='HTML',
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        await RegistrationStatesGroup.name.set()


# ============================================================================
# ADMIN CALLBACK HANDLERS - –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢ (–ü–ï–†–ï–î –í–°–ï–ú–ò –û–°–¢–ê–õ–¨–ù–´–ú–ò!)
# ============================================================================

def format_admin_statistics():
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    total_users = len(users)
    farmers = sum(1 for u in users.values() if u.get('role') == 'farmer')
    exporters = sum(1 for u in users.values() if u.get('role') == 'exporter')
    logists = sum(1 for u in users.values() if u.get('role') == 'logistic')
    expeditors = sum(1 for u in users.values() if u.get('role') == 'expeditor')

    total_pulls = len(pulls)
    active_pulls = sum(1 for p in pulls.values() if p.get('status') == 'active')

    total_batches = sum(len(b) for b in batches.values())

    total_requests = len(shipping_requests)
    active_requests = sum(1 for r in shipping_requests.values() if r.get('status') == 'active')

    msg = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
    msg += "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
    msg += f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
    msg += f"‚Ä¢ –§–µ—Ä–º–µ—Ä—ã: {farmers}\n"
    msg += f"‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä—ã: {exporters}\n"
    msg += f"‚Ä¢ –õ–æ–≥–∏—Å—Ç—ã: {logists}\n"
    msg += f"‚Ä¢ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—ã: {expeditors}\n\n"

    msg += "üíº <b>–ü—É–ª—ã:</b>\n"
    msg += f"‚Ä¢ –í—Å–µ–≥–æ: {total_pulls}\n"
    msg += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_pulls}\n\n"

    msg += "üåæ <b>–ü–∞—Ä—Ç–∏–∏:</b>\n"
    msg += f"‚Ä¢ –í—Å–µ–≥–æ: {total_batches}\n\n"

    msg += "üöö <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É:</b>\n"
    msg += f"‚Ä¢ –í—Å–µ–≥–æ: {total_requests}\n"
    msg += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_requests}"

    return msg


def format_admin_analytics():
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    regions = {}
    for user in users.values():
        region = user.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')
        regions[region] = regions.get(region, 0) + 1

    top_regions = sorted(regions.items(), key=lambda x: x[1], reverse=True)[:5]

    cultures = {}
    for user_batches in batches.values():
        for batch in user_batches:
            culture = batch.get('culture', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            cultures[culture] = cultures.get(culture, 0) + 1

    top_cultures = sorted(cultures.items(), key=lambda x: x[1], reverse=True)[:5]

    pull_statuses = {}
    for pull in pulls.values():
        status = pull.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        pull_statuses[status] = pull_statuses.get(status, 0) + 1

    msg = "üìà <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"

    msg += "üó∫ <b>–¢–æ–ø-5 —Ä–µ–≥–∏–æ–Ω–æ–≤:</b>\n"
    for i, (region, count) in enumerate(top_regions, 1):
        msg += f"{i}. {region}: {count} –ø–æ–ª—å–∑.\n"

    msg += "\nüåæ <b>–¢–æ–ø-5 –∫—É–ª—å—Ç—É—Ä:</b>\n"
    for i, (culture, count) in enumerate(top_cultures, 1):
        msg += f"{i}. {culture}: {count} –ø–∞—Ä—Ç–∏–π\n"

    msg += "\nüíº <b>–°—Ç–∞—Ç—É—Å—ã –ø—É–ª–æ–≤:</b>\n"
    for status, count in pull_statuses.items():
        status_emoji = "‚úÖ" if status == "active" else "‚è∏"
        msg += f"{status_emoji} {status.capitalize()}: {count}\n"

    return msg


def format_admin_users():
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not users:
        return "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    msg = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"

    roles = {
        'farmer': 'üåæ –§–µ—Ä–º–µ—Ä—ã',
        'exporter': 'üíº –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä—ã',
        'logistic': 'üöö –õ–æ–≥–∏—Å—Ç—ã',
        'expeditor': '‚öì –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—ã'
    }

    for role, title in roles.items():
        role_users = [u for u in users.values() if u.get('role') == role]
        if role_users:
            msg += f"{title}: {len(role_users)}\n"
            for user in role_users[:3]:
                name = user.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                phone = user.get('phone', '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
                msg += f"‚Ä¢ {name} ({phone})\n"
            if len(role_users) > 3:
                msg += f"... –∏ –µ—â—ë {len(role_users) - 3}\n"
            msg += "\n"

    return msg


# Admin callback handlers - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ü–ï–†–í–´–ú–ò!
@dp.callback_query_handler(lambda c: c.data and c.data.startswith('admin'), state='*')
async def admin_callbacks_router(callback: types.CallbackQuery, state: FSMContext):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö admin callback handlers"""

    # –ö–†–ò–¢–ò–ß–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º state –°–†–ê–ó–£!
    current_state = await state.get_state()
    if current_state:
        logging.info(f"‚ö†Ô∏è –°–±—Ä–∞—Å—ã–≤–∞–µ–º state: {current_state}")
        await state.finish()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    data = callback.data
    logging.info(f"üîë Admin callback: {data} from {callback.from_user.id}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π callback
    if data == "adminstat":
        msg = format_admin_statistics()
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="adminstat"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backtoadmin")
        )
        await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    elif data == "adminanalytics":
        msg = format_admin_analytics()
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="adminanalytics"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backtoadmin")
        )
        await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    elif data == "adminexport":
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="exportusers"),
            InlineKeyboardButton("üì¶ –ü—É–ª–ª—ã", callback_data="exportpulls")
        )
        keyboard.add(
            InlineKeyboardButton("üåæ –ü–∞—Ä—Ç–∏–∏", callback_data="exportbatches"),
            InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data="exportrequests")
        )
        keyboard.add(InlineKeyboardButton("üíº –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø", callback_data="exportfull"))
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backtoadmin"))

        await callback.message.edit_text(
            "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await callback.answer()

    elif data == "adminusers":
        msg = format_admin_users()
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="adminusers"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backtoadmin")
        )
        await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer()

    elif data == "adminbroadcast":
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backtoadmin"))

        await callback.message.edit_text(
            "üìß <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await callback.answer()

    elif data == "adminprices":
        await callback.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω...")

        try:
            await update_prices_cache()

            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backtoadmin"))

            await callback.message.edit_text(
                "‚úÖ <b>–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!</b>",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: {e}")
            await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")


@dp.callback_query_handler(lambda c: c.data == "backtoadmin", state='*')
async def back_to_admin_callback(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω –º–µ–Ω—é"""

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º state
    current_state = await state.get_state()
    if current_state:
        logging.info(f"‚ö†Ô∏è –°–±—Ä–∞—Å—ã–≤–∞–µ–º state: {current_state}")
        await state.finish()

    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    logging.info(f"‚óÄÔ∏è Back to admin menu by {callback.from_user.id}")

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="adminstat"),
        InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="adminanalytics")
    )
    keyboard.add(
        InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="adminexport"),
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="adminusers")
    )
    keyboard.add(
        InlineKeyboardButton("üìß –†–∞—Å—Å—ã–ª–∫–∞", callback_data="adminbroadcast"),
        InlineKeyboardButton("üí∞ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã", callback_data="adminprices")
    )

    await callback.message.edit_text(
        "üîê <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å EXPORTUM</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

# ============================================================================
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ó–ê–ö–†–´–¢–ò–ï –ü–£–õ–ê –ò –°–û–ó–î–ê–ù–ò–ï –°–î–ï–õ–ö–ò
# ============================================================================

def check_and_close_pull_if_full(pull_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—É–ª–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ 100%"""
    if pull_id not in pulls:
        return False
    
    pull = pulls[pull_id]
    current = pull.get('current_volume', 0)
    target = pull.get('target_volume', 0)
    
    if current >= target and pull.get('status') == '–û—Ç–∫—Ä—ã—Ç':
        pull['status'] = '–ó–∞–ø–æ–ª–Ω–µ–Ω'
        pull['closed_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        deal_id = create_deal_from_full_pull(pull)
        pull['deal_id'] = deal_id
        
        save_pulls_to_pickle()
        logging.info(f"‚úÖ Pull {pull_id} auto-closed ‚Üí Deal {deal_id}")
        
        asyncio.create_task(notify_all_about_pull_closure(pull, deal_id))
        return True
    
    return False


def create_deal_from_full_pull(pull):
    """–°–æ–∑–¥–∞—ë—Ç —Å–¥–µ–ª–∫—É –∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ø—É–ª–∞"""
    global deal_counter
    
    deal_counter += 1
    
    farmer_ids = []
    batch_details = []
    
    for participant in pull.get('participants', []):
        f_id = participant.get('farmer_id')
        b_id = participant.get('batch_id')
        volume = participant.get('volume', 0)
        
        if f_id not in farmer_ids:
            farmer_ids.append(f_id)
        
        batch_details.append({
            'farmer_id': f_id,
            'batch_id': b_id,
            'volume': volume,
            'farmer_name': users.get(f_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        })
    
    deal = {
        'id': deal_counter,
        'pull_id': pull['id'],
        'type': 'pool_deal',
        'exporter_id': pull['exporter_id'],
        'exporter_name': pull['exporter_name'],
        'farmer_ids': farmer_ids,
        'batches': batch_details,
        'logistic_id': None,
        'expeditor_id': None,
        'culture': pull['culture'],
        'volume': pull['current_volume'],
        'price': pull['price'],
        'total_sum': pull['current_volume'] * pull['price'],
        'port': pull['port'],
        'quality': {
            'moisture': pull.get('moisture', 0),
            'nature': pull.get('nature', 0),
            'impurity': pull.get('impurity', 0),
            'weed': pull.get('weed', 0)
        },
        'documents': pull.get('documents', ''),
        'doc_type': pull.get('doc_type', 'FOB'),
        'status': 'new',
        'payment_status': 'pending',
        'delivery_status': 'pending',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    deals[deal_counter] = deal
    save_deals_to_pickle()
    logging.info(f"‚úÖ Deal {deal_counter} created from pull {pull['id']}")
    
    return deal_counter


async def notify_all_about_pull_closure(pull, deal_id):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤"""
    pull_id = pull['id']
    exporter_id = pull['exporter_id']
    port = pull.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω')

    # 1. –ü–æ–¥–±–æ—Ä –ª–æ–≥–∏—Å—Ç–æ–≤ –∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤ –ø–æ –ø–æ—Ä—Ç—É
    logistics = get_logistics_by_port(port)
    expeditors = get_expeditors_by_port(port)

    # 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É
    exporter_text = f"""üéâ <b>–ü–£–õ #{pull_id} –°–û–ë–†–ê–ù!</b>

üì¶ –ö—É–ª—å—Ç—É—Ä–∞: {pull.get('culture')}
üéØ –û–±—ä—ë–º: {pull.get('current_volume')} / {pull.get('target_volume')} —Ç
üè¢ –ü–æ—Ä—Ç: {port}
üí∞ –¶–µ–Ω–∞: {pull.get('price', 0):,.0f} ‚ÇΩ/—Ç

‚úÖ –°–¥–µ–ª–∫–∞ #{deal_id} —Å–æ–∑–¥–∞–Ω–∞
"""

    try:
        await bot.send_message(exporter_id, exporter_text, parse_mode='HTML')

        # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–≥–∏—Å—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if logistics:
            logistics_text = f"\nüöö <b>–î–û–°–¢–£–ü–ù–´–ï –õ–û–ì–ò–°–¢–´ ({len(logistics)}):</b>\n\n"
            logistics_text += format_logistics_cards(logistics)

            logistics_keyboard = InlineKeyboardMarkup(row_width=1)
            for log in logistics[:5]:
                company = log.get('company', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:30]
                user_id = log.get('user_id')
                logistics_keyboard.add(
                    InlineKeyboardButton(
                        f"üöö {company}",
                        callback_data=f"select_logistic_{user_id}_{deal_id}"
                    )
                )

            await bot.send_message(
                exporter_id,
                logistics_text,
                reply_markup=logistics_keyboard,
                parse_mode='HTML'
            )

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if expeditors:
            expeditors_text = f"\nüìú <b>–î–û–°–¢–£–ü–ù–´–ï –≠–ö–°–ü–ï–î–ò–¢–û–†–´ ({len(expeditors)}):</b>\n\n"
            expeditors_text += format_expeditors_cards(expeditors)

            expeditors_keyboard = InlineKeyboardMarkup(row_width=1)
            for exp in expeditors[:5]:
                company = exp.get('company', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:30]
                user_id = exp.get('user_id')
                expeditors_keyboard.add(
                    InlineKeyboardButton(
                        f"üìú {company}",
                        callback_data=f"select_expeditor_{user_id}_{deal_id}"
                    )
                )

            await bot.send_message(
                exporter_id,
                expeditors_text,
                reply_markup=expeditors_keyboard,
                parse_mode='HTML'
            )
    except Exception as e:
        logging.error(f"Error sending to exporter {exporter_id}: {e}")

    # 5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (—Ñ–µ—Ä–º–µ—Ä–∞–º)
    participants = pull_participants.get(pull_id, [])
    for participant in participants:
        farmer_id = participant.get('farmer_id')
        volume = participant.get('volume', 0)

        try:
            await bot.send_message(
                farmer_id,
                f"""‚úÖ <b>–ü–£–õ #{pull_id} –°–û–ë–†–ê–ù!</b>

üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull.get('culture')}
üì¶ –í–∞—à –æ–±—ä—ë–º: {volume} —Ç
üí∞ –¶–µ–Ω–∞: {pull.get('price', 0):,.0f} ‚ÇΩ/—Ç
üè¢ –ü–æ—Ä—Ç: {port}

–û–∂–∏–¥–∞–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ—Ç –ª–æ–≥–∏—Å—Ç–∞.""",
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"Error sending to farmer {farmer_id}: {e}")

    # 6. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞–º
    for logistic in logistics:
        try:
            await bot.send_message(
                logistic.get('user_id'),
                f"""üöö <b>–ù–û–í–´–ô –ü–£–õ –î–û–°–¢–£–ü–ï–ù!</b>

üì¶ –ü—É–ª #{pull_id}
üåæ {pull.get('culture')}
üéØ –û–±—ä—ë–º: {pull.get('current_volume')} —Ç
üè¢ –ü–æ—Ä—Ç: {port}

–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É.""",
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            pass

    # 7. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞–º
    for expeditor in expeditors:
        try:
            await bot.send_message(
                expeditor.get('user_id'),
                f"""üìú <b>–ù–û–í–´–ô –ü–£–õ –î–û–°–¢–£–ü–ï–ù!</b>

üì¶ –ü—É–ª #{pull_id}
üåæ {pull.get('culture')}
üéØ –û–±—ä—ë–º: {pull.get('current_volume')} —Ç
üè¢ –ü–æ—Ä—Ç: {port}

–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É.""",
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            pass

    logging.info(f"‚úÖ Enhanced notifications sent for pull {pull_id}, deal {deal_id}")


async def export_callbacks_router(callback: types.CallbackQuery, state: FSMContext):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö export callback handlers"""

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º state
    current_state = await state.get_state()
    if current_state:
        logging.info(f"‚ö†Ô∏è –°–±—Ä–∞—Å—ã–≤–∞–µ–º state: {current_state}")
        await state.finish()

    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    data = callback.data
    logging.info(f"üì§ Export callback: {data} from {callback.from_user.id}")

    await callback.answer("‚è≥ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")

    try:
        import pandas as pd
        from datetime import datetime
        import os

        if data == "exportusers":
            users_data = []
            for uid, user in users.items():
                users_data.append({
                    'ID': uid,
                    '–ò–º—è': user.get('name', ''),
                    '–†–æ–ª—å': user.get('role', ''),
                    '–¢–µ–ª–µ—Ñ–æ–Ω': user.get('phone', ''),
                    '–†–µ–≥–∏–æ–Ω': user.get('region', ''),
                    '–ò–ù–ù': user.get('inn', ''),
                    '–î–∞—Ç–∞': user.get('registered_at', '')
                })

            df = pd.DataFrame(users_data)
            filename = f'users_export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
            df.to_excel(filename, index=False, engine='openpyxl')

            with open(filename, 'rb') as f:
                await callback.message.answer_document(
                    types.InputFile(f, filename=filename),
                    caption=f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n–í—Å–µ–≥–æ: {len(users_data)}"
                )

            os.remove(filename)

        elif data == "exportpulls":
            pulls_data = []
            for pull_id, pull in pulls.items():
                pulls_data.append({
                    'ID': pull_id,
                    '–ö—É–ª—å—Ç—É—Ä–∞': pull.get('culture', ''),
                    '–û–±—ä—ë–º': pull.get('current_volume', 0),
                    '–¶–µ–Ω–∞': pull.get('price', 0),
                    '–ü–æ—Ä—Ç': pull.get('port', ''),
                    '–°—Ç–∞—Ç—É—Å': pull.get('status', ''),
                    '–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä': pull.get('exporter_name', '')
                })

            df = pd.DataFrame(pulls_data)
            filename = f'pulls_export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
            df.to_excel(filename, index=False, engine='openpyxl')

            with open(filename, 'rb') as f:
                await callback.message.answer_document(
                    types.InputFile(f, filename=filename),
                    caption=f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø—É–ª–ª–æ–≤\n\n–í—Å–µ–≥–æ: {len(pulls_data)}"
                )

            os.remove(filename)

        elif data == "exportbatches":
            batches_data = []
            for farmer_id, batches in batches.items():
                farmer_name = users.get(farmer_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                for batch in user_batches:
                    batches_data.append({
                        'ID': batch.get('id', ''),
                        '–§–µ—Ä–º–µ—Ä': farmer_name,
                        '–ö—É–ª—å—Ç—É—Ä–∞': batch.get('culture', ''),
                        '–û–±—ä—ë–º': batch.get('volume', 0),
                        '–¶–µ–Ω–∞': batch.get('price', 0),
                        '–†–µ–≥–∏–æ–Ω': batch.get('region', ''),
                        '–°—Ç–∞—Ç—É—Å': batch.get('status', '')
                    })

            df = pd.DataFrame(batches_data)
            filename = f'batches_export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
            df.to_excel(filename, index=False, engine='openpyxl')

            with open(filename, 'rb') as f:
                await callback.message.answer_document(
                    types.InputFile(f, filename=filename),
                    caption=f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ä—Ç–∏–π\n\n–í—Å–µ–≥–æ: {len(batches_data)}"
                )

            os.remove(filename)

        elif data == "exportrequests":
            requests_data = []
            for req_id, req in shipping_requests.items():
                requests_data.append({
                    'ID': req_id,
                    '–û—Ç': req.get('from_city', ''),
                    '–î–æ': req.get('to_city', ''),
                    '–û–±—ä—ë–º': req.get('volume', 0),
                    '–î–∞—Ç–∞': req.get('loading_date', ''),
                    '–°—Ç–∞—Ç—É—Å': req.get('status', '')
                })

            df = pd.DataFrame(requests_data)
            filename = f'requests_export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.xlsx'
            df.to_excel(filename, index=False, engine='openpyxl')

            with open(filename, 'rb') as f:
                await callback.message.answer_document(
                    types.InputFile(f, filename=filename),
                    caption=f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫\n\n–í—Å–µ–≥–æ: {len(requests_data)}"
                )

            os.remove(filename)

        elif data == "exportfull":
            import zipfile
            import io
            import json

            zip_buffer = io.BytesIO()

            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                zip_file.writestr('users.json', json.dumps(users, ensure_ascii=False, indent=2))
                zip_file.writestr('pulls.json', json.dumps(pulls, ensure_ascii=False, indent=2))
                zip_file.writestr('batches.json', json.dumps(batches, ensure_ascii=False, indent=2))
                zip_file.writestr('deals.json', json.dumps(deals, ensure_ascii=False, indent=2))
                zip_file.writestr('shipping_requests.json', json.dumps(shipping_requests, ensure_ascii=False, indent=2))

                backup_info = {
                    'created_at': datetime.now().isoformat(),
                    'total_users': len(users),
                    'total_pulls': len(pulls),
                    'total_batches': sum(len(b) for b in batches.values())
                }
                zip_file.writestr('backup_info.json', json.dumps(backup_info, ensure_ascii=False, indent=2))

            zip_buffer.seek(0)

            filename = f'exportum_backup_{datetime.now().strftime("%Y%m%d_%H%M%S")}.zip'
            await callback.message.answer_document(
                types.InputFile(zip_buffer, filename=filename),
                caption=f"üíº –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø\n\n"
                        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                        f"üì¶ –ü—É–ª–ª–æ–≤: {len(pulls)}\n"
                        f"üåæ –ü–∞—Ä—Ç–∏–π: {sum(len(b) for b in batches.values())}"
            )

        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="adminexport"))
        await callback.message.edit_reply_markup(reply_markup=keyboard)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@dp.message_handler(lambda m: m.text == "üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", state="*")
async def registration_entry(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await state.finish()
    
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 7\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        parse_mode='HTML',
        reply_markup=ReplyKeyboardRemove()
    )
    await RegistrationStatesGroup.name.set()

@dp.callback_query_handler(lambda c: c.data == "start_registration", state='*')
async def start_registration(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await callback.message.edit_text(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 7\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        parse_mode='HTML'
    )
    await RegistrationStatesGroup.name.set()
    await callback.answer()


@dp.message_handler(state=RegistrationStatesGroup.name)
async def registration_name(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        return
    
    await state.update_data(name=name)
    
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 2 –∏–∑ 7\n\n"
        "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: +79991234567",
        parse_mode='HTML'
    )
    await RegistrationStatesGroup.phone.set()


@dp.message_handler(state=RegistrationStatesGroup.phone)
async def registration_phone(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if len(phone) < 10 or not any(char.isdigit() for char in phone):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    
    await state.update_data(phone=phone)
    
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 3 –∏–∑ 7\n\n"
        "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        parse_mode='HTML'
    )
    await RegistrationStatesGroup.email.set()


@dp.message_handler(state=RegistrationStatesGroup.email)
async def registration_email(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ email –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    email = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    if '@' not in email or '.' not in email.split('@')[-1]:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    
    await state.update_data(email=email)
    
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 4 –∏–∑ 7\n\n"
        "üè¢ –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏\n\n"
        "–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä",
        parse_mode='HTML'
    )
    await RegistrationStatesGroup.inn.set()


@dp.message_handler(state=RegistrationStatesGroup.inn)
async def registration_inn(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ò–ù–ù –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    inn = message.text.strip()
    
    if not validate_inn(inn):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    
    await state.update_data(inn=inn)
    
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 5 –∏–∑ 7\n\n"
        "üìç –í–≤–µ–¥–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª. –ö—Ä–∞—Å–Ω–∞—è, –¥. 1, –æ—Ñ. 10",   
        parse_mode='HTML'
    )
    await RegistrationStatesGroup.company_details.set()  # ‚Üê –ó–ê–ö–†–´–¢–´ –°–ö–û–ë–ö–ò!


@dp.message_handler(state=RegistrationStatesGroup.company_details)
async def registration_company_details(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    company_details = message.text.strip()
    
    if len(company_details) < 10:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å:")
        return
    
    await state.update_data(company_details=company_details)
    
    # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üë®‚Äçüåæ –§–µ—Ä–º–µ—Ä", callback_data="role:farmer"),
        InlineKeyboardButton("üì¶ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä", callback_data="role:exporter")
    )
    keyboard.add(
        InlineKeyboardButton("üöõ –õ–æ–≥–∏—Å—Ç", callback_data="role:logistic"),
        InlineKeyboardButton("üìã –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä", callback_data="role:expeditor")
    )
    
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 6 –∏–∑ 7\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    # ‚úÖ –ü–ï–†–ï–•–û–î –ö –°–û–°–¢–û–Ø–ù–ò–Æ –í–´–ë–û–†–ê –†–û–õ–ò
    await RegistrationStatesGroup.role.set()

@dp.callback_query_handler(lambda c: c.data.startswith('role:'), state=RegistrationStatesGroup.role)
async def registration_role(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    
    role = callback.data.split(':', 1)[1]
    
    logging.info(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å: {role}")
    
    # –ö–†–ò–¢–ò–ß–ù–û: –°–û–•–†–ê–ù–Ø–ï–ú –†–û–õ–¨
    await state.update_data(role=role)
    
    # –ö–†–ò–¢–ò–ß–ù–û: –ü–ï–†–ï–•–û–î –ö –†–ï–ì–ò–û–ù–£
    await callback.message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 7 –∏–∑ 7\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:",
        reply_markup=region_keyboard(),
        parse_mode='HTML'
    )
    
    await RegistrationStatesGroup.region.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('join_pull:'), state='*')
async def join_pull_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—É–ª—É"""
    
    try:
        parsed = parse_join_pull_callback(callback.data)
        pull_id = parsed["pull_id"]
        logging.info(f"üîó join_pull callback: {callback.data}, –∏–∑–≤–ª–µ—á—ë–Ω pull_id: {pull_id}")
    except (IndexError, ValueError) as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback: {callback.data}, –æ—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    if pull_id not in pulls:
        logging.warning(f"‚ùå –ü—É–ª {pull_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ: {list(pulls.keys())}")
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    pull = pulls[pull_id]
    
    # ‚úÖ –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã–π –ø—É–ª
    if pull.get('status') == 'filled':
        await callback.answer(
            "‚ùå –≠—Ç–æ—Ç –ø—É–ª —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100%!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É–ª—ã.",
            show_alert=True
        )
        return
    
    user_id = callback.from_user.id

    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return

    if users[user_id].get('role') != 'farmer':
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –ø—É–ª–∞–º", show_alert=True)
        return

    if user_id not in batches:
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton(
                text="‚úÖ –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å",
                callback_data=f"createbatchforpull:{pull_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel"
            )
        )
        await callback.message.answer(
            f"üåæ –£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä—Ç–∏–π –∫—É–ª—å—Ç—É—Ä—ã <b>{pull['culture']}</b> –¥–ª—è —ç—Ç–æ–≥–æ –ø—É–ª–∞.\n\n"
            f"–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await callback.answer()
        return

    already_joined_batch_ids = []
    if pull_id in pullparticipants:
        already_joined_batch_ids = [
            p['batch_id'] for p in pullparticipants[pull_id] 
            if p['farmer_id'] == user_id
        ]

    # ‚úÖ –î–û–ë–ê–í–¨–¢–ï –≠–¢–ò –°–¢–†–û–ö–ò –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:
    logging.info(f"üìã –ö—É–ª—å—Ç—É—Ä–∞ –ø—É–ª–∞: '{pull['culture']}'")
    logging.info(f"üìã –ü–∞—Ä—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    for b in batches.get(user_id, []):
        logging.info(f"   - ID: {b['id']}, –ö—É–ª—å—Ç—É—Ä–∞: '{b.get('culture')}', –°—Ç–∞—Ç—É—Å: '{b.get('status')}', –£–∂–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∞: {b['id'] in already_joined_batch_ids}")

    active_batches = [
        b for b in batches[user_id]
        if b.get('culture') == pull['culture'] 
        and b.get('status', '').lower() in ['–∞–∫—Ç–∏–≤–Ω–∞', 'active', '–æ—Ç–∫—Ä—ã—Ç–∞']
        and b['id'] not in already_joined_batch_ids
    ]

    logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π: {len(active_batches)}")  # ‚Üê –î–û–ë–ê–í–¨–¢–ï!

    if not active_batches:
        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton(
                text="‚úÖ –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å",
                callback_data=f"createbatchforpull:{pull_id}"
            ),
            InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="cancel"
            )
        )
        await callback.message.answer(
            f"üåæ –£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä—Ç–∏–π –∫—É–ª—å—Ç—É—Ä—ã <b>{pull.get('culture', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</b> –¥–ª—è —ç—Ç–æ–≥–æ –ø—É–ª–∞.\n\n"
            f"–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—Ç–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await callback.answer()
        return

    await state.update_data(join_pull_id=pull_id)

    keyboard = InlineKeyboardMarkup(row_width=1)
    for batch in active_batches:
        button_text = f"{batch['culture']} - {batch['volume']} —Ç - {batch['price']:,.0f} ‚ÇΩ/—Ç"
        keyboard.add(
            InlineKeyboardButton(
                button_text,
                callback_data=f"selectbatchjoin:{batch['id']}"
            )
        )
        logging.info(f"   –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è: {button_text}")

    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"viewpull:{pull_id}")
    )

    await JoinPullStatesGroup.select_batch.set()

    await callback.message.edit_text(
        f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—é –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—É–ª—É #{pull_id}</b>\n\n"
        f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull.get('culture', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üì¶ –¶–µ–ª–µ–≤–æ–π –æ–±—ä—ë–º: {pull['target_volume']} —Ç\n"
        f"üìä –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º: {pull['current_volume']} —Ç\n"
        f"üìâ –î–æ—Å—Ç—É–ø–Ω–æ: {pull['target_volume'] - pull['current_volume']} —Ç\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

# –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –ø—É–ª–ª–∞
@dp.callback_query_handler(lambda c: c.data.startswith('quickbatch:'), state='*')
async def quick_batch_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—É–ª–ª—É"""
    await state.finish()
    
    pull_id = callback.data.split(':')[1]
    pull = pulls.get(pull_id)
    
    if not pull:
        await callback.answer("‚ùå –ü—É–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(pull_id=pull_id)
    await QuickBatchStatesGroup.volume.set()
    
    msg = (
        f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –ø—É–ª–ª–∞\n\n"
        f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull['culture']}\n"
        f"üìç –†–µ–≥–∏–æ–Ω: {pull['region']}\n"
        f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –≤ –ø—É–ª–ª–µ: {pull['volume'] - pull.get('filled', 0):,.0f} —Ç\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≤–∞—à–µ–π –ø–∞—Ä—Ç–∏–∏ (—Ç–æ–Ω–Ω):"
    )
    
    await callback.message.edit_text(msg, parse_mode='HTML')
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä—ë–º–∞
@dp.message_handler(state=QuickBatchStatesGroup.volume)
async def quick_batch_volume(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ –ø–∞—Ä—Ç–∏–∏"""
    try:
        volume = float(message.text.replace(',', '.').replace(' ', ''))
        if volume <= 0:
            await message.answer("‚ùå –û–±—ä—ë–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            return
        
        data = await state.get_data()
        pull = pulls[data['pull_id']]
        available = pull['volume'] - pull.get('filled', 0)
        
        if volume > available:
            await message.answer(
                f"‚ö†Ô∏è –í –ø—É–ª–ª–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {available:,.0f} —Ç\n"
                f"–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –Ω–µ –±–æ–ª—å—à–µ {available:,.0f} —Ç:"
            )
            return
        
        await state.update_data(volume=volume)
        await QuickBatchStatesGroup.price.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (‚ÇΩ/—Ç):")
    
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
@dp.message_handler(state=QuickBatchStatesGroup.price)
async def quick_batch_price(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã"""
    try:
        price = float(message.text.replace(',', '.').replace(' ', ''))
        if price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            return
        
        await state.update_data(price=price)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ –∫–∞—á–µ—Å—Ç–≤–æ
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–î–∞", callback_data="quickquality:yes"),
            InlineKeyboardButton("–ù–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="quickquality:no")
        )
        
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ (–≤–ª–∞–∂–Ω–æ—Å—Ç—å, –Ω–∞—Ç—É—Ä–∞, –ø—Ä–∏–º–µ—Å–∏)?",
            reply_markup=keyboard
        )
    
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

# –í—ã–±–æ—Ä - —É–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∏–ª–∏ –Ω–µ—Ç
@dp.callback_query_handler(lambda c: c.data.startswith('quickquality:'), state=QuickBatchStatesGroup.price)
async def quick_batch_quality_choice(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä - —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞"""
    choice = callback.data.split(':')[1]
    
    if choice == 'yes':
        await QuickBatchStatesGroup.quality.set()
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Ç—É—Ä—É (–≥/–ª):")
    else:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞, —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º
        await finish_quick_batch(callback.message, state, callback.from_user.id)
        await state.finish()
    
    await callback.answer()

# –ö–∞—á–µ—Å—Ç–≤–æ: –Ω–∞—Ç—É—Ä–∞
@dp.message_handler(state=QuickBatchStatesGroup.quality)
async def quick_batch_quality(message: types.Message, state: FSMContext):
    """–ù–∞—Ç—É—Ä–∞"""
    try:
        nature = float(message.text.replace(',', '.'))
        await state.update_data(nature=nature)
        await QuickBatchStatesGroup.moisture.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å (%):")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

# –í–ª–∞–∂–Ω–æ—Å—Ç—å
@dp.message_handler(state=QuickBatchStatesGroup.moisture)
async def quick_batch_moisture(message: types.Message, state: FSMContext):
    """–í–ª–∞–∂–Ω–æ—Å—Ç—å"""
    try:
        moisture = float(message.text.replace(',', '.'))
        await state.update_data(moisture=moisture)
        await QuickBatchStatesGroup.impurity.set()
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ—Ä–Ω–æ—Å—Ç—å (%):")
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

# –°–æ—Ä–Ω–æ—Å—Ç—å
@dp.message_handler(state=QuickBatchStatesGroup.impurity)
async def quick_batch_impurity(message: types.Message, state: FSMContext):
    """–°–æ—Ä–Ω–æ—Å—Ç—å"""
    try:
        impurity = float(message.text.replace(',', '.'))
        await state.update_data(impurity=impurity)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏
        await finish_quick_batch(message, state, message.from_user.id)
        await state.finish()
    
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ–π –ø–∞—Ä—Ç–∏–∏
async def finish_quick_batch(message_or_callback, state: FSMContext, user_id: int):
    """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–∏—é –∏ –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø—É–ª–ª"""
    data = await state.get_data()
    pull_id = data['pull_id']
    pull = pulls[pull_id]
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Ç–∏—é
    batch_id = generate_id()
    batch = {
        'id': batch_id,
        'farmer_id': user_id,
        'culture': pull['culture'],
        'volume': data['volume'],
        'price': data['price'],
        'region': pull['region'],
        'status': 'active',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'nature' in data:
        batch['nature'] = data.get('nature')
        batch['moisture'] = data.get('moisture')
        batch['impurity'] = data.get('impurity')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—Ç–∏—é
    if user_id not in batches:
        batches[user_id] = []
    batches[user_id].append(batch)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—É–ª–ª
    if 'batches' not in pull:
        pull['batches'] = []
    pull['batches'].append(batch_id)
    pull['filled'] = pull.get('filled', 0) + data['volume']
    
    # –°–æ–∑–¥–∞—ë–º —Å–¥–µ–ª–∫—É
    deal_id = generate_id()
    deal = {
        'id': deal_id,
        'pull_id': pull_id,
        'batch_id': batch_id,
        'farmer_id': user_id,
        'exporter_id': pull['exporter_id'],
        'status': 'matched',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    deals[deal_id] = deal
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    save_batches_to_pickle()
    save_pulls_to_pickle()
    save_deals_to_pickle()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    farmer = users[user_id]
    exporter = users[pull['exporter_id']]
    
    await bot.send_message(
        user_id,
        f"‚úÖ –ü–∞—Ä—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—É–ª–ª!\n\n"
        f"üåæ {batch['culture']} ‚Ä¢ {batch['volume']:,.0f} —Ç ‚Ä¢ {batch['price']:,.0f} ‚ÇΩ/—Ç\n"
        f"üìä –ü—É–ª–ª –∑–∞–ø–æ–ª–Ω–µ–Ω: {pull['filled']:,.0f}/{pull['volume']:,.0f} —Ç"
    )
    
    await bot.send_message(
        pull['exporter_id'],
        f"üì¶ –ù–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ø—É–ª–ª!\n\n"
        f"üë§ –§–µ—Ä–º–µ—Ä: {farmer.get('name')}\n"
        f"üåæ {batch['culture']} ‚Ä¢ {batch['volume']:,.0f} —Ç ‚Ä¢ {batch['price']:,.0f} ‚ÇΩ/—Ç\n"
        f"üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {pull['filled']:,.0f}/{pull['volume']:,.0f} —Ç"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–ª–ª–∞
    if pull['filled'] >= pull['volume']:
        pull['status'] = 'filled'
        await notify_pull_filled(pull_id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—É–ª–ª—É
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìä –ö –ø—É–ª–ª—É", callback_data=f"viewpull:{pull_id}"))
    
    if isinstance(message_or_callback, types.Message):
        await message_or_callback.answer(
            "‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—É–ª–ª",
            reply_markup=keyboard
        )
    else:
        await message_or_callback.edit_text(
            "‚úÖ –ì–æ—Ç–æ–≤–æ! –ü–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—É–ª–ª",
            reply_markup=keyboard
        )
@dp.callback_query_handler(lambda c: c.data.startswith('createbatchforpull:'), state='*')
async def create_batch_for_pull_callback(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—É–ª—É"""
    try:
        pull_id = parse_callback_id(callback.data)
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—É–ª–∞ –∏ –∫—É–ª—å—Ç—É—Ä—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await state.update_data(
        create_batch_for_pull_id=pull_id, 
        culture=pull['culture']
    )
    
    await callback.message.answer(
        f"**üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –ø—É–ª–∞ #{pull_id}**\n\n"
        f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: **{pull['culture']}**\n\n"
        f"**–®–∞–≥ 1/8:** –£–∫–∞–∂–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:",
        reply_markup=region_keyboard(),
        parse_mode='Markdown'
    )
    
    await AddBatch.region.set()  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: AddBatch –≤–º–µ—Å—Ç–æ AddBatchStatesGroup
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('selectbatchjoin:'), state=JoinPullStatesGroup.select_batch)
async def select_batch_for_join(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—É–ª—É"""
    try:
        batch_id = parse_callback_id(callback.data)  
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        await state.finish()
        return
    
    data = await state.get_data()    
    pull_id = data.get('join_pull_id')
    
    if not pull_id:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        await state.finish()
        return
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.finish()
        return
    
    pull = pulls[pull_id]  
    user_id = callback.from_user.id

    # –ò—â–µ–º –ø–∞—Ä—Ç–∏—é
    batch = None
    farmer_id = None
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–∞—Ä—Ç–∏—é —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, user_batches in batches.items():
        for b in user_batches:
            if b['id'] == batch_id:
                batch = b
                farmer_id = uid
                break
        if batch:
            break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
        
    if batch['culture'] != pull['culture']:
        await callback.answer("‚ùå –ö—É–ª—å—Ç—É—Ä–∞ –ø–∞—Ä—Ç–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—É–ª–æ–º!", show_alert=True)
        await state.finish()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä—ë–º
    available = pull['target_volume'] - pull['current_volume']
    logging.info(f"–ü–∞—Ä—Ç–∏—è {batch_id}: –æ–±—ä–µ–º {batch['volume']}, –¥–æ—Å—Ç—É–ø–Ω–æ {available}")
    
    if batch['volume'] > available:
        await callback.answer("‚ùå –û–±—ä–µ–º –ø–∞—Ä—Ç–∏–∏ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤ –ø—É–ª–µ!", show_alert=True)
        await state.finish()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ø—É–ª
    if pull_id not in pullparticipants:
        pullparticipants[pull_id] = []
    
    participant = {
        'farmer_id': user_id,
        'farmer_name': users[user_id].get('name', ''),
        'batch_id': batch_id,
        'volume': batch['volume'],
        'joined_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    pullparticipants[pull_id].append(participant)
    pull['current_volume'] += batch['volume']

    # ‚úÖ –ê–í–¢–û–ó–ê–ö–†–´–¢–ò–ï –ü–£–õ–õ–ê –ü–†–ò 100%
    is_full = False
    if pull['current_volume'] >= pull['target_volume']:
        pull['status'] = 'filled'
        is_full = True
        logging.info(f"üéâ –ü—É–ª–ª #{pull_id} –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100%!")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
        exporter_id = pull.get('exporter_id')
        if exporter_id:
            try:
                await bot.send_message(
                    exporter_id,
                    f"üéâ <b>–ü–£–õ #{pull_id} –ó–ê–ü–û–õ–ù–ï–ù!</b>\n\n"
                    f"üåæ {pull.get('culture')} - {pull['current_volume']:,.0f} —Ç\n"
                    f"üí∞ ${pull.get('price', 0):,.0f}/—Ç\n"
                    f"üè¢ {pull.get('port')}\n\n"
                    f"‚úÖ –ì–æ—Ç–æ–≤ –∫ –æ—Ç–≥—Ä—É–∑–∫–µ!",
                    parse_mode='HTML'
                )
                logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º–µ—Ä–∞–º –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
        if pull_id in pullparticipants:
            for participant in pullparticipants[pull_id]:
                farmer_id = participant.get('farmer_id')
                if farmer_id and farmer_id != exporter_id:
                    try:
                        await bot.send_message(
                            farmer_id,
                            f"üéâ <b>–ü–£–õ #{pull_id} –ó–ê–ü–û–õ–ù–ï–ù!</b>\n\n"
                            f"–í–∞—à–∞ –ø–∞—Ä—Ç–∏—è: {participant.get('volume')} —Ç\n\n"
                            f"–û–∂–∏–¥–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π.",
                            parse_mode='HTML'
                        )
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–µ—Ä–º–µ—Ä–∞: {e}")
        
        # üöö –ù–û–í–û–ï: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –õ–û–ì–ò–°–¢–ê–ú –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –ø—É–ª–µ
        all_logistics = [uid for uid, user in users.items() if user.get('role') == 'logistic']
        if all_logistics:
            for logist_id in all_logistics:
                try:
                    await bot.send_message(
                        logist_id,
                        f"üöö <b>–ù–û–í–´–ô –ó–ê–ü–û–õ–ù–ï–ù–ù–´–ô –ü–£–õ #{pull_id}!</b>\n\n"
                        f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull.get('culture')}\n"
                        f"üì¶ –û–±—ä—ë–º: {pull['current_volume']:,.0f} —Ç\n"
                        f"üö¢ –ü–æ—Ä—Ç: {pull.get('port')}\n"
                        f"üí∞ –¶–µ–Ω–∞ FOB: ${pull.get('price', 0):,.0f}/—Ç\n"
                        f"üìÖ –°–æ–∑–¥–∞–Ω: {pull.get('created_at', 'N/A')}\n\n"
                        f"‚ö° –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏!",
                        parse_mode='HTML'
                    )
                    logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç—É {logist_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞ {logist_id}: {e}")
        else:
            logging.info("‚ÑπÔ∏è –õ–æ–≥–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Ç–∏–∏
    batch['status'] = '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_pulls_to_pickle()
    save_batches_to_pickle()
    
    # –†–∞—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    fill_percent = (pull['current_volume'] / pull['target_volume']) * 100
    remaining = pull['target_volume'] - pull['current_volume']
    
    # ‚úÖ –£–î–ê–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –° –í–´–ë–û–†–û–ú –ü–ê–†–¢–ò–ò
    try:
        await callback.message.delete()
        logging.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –ø–∞—Ä—Ç–∏–∏ —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º–µ—Ä—É –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
    if is_full:
        await callback.answer("‚úÖ –ü–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ü—É–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100%!", show_alert=True)
        
        await bot.send_message(
            user_id,
            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
            f"–ü–∞—Ä—Ç–∏—è #{batch_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—É–ª #{pull_id}\n\n"
            f"‚úÖ <b>–ü—É–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100%!</b>\n\n"
            f"üåæ {batch['culture']} ‚Ä¢ {batch['volume']} —Ç\n"
            f"üí∞ {batch['price']:,.0f} ‚ÇΩ/—Ç\n\n"
            f"–°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
            f"–î–µ—Ç–∞–ª–∏ –ø—Ä–∏–¥—É—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",
            parse_mode='HTML'
        )
    else:
        await callback.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—É–ª—É!", show_alert=True)
        
        await bot.send_message(
            user_id,
            f"‚úÖ <b>–ü–∞—Ä—Ç–∏—è #{batch_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∞ –∫ –ø—É–ª—É #{pull_id}!</b>\n\n"
            f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {batch['culture']}\n"
            f"üì¶ –û–±—ä–µ–º: {batch['volume']} —Ç\n"
            f"üí∞ –¶–µ–Ω–∞: {batch['price']:,.0f} ‚ÇΩ/—Ç\n\n"
            f"üìä <b>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—É–ª–∞:</b>\n"
            f"{pull['current_volume']:,.0f} / {pull['target_volume']:,.0f} —Ç ({fill_percent:.1f}%)\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:,.0f} —Ç\n\n"
            f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            parse_mode='HTML'
        )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
    try:
        if pull_id not in pulls:
            logging.warning(f"‚ö†Ô∏è –ü—É–ª {pull_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É")
        else:
            pull = pulls[pull_id]
            
            if 'exporter_id' not in pull:
                logging.warning(f"‚ö†Ô∏è –í –ø—É–ª–µ {pull_id} –Ω–µ—Ç exporter_id")
            elif pull['exporter_id'] == user_id:
                # ‚úÖ –ù–û–í–ê–Ø –ü–†–û–í–ï–†–ö–ê: –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä —Å–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–≤–æ–µ–º—É –ø—É–ª—É
                logging.info(f"‚ÑπÔ∏è –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä #{pull['exporter_id']} —Å–∞–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–≤–æ–µ–º—É –ø—É–ª—É")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ù–ï —Å–∞–º —Ñ–µ—Ä–º–µ—Ä)
                farmer = users.get(user_id, {})
                farmer_name = farmer.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                farmer_phone = farmer.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
                farmer_region = farmer.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')
                
                await bot.send_message(
                    pull['exporter_id'],
                    f"üì¶ <b>–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –ø—É–ª–µ #{pull_id}!</b>\n\n"
                    f"üë§ –§–µ—Ä–º–µ—Ä: {farmer_name}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {farmer_phone}\n"
                    f"üìç –†–µ–≥–∏–æ–Ω: {farmer_region}\n\n"
                    f"üì¶ –ü–∞—Ä—Ç–∏—è #{batch_id}:\n"
                    f"   üåæ {batch['culture']}\n"
                    f"   üìä –û–±—ä—ë–º: {batch['volume']} —Ç\n"
                    f"   üí∞ –¶–µ–Ω–∞: {batch['price']:,.0f} ‚ÇΩ/—Ç\n\n"
                    f"üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {fill_percent:.1f}%\n"
                    f"–û–±—ä—ë–º: {pull['current_volume']:,.0f}/{pull['target_volume']:,.0f} —Ç\n\n"
                    f"üí¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ñ–µ—Ä–º–µ—Ä–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                    parse_mode='HTML'
                )
                logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É {pull['exporter_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É: {e}")
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('viewparticipants:'), state='*')
async def view_pullparticipants(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É–ª–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    await state.finish()
    
    try:
        pull_id = parse_callback_id(callback.data)
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    participants = pullparticipants.get(pull_id, [])
    
    if not participants:
        await callback.answer("–í –ø—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", show_alert=True)
        return
    msg = f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—É–ª–∞ #{pull_id}</b>\n\n"
    msg += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull['culture']}\n"
    msg += f"üì¶ –¶–µ–ª–µ–≤–æ–π –æ–±—ä—ë–º: {pull['target_volume']} —Ç\n"
    msg += f"üìä –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º: {pull['current_volume']} —Ç\n"
    msg += f"üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {(pull['current_volume'] / pull['target_volume'] * 100):.1f}%\n\n"
    
    msg += f"<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(participants)}):</b>\n\n"
    
    for i, p in enumerate(participants, 1):
        farmer_id = p['farmer_id']
        farmer = users.get(farmer_id, {})
        
        msg += f"{i}. <b>{p['farmer_name']}</b>\n"
        msg += f"   üì¶ –û–±—ä—ë–º: {p['volume']} —Ç\n"
        batch_id = p['batch_id']
        batch = None
        if farmer_id in batches:
            for b in batches[farmer_id]:
                if b['id'] == batch_id:
                    batch = b
                    break
        
        if batch:
            msg += f"   üí∞ –¶–µ–Ω–∞: {batch['price']:,.0f} ‚ÇΩ/—Ç\n"
            msg += f"   üìç –†–µ–≥–∏–æ–Ω: {batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        
        msg += f"   üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {p['joined_at']}\n"
        phone = farmer.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        email = farmer.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')
        msg += f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>\n"
        msg += f"   üìß Email: <code>{email}</code>\n"
        msg += "\n"
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—É–ª—É", callback_data=f"viewpull:{pull_id}")
    )
    
    await callback.message.edit_text(
        msg,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('region:'), state=RegistrationStatesGroup.region)
async def registration_region(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    
    region = callback.data.split(':', 1)[1]
    
    if region == 'other':
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞:")
        return
    
    await state.update_data(region=region)
    
    data = await state.get_data()
    user_id = callback.from_user.id
    role = data.get('role')
    
    logging.info(f"üìù –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ user_id={user_id}, role={role}, region={region}")
    
    users[user_id] = {
        'name': data.get('name'),
        'phone': data.get('phone'),
        'email': data.get('email'),
        'inn': data.get('inn'),
        'company_details': data.get('company_details'),
        'role': role,
        'region': region,
        'registered_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    save_users_to_pickle()
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
    if gs and gs.spreadsheet:
        try:
            gs.sync_user_to_sheets(users[user_id], user_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
    
    await state.finish()
    
    keyboard = get_role_keyboard(role)
    
    role_names_display = {
        'farmer': '–§–µ—Ä–º–µ—Ä',
        'exporter': '–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä',
        'logistic': '–õ–æ–≥–∏—Å—Ç',
        'expeditor': '–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä'
    }
    
    await callback.message.answer(
        f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üë§ –ò–º—è: {data.get('name')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
        f"üìß Email: {data.get('email')}\n"
        f"üé≠ –†–æ–ª—å: {role_names_display.get(role, role)}\n"
        f"üìç –†–µ–≥–∏–æ–Ω: {region}\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EXPORTUM!",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await callback.answer()


@dp.message_handler(commands=['admin'], state='*')
async def admin_menu(message: types.Message, state: FSMContext):
    """–ê–¥–º–∏–Ω –º–µ–Ω—é"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await message.answer(
        "üîê <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard(),
        parse_mode='HTML'
    )

# ========================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò
# ========================================

@dp.message_handler(lambda m: m.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞', state='*')
async def admin_stats_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    await state.finish()
    user_id = message.from_user.id
    
    if user_id != ADMIN_ID:
        await message.answer('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = len(users)
    farmers = len([u for u in users.values() if u.get('role') == 'farmer'])
    exporters = len([u for u in users.values() if u.get('role') == 'exporter'])
    logistics = len([u for u in users.values() if u.get('role') == 'logistic'])
    expeditors = len([u for u in users.values() if u.get('role') == 'expeditor'])
    
    total_batches = sum(len(batches) for user_batches in batches.values())
    active_batches = sum(
        len([b for b in batches if b.get('status') == '–∞–∫—Ç–∏–≤–Ω–∞'])
        for user_batches in batches.values()
    )
    
    total_pulls = len(pulls)
    open_pulls = len([p for p in pulls.values() if p.get('status') == '–æ—Ç–∫—Ä—ã—Ç'])
    
    total_deals = len(deals)
    active_deals = len([d for d in deals.values() if d.get('status') not in ['completed', 'cancelled']])
    
    total_matches = len(matches)
    active_matches = len([m for m in matches.values() if m.get('status') == 'active'])
    
    stats_msg = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_users}
‚Ä¢ üåæ –§–µ—Ä–º–µ—Ä–æ–≤: {farmers}
‚Ä¢ üì¶ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤: {exporters}
‚Ä¢ üöö –õ–æ–≥–∏—Å—Ç–æ–≤: {logistics}
‚Ä¢ üöõ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤: {expeditors}

üì¶ <b>–ü–∞—Ä—Ç–∏–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_batches}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_batches}

üéØ <b>–ü—É–ª–ª—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_pulls}
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {open_pulls}

ü§ù <b>–°–¥–µ–ª–∫–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_deals}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_deals}

üîó <b>–°–æ–≤–ø–∞–¥–µ–Ω–∏—è:</b>
‚Ä¢ –í—Å–µ–≥–æ: {total_matches}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_matches}"""
    
    await message.answer(stats_msg, parse_mode='HTML')


@dp.message_handler(lambda m: m.text == 'üìÇ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö', state='*')
async def admin_export_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    await state.finish()
    user_id = message.from_user.id
    
    if user_id != ADMIN_ID:
        await message.answer('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')
        return
    
    await message.answer('‚è≥ –§–æ—Ä–º–∏—Ä—É—é —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...')
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = {
            'users': users,
            'batches': {uid: batches for uid, batches in batches.items()},
            'pulls': pulls,
            'deals': deals,
            'matches': matches,
            'exported_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        filename = f"export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, ensure_ascii=False, indent=2)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'rb') as f:
            await message.answer_document(
                f,
                caption=f"üìÇ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                        f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                        f"üì¶ –ü–∞—Ä—Ç–∏–π: {sum(len(b) for b in batches.values())}\n"
                        f"üéØ –ü—É–ª–ª–æ–≤: {len(pulls)}",
                parse_mode='HTML'
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö')


@dp.message_handler(lambda m: m.text == 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', state='*')
async def admin_analytics_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    await state.finish()
    user_id = message.from_user.id
    
    if user_id != ADMIN_ID:
        await message.answer('‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω')
        return
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    total_batch_volume = 0
    prices = []
    
    for farmer_id, batches in batches.items():
        for batch in user_batches:
            total_batch_volume += batch.get('volume', 0)
            if batch.get('price'):
                prices.append(batch['price'])
    
    avg_price = sum(prices) / len(prices) if prices else 0
    min_price = min(prices) if prices else 0
    max_price = max(prices) if prices else 0
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º
    cultures_stats = {}
    for user_batches in batches.values():
        for batch in user_batches:
            culture = batch.get('culture', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            if culture not in cultures_stats:
                cultures_stats[culture] = {'count': 0, 'volume': 0}
            cultures_stats[culture]['count'] += 1
            cultures_stats[culture]['volume'] += batch.get('volume', 0)
    
    analytics_msg = f"""üìä <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>

üì¶ <b>–û–±—ä—ë–º—ã:</b>
‚Ä¢ –û–±—â–∏–π –æ–±—ä—ë–º –ø–∞—Ä—Ç–∏–π: {total_batch_volume:,.0f} —Ç

üí∞ <b>–¶–µ–Ω—ã:</b>
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,.0f} ‚ÇΩ/—Ç
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {min_price:,.0f} ‚ÇΩ/—Ç
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {max_price:,.0f} ‚ÇΩ/—Ç

üåæ <b>–ü–æ –∫—É–ª—å—Ç—É—Ä–∞–º:</b>"""
    
    for culture, stats in cultures_stats.items():
        analytics_msg += f"\n‚Ä¢ {culture}: {stats['count']} –ø–∞—Ä—Ç–∏–π, {stats['volume']:,.0f} —Ç"
    
    analytics_msg += f"\n\nüìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    
    await message.answer(analytics_msg, parse_mode='HTML')

@dp.message_handler(lambda m: m.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", state='*')
async def admin_broadcast_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    
    await message.answer(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã</i>",
        parse_mode='HTML'
    )
    
    await BroadcastStatesGroup.message.set()

class BroadcastStatesGroup(StatesGroup):
    message = State()
    confirm = State()



# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò
# ============================================================================

@dp.message_handler(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", state='*')
async def admin_statistics_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    await state.finish()

    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return

    stats_message = format_admin_statistics()

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh_stats"),
        InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏", callback_data="admin_detailed_stats")
    )

    await message.answer(stats_message, reply_markup=keyboard, parse_mode='HTML')


@dp.message_handler(lambda m: m.text == "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", state='*')
async def admin_analytics_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    await state.finish()

    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return

    analytics_message = format_admin_analytics()

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh_analytics"),
        InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export_analytics")
    )

    await message.answer(analytics_message, reply_markup=keyboard, parse_mode='HTML')


@dp.message_handler(lambda m: m.text == "üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", state='*')
async def admin_export_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    await state.finish()

    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="export_users"),
        InlineKeyboardButton("üéØ –ü—É–ª—ã", callback_data="export_pools")
    )
    keyboard.add(
        InlineKeyboardButton("üì¶ –ü–∞—Ä—Ç–∏–∏", callback_data="export_batches"),
        InlineKeyboardButton("üöö –ó–∞—è–≤–∫–∏", callback_data="export_requests")
    )
    keyboard.add(
        InlineKeyboardButton("üíæ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø", callback_data="export_full")
    )

    await message.answer(
        "üì• <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@dp.message_handler(lambda m: m.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", state='*')
async def admin_users_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"""
    await state.finish()

    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return

    msg = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"

    roles_data = [
        ("–§–µ—Ä–º–µ—Ä—ã", "farmer", "üåæ"),
        ("–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä—ã", "exporter", "üì¶"),
        ("–õ–æ–≥–∏—Å—Ç—ã", "logistic", "üöö"),
        ("–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—ã", "expeditor", "üöõ")
    ]

    for role_name, role_key, emoji in roles_data:
        role_users = [u for u in users.values() if u.get('role') == role_key]
        msg += f"{emoji} <b>{role_name}:</b> {len(role_users)}\n"
        for user in role_users[:5]:
            company = user.get('company_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            phone = user.get('phone', 'N/A')
            msg += f"  ‚Ä¢ {company} ({phone})\n"
        if len(role_users) > 5:
            msg += f"  ... –∏ –µ—â—ë {len(role_users) - 5}\n"
        msg += "\n"

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="admin_search_user"),
        InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="export_users")
    )

    await message.answer(msg, reply_markup=keyboard, parse_mode='HTML')


@dp.message_handler(lambda m: m.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã", state='*')
async def admin_update_prices_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã"""
    await state.finish()

    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return

    await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω...")

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã (–µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞)
        await message.answer(
            "‚úÖ <b>–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n"
            "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.",
            parse_mode='HTML'
        )
    except Exception as e:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã: {str(e)}",
            parse_mode='HTML'
        )


@dp.message_handler(lambda m: m.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", state='*')
async def admin_main_menu_handler(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await state.finish()

    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    user_data = users.get(user_id, {})
    role = user_data.get('role', 'unknown')

    if role == 'farmer':
        await message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=farmer_keyboard()
        )
    elif role == 'exporter':
        await message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=exporter_keyboard()
        )
    elif role == 'logistic':
        await message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=logistic_keyboard()
        )
    else:
        await message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=ReplyKeyboardRemove()
        )


@dp.message_handler(state=BroadcastStatesGroup.message, content_types=types.ContentType.TEXT)
async def admin_broadcast_message(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    broadcast_text = message.text
    await state.update_data(broadcast_text=broadcast_text)
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="broadcast_confirm_yes"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="broadcast_confirm_no")
    )
    
    await message.answer(
        f"üì¢ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        f"{broadcast_text}\n\n"
        f"–†–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ <b>{len(users)}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await BroadcastStatesGroup.confirm.set()

@dp.callback_query_handler(lambda c: c.data.startswith('broadcast_confirm_'), state=BroadcastStatesGroup.confirm)
async def admin_broadcast_confirm(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    action = callback.data.split('_', 2)[2]
    
    if action == 'no':
        await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.finish()
        await callback.answer()
        return
    
    data = await state.get_data()
    broadcast_text = data.get('broadcast_text')
    
    await callback.message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    success_count = 0
    fail_count = 0
    
    for user_id in users.keys():
        try:
            await bot.send_message(user_id, broadcast_text)
            success_count += 1
            await asyncio.sleep(0.05)  
        except Exception as e:
            fail_count += 1
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    await callback.message.answer(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {fail_count}",
        reply_markup=admin_keyboard(),
        parse_mode='HTML'
    )
    
    await state.finish()
    await callback.answer()

@dp.message_handler(lambda m: m.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç", state='*')
async def admin_export(message: types.Message, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    
    export_data = {
        'users': users,
        'batches': {uid: batches for uid, batches in batches.items()},
        'pulls': pulls,
        'deals': deals,
        'matches': matches,
        'exported_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    filename = f'export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(export_data, f, ensure_ascii=False, indent=2)
    
    with open(filename, 'rb') as f:
        await message.answer_document(
            f,
            caption=f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
                    f"üóì {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                    f"üì¶ –ü–∞—Ä—Ç–∏–π: {sum(len(b) for b in batches.values())}\n"
                    f"üéØ –ü—É–ª–æ–≤: {len(pulls)}",
            parse_mode='HTML'
        )
    
    os.remove(filename)

@dp.message_handler(lambda m: m.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", state='*')
async def admin_manual_match(message: types.Message, state: FSMContext):
    """–†—É—á–Ω–æ–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    
    await message.answer("üîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...")
    
    matches_found = await auto_match_batches_and_pulls()
    
    await message.answer(
        f"‚úÖ <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n"
        f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches_found}\n"
        f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len([m for m in matches.values() if m.get('status') == 'active'])}",
        parse_mode='HTML'
    )

@dp.message_handler(lambda m: m.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥", state='*')
async def admin_back(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    if user_id in users:
        role = users[user_id].get('role')
        keyboard = get_role_keyboard(role)
        await message.answer("‚óÄÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)
    else:
        await message.answer("‚óÄÔ∏è –í–æ–∑–≤—Ä–∞—Ç")

@dp.message_handler(commands=['match'], state='*')
async def cmd_manual_match(message: types.Message, state: FSMContext):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...")
    
    matches_found = await auto_match_batches_and_pulls()
    
    await message.answer(
        f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches_found}\n"
        f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len([m for m in matches.values() if m['status'] == 'active'])}"
    )

@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å", state='*')
async def cmd_profile(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    user = users[user_id]
    
    profile_text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üìù –ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üé≠ –†–æ–ª—å: {ROLES.get(user.get('role'), '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìß Email: {user.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè¢ –ò–ù–ù: {user.get('inn', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìç –†–µ–≥–∏–æ–Ω: {user.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('registered_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
"""
    
    if user.get('company_details'):
        profile_text += f"\nüè¢ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏:</b>\n{user['company_details']}"
    
    keyboard = profile_edit_keyboard()
    
    await message.answer(profile_text, parse_mode='HTML', reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("edit_profile:"), state='*')
async def start_edit_profile(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    field = callback.data.split(':', 1)[1]
    
    await state.update_data(edit_field=field)
    
    field_names = {
        'phone': '–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        'email': 'email',
        'region': '—Ä–µ–≥–∏–æ–Ω',
        'company_details': '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏'
    }
    
    if field == 'region':
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω:",
            reply_markup=region_keyboard()
        )
    else:
        await callback.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π {field_names.get(field, '–∑–Ω–∞—á–µ–Ω–∏–µ')}:"
        )
    
    await EditProfile.new_value.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('region:'), state=EditProfile.new_value)
async def edit_profile_region(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    new_region = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    field = data.get('edit_field')
    user_id = callback.from_user.id
    
    if field != 'region':
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")
        return
    
    old_value = users[user_id].get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')
    users[user_id]['region'] = new_region
    
    save_users_to_json()
    
    if gs and gs.spreadsheet:
        gs.update_user_in_sheets(user_id, users[user_id])
    
    await state.finish()
    
    role = users[user_id].get('role')
    keyboard = get_role_keyboard(role)
    
    await callback.message.edit_text(
        f"‚úÖ –†–µ–≥–∏–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_region}"
    )
    
    await callback.message.answer(
        "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!",
        reply_markup=keyboard
    )
    await callback.answer("‚úÖ –†–µ–≥–∏–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω")

@dp.message_handler(state=EditProfile.new_value)
async def edit_profile_value(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = message.from_user.id
    data = await state.get_data()
    field = data.get('edit_field')
    new_value = message.text.strip()
    
    if field == 'email':
        if not validate_email(new_value):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
    elif field == 'phone':
        if not validate_phone(new_value):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
    
    old_value = users[user_id].get(field, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    users[user_id][field] = new_value
    
    save_users_to_json()
    
    if gs and gs.spreadsheet:
        gs.update_user_in_sheets(user_id, users[user_id])

    await state.finish()
    
    role = users[user_id].get('role')
    keyboard = get_role_keyboard(role)
    
    field_names = {
        'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
        'email': 'Email',
        'company_details': '–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏'
    }
    
    await message.answer(
        f"‚úÖ {field_names.get(field, field.capitalize())} –æ–±–Ω–æ–≤–ª—ë–Ω!",
        reply_markup=keyboard
    )

@dp.message_handler(lambda m: m.text == "üìà –¶–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ", state='*')
async def show_prices_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã —Å—Ä–∞–∑—É –±–µ–∑ –º–µ–Ω—é"""
    await state.finish()
    
    prices_msg = format_prices_message()
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã", callback_data="refresh_prices")
    )
    
    await message.answer(
        prices_msg,
        parse_mode='HTML',
        reply_markup=keyboard
    )
    
@dp.message_handler(lambda m: m.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞", state='*')
async def show_news_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å—Ä–∞–∑—É –±–µ–∑ –º–µ–Ω—é"""
    await state.finish()
    news_msg = format_news_message()
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="refresh_news")
    )
    
    await message.answer(
        news_msg,
        parse_mode='HTML',
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

@dp.callback_query_handler(lambda c: c.data == "view_news", state='*')
async def show_news(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"""
    news_msg = format_news_message()
    await callback.message.edit_text(
        news_msg, 
        parse_mode='HTML',
        disable_web_page_preview=True
    )
    await callback.answer()

def parse_soy_from_zol():
    """
    –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω –Ω–∞ —Å–æ—é —Å ZOL.RU (—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
    
    ZOL.RU –ø—É–±–ª–∏–∫—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ü–µ–Ω –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –†–æ—Å—Å–∏–∏
    –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –≤ —Ä—É–±/–∫–≥, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –≤ ‚ÇΩ/—Ç
    
    Returns:
        int: –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ ‚ÇΩ/—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        logging.info("üå± –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–∏ —Å ZOL.RU...")
        
        # ZOL.RU –ø—É–±–ª–∏–∫—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ
        base_urls = [
            "https://www.zol.ru/n/3fa47",  # 01.10.2025
            "https://www.zol.ru/n/3faf3",  # —Ä–µ–∑–µ—Ä–≤ 1
            "https://www.zol.ru/n/3f7b3",  # —Ä–µ–∑–µ—Ä–≤ 2
            "https://www.zol.ru/soya.htm"  # –æ–±—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        ]
        
        for url in base_urls:
            try:
                response = requests.get(url, timeout=10, headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                })
                
                if response.status_code != 200:
                    continue
                
                text = response.text.lower()
                
                # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
                patterns = [
                    r'—Å–æ—è\s*[=:]\s*(\d+\.?\d*)',
                    r'soy\s*[=:]\s*(\d+\.?\d*)',
                ]
                
                prices = []
                
                for pattern in patterns:
                    matches = re.findall(pattern, text)
                    if matches:
                        for match in matches:
                            try:
                                # –¶–µ–Ω–∞ –≤ —Ä—É–±/–∫–≥, –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ ‚ÇΩ/—Ç
                                price_kg = float(match)
                                price_ton = int(price_kg * 1000)
                                
                                # –í–∞–ª–∏–¥–∞—Ü–∏—è (18,000 - 60,000 ‚ÇΩ/—Ç)
                                if 18000 <= price_ton <= 60000:
                                    prices.append(price_ton)
                            except Exception as e:
                                continue
                
                # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
                prices = list(set(prices))
                
                if prices and len(prices) >= 1:
                    avg = int(sum(prices) / len(prices))
                    logging.info(f"‚úÖ –°–æ—è (ZOL.RU): –Ω–∞–π–¥–µ–Ω–æ {len(prices)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
                    for i, price in enumerate(sorted(prices), 1):
                        logging.info(f"   –†–µ–≥–∏–æ–Ω {i}: {price:,} ‚ÇΩ/—Ç")
                    logging.info(f"‚úÖ –°–æ—è: —Å—Ä–µ–¥–Ω—è—è {avg:,} ‚ÇΩ/—Ç ({len(prices)} —Ä–µ–≥–∏–æ–Ω–æ–≤) [–°–ü–ê–†–°–ï–ù–û]")
                    return avg
                    
            except Exception as e:
                logging.debug(f"–ü–æ–ø—ã—Ç–∫–∞ {url}: {e}")
                continue
        
        logging.warning("‚ö†Ô∏è –°–æ—è (ZOL.RU): –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∞—Ä—Å–∏—Ç—å")
        return None
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–∏ —Å ZOL.RU: {e}")
        return None
    
def parse_russia_regional_prices():
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –Ω–∞ –∑–µ—Ä–Ω–æ –≤ –†–æ—Å—Å–∏–∏ —Å zerno.ru"""
    
    logging.info("üåæ –ü–∞—Ä—Å–∏–Ω–≥ –†–§: –Ω–∞—á–∞–ª–æ...")
    result = {}
    
    # 1. –ü–®–ï–ù–ò–¶–ê (–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å - —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ)
    try:
        url_wheat = "https://www.zerno.ru/regional-prices-wheat-minimum-and-maximum"
        response = requests.get(url_wheat, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, 'html.parser')
        
        table = soup.find('table')
        if table:
            rows = table.find_all('tr')[1:]
            logging.info(f"üìã –ü—à–µ–Ω–∏—Ü–∞: –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ {len(rows)}")
            
            wheat_prices = []
            for row in rows:
                cells = row.find_all('td')
                if len(cells) < 2:
                    continue
                
                region = cells[0].get_text(strip=True)
                
                for i in range(1, min(4, len(cells))):
                    price_text = cells[i].get_text(strip=True)
                    if not price_text or price_text == '-':
                        continue
                    
                    if '-' in price_text and not price_text.startswith('-'):
                        prices_range = price_text.split('-')
                        for p in prices_range:
                            try:
                                price_clean = re.sub(r'[^0-9]', '', p)
                                if price_clean:
                                    price_value = int(price_clean)
                                    if 8000 <= price_value <= 30000:
                                        wheat_prices.append(price_value)
                                        logging.info(f"‚úÖ –ü—à–µ–Ω–∏—Ü–∞: {price_value} ‚ÇΩ/—Ç –∏–∑ {region}")
                            except Exception as e:
                                continue
                    else:
                        try:
                            price_clean = re.sub(r'[^0-9]', '', price_text)
                            if price_clean:
                                price_value = int(price_clean)
                                if 8000 <= price_value <= 30000:
                                    wheat_prices.append(price_value)
                                    logging.info(f"‚úÖ –ü—à–µ–Ω–∏—Ü–∞: {price_value} ‚ÇΩ/—Ç –∏–∑ {region}")
                        except Exception as e:
                            continue
            
            if wheat_prices:
                result['–ü—à–µ–Ω–∏—Ü–∞'] = int(sum(wheat_prices) / len(wheat_prices))
                logging.info(f"‚úÖ –ü—à–µ–Ω–∏—Ü–∞: —Å—Ä–µ–¥–Ω—è—è {result['–ü—à–µ–Ω–∏—Ü–∞']} ‚ÇΩ/—Ç ({len(wheat_prices)} —Ü–µ–Ω)")
            else:
                result['–ü—à–µ–Ω–∏—Ü–∞'] = 15000
                logging.warning("‚ö†Ô∏è –ü—à–µ–Ω–∏—Ü–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        else:
            result['–ü—à–µ–Ω–∏—Ü–∞'] = 15000
            logging.warning("‚ö†Ô∏è –ü—à–µ–Ω–∏—Ü–∞: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—à–µ–Ω–∏—Ü—ã: {e}")
        result['–ü—à–µ–Ω–∏—Ü–∞'] = 15000
    
    # 2. –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì –î–†–£–ì–ò–• –ö–£–õ–¨–¢–£–†
    today = datetime.now().strftime("%Y-%m-%d")
    
    cereals_urls = {
        '–Ø—á–º–µ–Ω—å': f"https://www.zerno.ru/cerealspricesdate/{today}/barley",
        '–ö—É–∫—É—Ä—É–∑–∞': f"https://www.zerno.ru/cerealspricesdate/{today}/corn",
        '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫': f"https://www.zerno.ru/cerealspricesdate/{today}/sunflower",
    }
    
    fallback_prices = {
        '–Ø—á–º–µ–Ω—å': 14000,
        '–ö—É–∫—É—Ä—É–∑–∞': 14000,
        '–°–æ—è': 25000,
        '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫': 30000
    }
    
    price_ranges = {
        '–Ø—á–º–µ–Ω—å': (7000, 25000),
        '–ö—É–∫—É—Ä—É–∑–∞': (10000, 30000),  # –†–ê–°–®–ò–†–ï–ù–û!
        '–°–æ—è': (18000, 60000),  # –†–ê–°–®–ò–†–ï–ù–û!
        '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫': (15000, 50000)
    }
    
    for culture, url in cereals_urls.items():
        try:
            response = requests.get(url, timeout=10)
            
            if response.status_code != 200:
                logging.warning(f"‚ö†Ô∏è {culture}: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–∫–æ–¥ {response.status_code})")
                result[culture] = fallback_prices[culture]
                continue
            
            soup = BeautifulSoup(response.content, 'html.parser')
            table = soup.find('table')
            
            if not table:
                logging.warning(f"‚ö†Ô∏è {culture}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                result[culture] = fallback_prices[culture]
                continue
            
            prices = []
            rows = table.find_all('tr')
            logging.info(f"üìã {culture}: –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ {len(rows)}")
            
            for row in rows:
                cells = row.find_all('td')
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
                if len(cells) < 3:
                    continue
                
                # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                first_cell = cells[0].get_text(strip=True)
                if any(keyword in first_cell for keyword in ['–ö–ª–∞—Å—Å', '–ì–æ—Ä–æ–¥', '—Ü–µ–Ω–∞', '–∏–∑–º.', '—Ç—Ä–µ–Ω–¥', '–í–∞–ª—é—Ç–∞']):
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥/–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
                city = first_cell if first_cell else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                # –ò—â–µ–º —Ü–µ–Ω—É –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 2, 1, 3, 4)
                for col_idx in [2, 1, 3, 4]:
                    if len(cells) <= col_idx:
                        continue
                    
                    price_text = cells[col_idx].get_text(strip=True)
                    
                    # –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    if not price_text or price_text in ['default_value', '-', '0', '', '—Ä—É–±/—Ç']:
                        continue
                    
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                        price_clean = re.sub(r'[^0-9]', '', price_text)
                        if not price_clean:
                            continue
                        
                        price_value = int(price_clean)
                        
                        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏
                        min_p, max_p = price_ranges[culture]
                        if min_p <= price_value <= max_p:
                            prices.append(price_value)
                            logging.info(f"‚úÖ {culture}: {price_value} ‚ÇΩ/—Ç –∏–∑ {city}")
                            break  # –ù–∞—à–ª–∏ —Ü–µ–Ω—É, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ
                    except Exception as e:
                        continue
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            if prices:
                avg = int(sum(prices) / len(prices))
                result[culture] = avg
                logging.info(f"‚úÖ {culture}: —Å—Ä–µ–¥–Ω—è—è {avg} ‚ÇΩ/—Ç ({len(prices)} —Ü–µ–Ω)")
            else:
                result[culture] = fallback_prices[culture]
                logging.warning(f"‚ö†Ô∏è {culture}: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {fallback_prices[culture]} ‚ÇΩ/—Ç")
                
        except Exception as e:
            result[culture] = fallback_prices[culture]
            logging.error(f"‚ùå {culture}: {e}")
     
    try:
        soy_price = parse_soy_from_zol()
        
        if soy_price:
            result['–°–æ—è'] = soy_price
        else:
            # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            result['–°–æ—è'] = 28000
            logging.warning("‚ö†Ô∏è –°–æ—è: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 28,000 ‚ÇΩ/—Ç")
            
    except Exception as e:
        result['–°–æ—è'] = 28000
        logging.error(f"‚ùå –°–æ—è: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ")
    
    logging.info(f"üìä –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω: {len(result)} –∫—É–ª—å—Ç—É—Ä")
    return result


def parse_fob_black_sea():
    """‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ FOB (–ß–µ—Ä–Ω–æ–µ –º–æ—Ä–µ)"""
    try:
        url = "https://query1.finance.yahoo.com/v8/finance/chart/ZW=F"
        response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'}, timeout=10)
        data = response.json()
        
        if 'chart' in data and 'result' in data['chart'] and data['chart']['result']:
            result = data['chart']['result'][0]
            if 'meta' in result and 'regularMarketPrice' in result['meta']:
                price_cents = result['meta']['regularMarketPrice']
                price_dollars = price_cents / 100
                fob_price = round(price_dollars * 36.74, 2)
                logging.info(f"‚úÖ FOB: ${fob_price}/—Ç")
                return fob_price
        
        logging.warning("‚ö†Ô∏è FOB: –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        return 210.0
        
    except Exception as e:
        logging.error(f"‚ùå parse_fob_black_sea: {e}")
        return 210.0

def parse_cbot_futures():
    """‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ñ—å—é—á–µ—Ä—Å–æ–≤ CBoT"""
    prices = {}
    
    try:
        symbols = {
            '–ü—à–µ–Ω–∏—Ü–∞ (CBoT)': 'ZW=F',
            '–ö—É–∫—É—Ä—É–∑–∞ (CBoT)': 'ZC=F',
            '–°–æ—è (CBoT)': 'ZS=F'
        }
        
        for name, symbol in symbols.items():
            try:
                url = f"https://query1.finance.yahoo.com/v8/finance/chart/{symbol}"
                response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'}, timeout=10)
                data = response.json()
                
                if 'chart' in data and 'result' in data['chart'] and data['chart']['result']:
                    result = data['chart']['result'][0]
                    if 'meta' in result and 'regularMarketPrice' in result['meta']:
                        price_cents = result['meta']['regularMarketPrice']
                        price_dollars = price_cents / 100
                        prices[name] = f"${price_dollars:.2f}/bu"
                        logging.info(f"‚úÖ {name}: ${price_dollars:.2f}/bu")
            except Exception as e:
                logging.error(f"‚ùå {name}: {e}")
                continue
        
        if not prices:
            prices = {
                '–ü—à–µ–Ω–∏—Ü–∞ (CBoT)': '$5.50/bu',
                '–ö—É–∫—É—Ä—É–∑–∞ (CBoT)': '$4.20/bu',
                '–°–æ—è (CBoT)': '$10.80/bu'
            }
            logging.warning("‚ö†Ô∏è CBoT: –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        
        return prices
        
    except Exception as e:
        logging.error(f"‚ùå parse_cbot_futures: {e}")
        return {
            '–ü—à–µ–Ω–∏—Ü–∞ (CBoT)': '$5.50/bu',
            '–ö—É–∫—É—Ä—É–∑–∞ (CBoT)': '$4.20/bu',
            '–°–æ—è (CBoT)': '$10.80/bu'
        }

def parse_grain_news(limit=5):
    """‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å zerno.ru"""
    newslist = []
    
    try:
        url = "https://www.zerno.ru"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9'
        }
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        
        links = soup.find_all('a', href=re.compile(r'/node/\d+'))
        seen_titles = set()
        
        keywords = ['—ç–∫—Å–ø–æ—Ä—Ç', '—Ä–æ—Å—Å–∏—è', '–∞—Å—Ç—Ä–∞—Ö–∞–Ω—å', '–∑–µ—Ä–Ω–æ', '–ø—à–µ–Ω–∏—Ü', '—É—Ä–æ–∂–∞–π', 
                   'fob', '—á–µ—Ä–Ω–æ–µ –º–æ—Ä–µ', '—Ü–µ–Ω', '—Ä—ã–Ω–æ–∫']
        
        for link in links[:20]:
            title = link.text.strip()
            href = link.get('href', '')
            
            title_lower = title.lower()
            
            if title and len(title) > 30 and title not in seen_titles:
                if any(kw in title_lower for kw in keywords):
                    seen_titles.add(title)
                    
                    date = datetime.now().strftime("%d.%m.%Y")
                    full_link = f"https://www.zerno.ru{href}" if href.startswith('/') else href
                    
                    newslist.append({
                        'title': title,
                        'link': full_link,
                        'date': date
                    })
                    
                    if len(newslist) >= limit:
                        break
        
        logging.info(f"‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(newslist)}")
        return newslist
        
    except Exception as e:
        logging.error(f"‚ùå parse_grain_news: {e}")
        return []
    
async def update_prices_cache():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ü–µ–Ω"""
    global prices_cache, last_prices_update
    
    try:
        logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω...")
        loop = asyncio.get_event_loop()
        
        russia_prices = await loop.run_in_executor(None, parse_russia_regional_prices)
        fob_price = await loop.run_in_executor(None, parse_fob_black_sea)
        cbot_prices = await loop.run_in_executor(None, parse_cbot_futures)
        
        prices_cache = {
            'data': {
                'russia_south': russia_prices,
                'fob': fob_price,
                'cbot': cbot_prices
            },
            'updated': datetime.now()
        }
        
        last_prices_update = datetime.now()
        logging.info("‚úÖ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logging.error(f"‚ùå update_prices_cache: {e}")

async def update_news_cache():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–æ–≤–æ—Å—Ç–µ–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    global news_cache
    
    try:
        logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        loop = asyncio.get_event_loop()
        news = await loop.run_in_executor(None, parse_grain_news)
        
        news_cache = {
            'data': news,
            'updated': datetime.now()
        }
        
        logging.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(news)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        logging.error(f"‚ùå update_news_cache: {e}")
        news_cache = {
            'data': [],
            'updated': datetime.now()
        }

def load_users_from_json():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON"""
    global users
    try:
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                loaded = json.load(f)
                users = {int(k): v for k, v in loaded.items()}
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(users)}")
        else:
            logging.info("‚ÑπÔ∏è –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def save_users_to_json():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON"""
    try:
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
        logging.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def load_batches_from_pickle():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä—Ç–∏–π –∏–∑ pickle"""
    global batches
    
    try:
        if not os.path.exists('data/batches.pkl'):
            batches = {}
            logging.info("‚ö†Ô∏è –§–∞–π–ª –ø–∞—Ä—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞")
            return
        
        with open('data/batches.pkl', 'rb') as f:
            loaded_batches = pickle.load(f)
            
            # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –¢–ò–ü –î–ê–ù–ù–´–•
            if isinstance(loaded_batches, dict):
                batches = loaded_batches
            elif isinstance(loaded_batches, list):
                logging.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç batches (list), –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ dict")
                batches = {}
                for batch in loaded_batches:
                    farmer_id = batch.get('farmer_id')
                    if farmer_id:
                        if farmer_id not in batches:
                            batches[farmer_id] = []
                        batches[farmer_id].append(batch)
            else:
                logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç batches: {type(loaded_batches)}")
                batches = {}
        
        # –ü–æ–¥—Å—á—ë—Ç
        total_batches = sum(len(batch_list) for batch_list in batches.values())
        farmers_count = len(batches)
        
        logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–∞—Ä—Ç–∏–π: {total_batches} –æ—Ç {farmers_count} —Ñ–µ—Ä–º–µ—Ä–æ–≤")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä—Ç–∏–π: {e}")
        batches = {}


def save_batches_to_pickle():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–π –≤ pickle"""
    try:
        os.makedirs('data', exist_ok=True)
        
        # ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –ß–¢–û –°–û–•–†–ê–ù–Ø–ï–ú –°–õ–û–í–ê–†–¨
        if not isinstance(batches, dict):
            logging.error(f"‚ùå batches –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø: {type(batches)}")
            return
        
        with open('data/batches.pkl', 'wb') as f:
            pickle.dump(batches, f)
        
        total_batches = sum(len(batch_list) for batch_list in batches.values())
        logging.info(f"‚úÖ –ü–∞—Ä—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {total_batches} –ø–∞—Ä—Ç–∏–π")   
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–π: {e}")

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø/–ó–ê–ì–†–£–ó–ö–ò –ü–£–õ–û–í –ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

def save_pulls_to_pickle():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É–ª–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ pickle"""
    try:
        data = {
            'pulls': pulls,
            'pullparticipants': pullparticipants
        }
        with open(PULLSFILE, 'wb') as f:
            pickle.dump(data, f)
        logging.info("‚úÖ –ü—É–ª—ã –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É–ª–æ–≤: {e}")


def load_pulls_from_pickle():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—É–ª–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ pickle"""
    global pulls, pullparticipants, pull_counter
    try:
        if os.path.exists(PULLSFILE):
            with open(PULLSFILE, 'rb') as f:
                data = pickle.load(f)
                pulls = data.get('pulls', {})
                pullparticipants = data.get('pullparticipants', {})

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            if pulls:
                pull_counter = max(pulls.keys()) if pulls else 0

            logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pulls)} –ø—É–ª–æ–≤ –∏ {len(pullparticipants)} –≥—Ä—É–ø–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        else:
            logging.info("üìÇ –§–∞–π–ª pulls.pkl –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–ª–æ–≤: {e}")
        pulls = {}
        pullparticipants = {}


def save_users_to_pickle():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ pickle"""
    try:
        with open(USERSFILE, 'wb') as f:
            pickle.dump(users, f)
        logging.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


def load_users_from_pickle():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ pickle"""
    global users
    try:
        if os.path.exists(USERSFILE):
            with open(USERSFILE, 'rb') as f:
                loaded = pickle.load(f)
                if isinstance(loaded, dict):
                    users = loaded
                    logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(users)}")
                else:
                    users = {}
        else:
            logging.info("üìÇ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        users = {}

def savepullstopickle():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É–ª–ª–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ pickle"""
    try:
        data = {
            'pulls': pulls,
            'pullparticipants': pullparticipants
        }
        with open(PULLSFILE, 'wb') as f:
            pickle.dump(data, f)
        logging.info("‚úÖ –ü—É–ª–ª—ã –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ pickle")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É–ª–ª–æ–≤: {e}")


def loadpullsfrompickle():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—É–ª–ª–æ–≤ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ pickle"""
    global pulls, pullparticipants, pull_counter
    try:
        if os.path.exists(PULLSFILE):
            with open(PULLSFILE, 'rb') as f:
                data = pickle.load(f)
                pulls = data.get('pulls', {})
                pullparticipants = data.get('pullparticipants', {})
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—É–ª–ª–æ–≤
            if pulls:
                pull_counter = max(pulls.keys()) if pulls else 0
            
            logging.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pulls)} –ø—É–ª–ª–æ–≤ –∏ {len(pullparticipants)} –≥—Ä—É–ø–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        else:
            logging.info("üìÇ –§–∞–π–ª pulls.pkl –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–ª–ª–æ–≤: {e}")
        pulls = {}
        pullparticipants = {}


class GoogleSheetsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""

    def __init__(self, credentials_file, spreadsheet_id):
        self.spreadsheet_id = spreadsheet_id
        self.client = None
        self.spreadsheet = None

        try:
            if not os.path.exists(credentials_file):
                logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {credentials_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. Google Sheets –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.")
                return

            scope = [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ]

            creds = Credentials.from_service_account_file(credentials_file, scopes=scope)
            self.client = gspread.authorize(creds)
            self.spreadsheet = self.client.open_by_key(spreadsheet_id)
            logging.info("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")

    def get_or_create_worksheet(self, title, headers):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å worksheet"""
        if not self.spreadsheet:
            return None

        try:
            worksheet = self.spreadsheet.worksheet(title)
        except Exception as e:
            worksheet = self.spreadsheet.add_worksheet(
                title=title,
                rows=1000,
                cols=len(headers)
            )
            worksheet.append_row(headers)
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω worksheet: {title}")

        return worksheet

    def update_user_in_sheets(self, user_id, user_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets"""
        try:
            if not self.spreadsheet:
                logging.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
                return

            headers = ['User ID', '–ò–º—è', '–†–æ–ª—å', '–¢–µ–ª–µ—Ñ–æ–Ω', 'Email', '–ò–ù–ù', '–†–µ–≥–∏–æ–Ω', '–†–µ–∫–≤–∏–∑–∏—Ç—ã', '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', '–û–±–Ω–æ–≤–ª–µ–Ω–æ']
            worksheet = self.get_or_create_worksheet('Users', headers)

            if not worksheet:
                return

            row_data = [
                str(user_id),
                str(user_data.get('name', '')),
                str(user_data.get('role', '')),
                str(user_data.get('phone', '')),
                str(user_data.get('email', '')),
                str(user_data.get('inn', '')),
                str(user_data.get('region', '')),
                str(user_data.get('company_requisites', '')),
                str(user_data.get('registration_date', datetime.now().strftime('%Y-%m-%d %H:%M:%S'))),
                datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ]

            try:
                cell = worksheet.find(str(user_id))
                if cell:
                    worksheet.update(f'A{cell.row}:J{cell.row}', [row_data])
                    logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Google Sheets")
                else:
                    worksheet.append_row(row_data)
                    logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets")
            except Exception as e:
                worksheet.append_row(row_data)
                logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets: {e}")

    def sync_batch_to_sheets(self, batch):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–∏–∏ —Ñ–µ—Ä–º–µ—Ä–∞ –≤ Google Sheets"""
        try:
            if not self.spreadsheet:
                logging.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
                return

            headers = [
                'ID', '–§–µ—Ä–º–µ—Ä ID', '–ö—É–ª—å—Ç—É—Ä–∞', '–û–±—ä—ë–º (—Ç)', '–¶–µ–Ω–∞ (‚ÇΩ/—Ç)', 
                '–†–µ–≥–∏–æ–Ω', '–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)', '–ü—Ä–æ—Ç–µ–∏–Ω (%)', '–ö–ª–µ–π–∫–æ–≤–∏–Ω–∞ (%)', 
                '–°–æ—Ä–Ω–æ—Å—Ç—å (%)', '–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏', '–°—Ç–∞—Ç—É—Å', 
                '–°–æ–∑–¥–∞–Ω–æ', '–û–±–Ω–æ–≤–ª–µ–Ω–æ'
            ]
            worksheet = self.get_or_create_worksheet('Batches', headers)

            if not worksheet:
                return

            row_data = [
                str(batch.get('id', '')),
                str(batch.get('farmer_id', '')),
                str(batch.get('culture', '')),
                str(batch.get('volume', 0)),
                str(batch.get('price', 0)),
                str(batch.get('region', '')),
                str(batch.get('moisture', '')),
                str(batch.get('protein', '')),
                str(batch.get('gluten', '')),
                str(batch.get('weediness', '')),
                str(batch.get('readiness_date', '')),
                str(batch.get('status', 'active')),
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ]

            batch_id = str(batch.get('id', ''))
            try:
                cell = worksheet.find(batch_id)
                if cell:
                    worksheet.update(f'A{cell.row}:N{cell.row}', [row_data])
                    logging.info(f"‚úÖ –ü–∞—Ä—Ç–∏—è {batch_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Google Sheets")
                else:
                    worksheet.append_row(row_data)
                    logging.info(f"‚úÖ –ü–∞—Ä—Ç–∏—è {batch_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            except Exception as e:
                worksheet.append_row(row_data)
                logging.info(f"‚úÖ –ü–∞—Ä—Ç–∏—è {batch_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Ç–∏–∏ –≤ Google Sheets: {e}")

    def update_batch_in_sheets(self, batch):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –≤ Google Sheets"""
        self.sync_batch_to_sheets(batch)

    def delete_batch_from_sheets(self, batch_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –∏–∑ Google Sheets"""
        try:
            if not self.spreadsheet:
                logging.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
                return

            worksheet = self.spreadsheet.worksheet('Batches')
            cell = worksheet.find(str(batch_id))
            if cell:
                worksheet.delete_rows(cell.row)
                logging.info(f"‚úÖ –ü–∞—Ä—Ç–∏—è {batch_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Google Sheets")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏ –∏–∑ Google Sheets: {e}")

    def sync_pull_to_sheets(self, pull):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –≤ Google Sheets"""
        try:
            if not self.spreadsheet:
                logging.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
                return

            headers = [
                'ID', '–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä ID', '–ö—É–ª—å—Ç—É—Ä–∞', '–¶–µ–ª–µ–≤–æ–π –æ–±—ä—ë–º (—Ç)', '–¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º (—Ç)',
                '–¶–µ–Ω–∞ (‚ÇΩ/—Ç)', '–í–ª–∞–∂–Ω–æ—Å—Ç—å (%)', '–°–æ—Ä–Ω–æ—Å—Ç—å (%)', '–°—Ç–∞—Ç—É—Å', '–°–æ–∑–¥–∞–Ω–æ', '–û–±–Ω–æ–≤–ª–µ–Ω–æ'
            ]
            worksheet = self.get_or_create_worksheet('Pulls', headers)

            if not worksheet:
                return

            row_data = [
                str(pull.get('id', '')),
                str(pull.get('exporter_id', '')),
                str(pull.get('culture', '')),
                str(pull.get('target_volume', 0)),
                str(pull.get('current_volume', 0)),
                str(pull.get('price', 0)),
                str(pull.get('moisture', '')),
                str(pull.get('impurity', '')),
                str(pull.get('status', 'active')),
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ]

            pull_id = str(pull.get('id', ''))
            try:
                cell = worksheet.find(pull_id)
                if cell:
                    worksheet.update(f'A{cell.row}:K{cell.row}', [row_data])
                    logging.info(f"‚úÖ –ü—É–ª {pull_id} –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Google Sheets")
                else:
                    worksheet.append_row(row_data)
                    logging.info(f"‚úÖ –ü—É–ª {pull_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets")
            except Exception as e:
                worksheet.append_row(row_data)
                logging.info(f"‚úÖ –ü—É–ª {pull_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—É–ª–∞ –≤ Google Sheets: {e}")

    def update_pull_in_sheets(self, pull):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª–∞ –≤ Google Sheets"""
        self.sync_pull_to_sheets(pull)

    def sync_deal_to_sheets(self, deal):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏ –≤ Google Sheets"""
        try:
            if not self.spreadsheet:
                logging.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets")
                return

            headers = [
                'ID', '–ü—É–ª ID', '–ü–∞—Ä—Ç–∏—è ID', '–§–µ—Ä–º–µ—Ä ID', '–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä ID',
                '–û–±—ä—ë–º (—Ç)', '–¶–µ–Ω–∞ (‚ÇΩ/—Ç)', '–°—Ç–∞—Ç—É—Å', '–°–æ–∑–¥–∞–Ω–æ'
            ]
            worksheet = self.get_or_create_worksheet('Deals', headers)

            if not worksheet:
                return

            row_data = [
                str(deal.get('id', '')),
                str(deal.get('pull_id', '')),
                str(deal.get('batch_id', '')),
                str(deal.get('farmer_id', '')),
                str(deal.get('exporter_id', '')),
                str(deal.get('volume', 0)),
                str(deal.get('price', 0)),
                str(deal.get('status', 'pending')),
                datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ]

            worksheet.append_row(row_data)
            logging.info("‚úÖ –°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–¥–µ–ª–∫–∏ –≤ Google Sheets: {e}")



def sync_user_to_sheets(self, user_id, user_data):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets"""
    if not self.spreadsheet:
        return
    
    try:
        headers = [
            'user_id', 'username', 'name', 'phone', 'email',
            'inn', 'company_details', 'region', 'role', 'registered_at'
        ]
        
        worksheet = self.get_or_create_worksheet('Users', headers)
        if not worksheet:
            return
        
        try:
            cell = worksheet.find(str(user_id))
            row_num = cell.row
            
            row_data = [
                str(user_id),
                clean_text(user_data.get('username', '')),
                clean_text(user_data.get('name', '')),
                clean_text(user_data.get('phone', '')),
                clean_text(user_data.get('email', '')),
                clean_text(user_data.get('inn', '')),
                clean_text(user_data.get('company_details', '')),
                clean_text(user_data.get('region', '')),
                user_data.get('role', ''),
                user_data.get('registered_at', '')
            ]
            
            worksheet.update(values=[row_data], range_name=f'A{row_num}:J{row_num}')
            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
            
        except Exception as e:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            row_data = [
                str(user_id),
                clean_text(user_data.get('username', '')),
                clean_text(user_data.get('name', '')),
                clean_text(user_data.get('phone', '')),
                clean_text(user_data.get('email', '')),
                clean_text(user_data.get('inn', '')),
                clean_text(user_data.get('company_details', '')),
                clean_text(user_data.get('region', '')),
                clean_text(user_data.get('role', '')),
                clean_text(user_data.get('registered_at', ''))
            ]
            
            worksheet.append_row(row_data)
            logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    
def sync_batch_to_sheets(self, batch_data):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–∏–∏ –≤ Google Sheets"""
    if not self.spreadsheet:
        logging.warning("‚ö†Ô∏è Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        return
    
    try:
        headers = [
            'batch_id', 'farmer_id', 'farmer_name', 'culture', 'region',
            'volume', 'price', 'humidity', 'impurity', 'quality_class',
            'storage_type', 'readiness_date', 'status', 'created_at'
        ]
        
        worksheet = self.get_or_create_worksheet('Batches', headers)
        if not worksheet:
            return
        
        try:
            cell = worksheet.find(str(batch_data['id']))
            row_num = cell.row
            
            row_data = [
                str(batch_data['id']),
                str(batch_data['farmer_id']),
                clean_text(batch_data.get('farmer_name', '')),
                clean_text(batch_data.get('culture', '')),
                clean_text(batch_data.get('region', '')),
                str(batch_data.get('volume', '')),
                str(batch_data.get('price', '')),
                str(batch_data.get('humidity', '')),
                str(batch_data.get('impurity', '')),
                clean_text(batch_data.get('quality_class', '')),
                clean_text(batch_data.get('storage_type', '')),
                clean_text(batch_data.get('readiness_date', '')),
                batch_data.get('status', ''),
                batch_data.get('created_at', '')
            ]
            
            worksheet.update(values=[row_data], range_name=f'A{row_num}:N{row_num}')
            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è {batch_data['id']}")
            
        except Exception as e:
            # –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
            row_data = [
                str(batch_data['id']),
                str(batch_data['farmer_id']),
                clean_text(batch_data.get('farmer_name', '')),
                clean_text(batch_data.get('culture', '')),
                clean_text(batch_data.get('region', '')),
                str(batch_data.get('volume', '')),
                str(batch_data.get('price', '')),
                str(batch_data.get('humidity', '')),
                str(batch_data.get('impurity', '')),
                clean_text(batch_data.get('quality_class', '')),
                clean_text(batch_data.get('storage_type', '')),
                clean_text(batch_data.get('readiness_date', '')),
                batch_data.get('status', ''),
                batch_data.get('created_at', '')
            ]
            
            worksheet.append_row(row_data)
            logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è {batch_data['id']}")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Ç–∏–∏: {e}")

        
    def sync_pull_to_sheets(self, pull_data):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –≤ Google Sheets"""
        if not self.spreadsheet:
            return
        
        try:
            headers = [
                'pull_id', 'exporter_id', 'exporter_name', 'culture',
                'target_volume', 'current_volume', 'price', 'port',
                'moisture', 'nature', 'impurity', 'weed',
                'documents', 'doc_type', 'status', 'created_at'
            ]
            
            worksheet = self.get_or_create_worksheet('Pulls', headers)
            if not worksheet:
                return
            
            try:
                cell = worksheet.find(str(pull_data['id']))
                row_num = cell.row
                
                row_data = [
                    str(pull_data['id']),
                    str(pull_data['exporter_id']),
                    pull_data.get('exporter_name', ''),
                    pull_data.get('culture', ''),
                    str(pull_data.get('target_volume', '')),
                    str(pull_data.get('current_volume', '')),
                    str(pull_data.get('price', '')),
                    pull_data.get('port', ''),
                    str(pull_data.get('moisture', '')),
                    str(pull_data.get('nature', '')),
                    str(pull_data.get('impurity', '')),
                    str(pull_data.get('weed', '')),
                    pull_data.get('documents', ''),
                    pull_data.get('doc_type', ''),
                    pull_data.get('status', ''),
                    pull_data.get('created_at', '')
                ]
                
                worksheet.update(values=[row_data], range_name=f'A{row_num}:P{row_num}')
                logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω –ø—É–ª {pull_data['id']}")
                
            except Exception as e:
                row_data = [
                    str(pull_data['id']),
                    str(pull_data['exporter_id']),
                    pull_data.get('exporter_name', ''),
                    pull_data.get('culture', ''),
                    str(pull_data.get('target_volume', '')),
                    str(pull_data.get('current_volume', '')),
                    str(pull_data.get('price', '')),
                    pull_data.get('port', ''),
                    str(pull_data.get('moisture', '')),
                    str(pull_data.get('nature', '')),
                    str(pull_data.get('impurity', '')),
                    str(pull_data.get('weed', '')),
                    pull_data.get('documents', ''),
                    pull_data.get('doc_type', ''),
                    pull_data.get('status', ''),
                    pull_data.get('created_at', '')
                ]
                worksheet.append_row(row_data)
                logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É–ª {pull_data['id']}")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—É–ª–∞: {e}")
    
    def delete_batch_from_sheets(self, batch_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –∏–∑ Google Sheets"""
        if not self.spreadsheet:
            return
        
        try:
            worksheet = self.get_or_create_worksheet('Batches', [])
            if not worksheet:
                return
            
            cell = worksheet.find(str(batch_id))
            if cell:
                worksheet.delete_rows(cell.row)
                logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è {batch_id} –∏–∑ Google Sheets")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏ {batch_id}: {e}")
    
    def update_batch_in_sheets(self, batch_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –≤ Google Sheets"""
        self.sync_batch_to_sheets(batch_data)
    
    def update_user_in_sheets(self, user_id, user_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets"""
        self.sync_user_to_sheets(user_id, user_data)
    
    def update_pull_in_sheets(self, pull_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª–∞ –≤ Google Sheets"""
        self.sync_pull_to_sheets(pull_data)
    
    def sync_deal_to_sheets(self, deal_data):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏ –≤ Google Sheets"""
        if not self.spreadsheet:
            return
        
        try:
            headers = [
                'deal_id', 'pull_id', 'exporter_id', 'farmer_ids',
                'logistic_id', 'expeditor_id', 'total_volume', 
                'status', 'created_at', 'completed_at'
            ]
            
            worksheet = self.get_or_create_worksheet('Deals', headers)
            if not worksheet:
                return
            
            farmer_ids_str = ','.join(map(str, deal_data.get('farmer_ids', [])))
            
            try:
                cell = worksheet.find(str(deal_data['id']))
                row_num = cell.row
                
                row_data = [
                    str(deal_data['id']),
                    str(deal_data.get('pull_id', '')),
                    str(deal_data.get('exporter_id', '')),
                    farmer_ids_str,
                    str(deal_data.get('logistic_id', '')),
                    str(deal_data.get('expeditor_id', '')),
                    str(deal_data.get('total_volume', '')),
                    deal_data.get('status', ''),
                    deal_data.get('created_at', ''),
                    deal_data.get('completed_at', '')
                ]
                
                worksheet.update(values=[row_data], range_name=f'A{row_num}:J{row_num}')
                logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ {deal_data['id']}")
                
            except Exception as e:
                row_data = [
                    str(deal_data['id']),
                    str(deal_data.get('pull_id', '')),
                    str(deal_data.get('exporter_id', '')),
                    farmer_ids_str,
                    str(deal_data.get('logistic_id', '')),
                    str(deal_data.get('expeditor_id', '')),
                    str(deal_data.get('total_volume', '')),
                    deal_data.get('status', ''),
                    deal_data.get('created_at', ''),
                    deal_data.get('completed_at', '')
                ]
                worksheet.append_row(row_data)
                logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ {deal_data['id']}")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
    
    def sync_match_to_sheets(self, match_data):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ Google Sheets"""
        if not self.spreadsheet:
            return
        
        try:
            headers = [
                'match_id', 'batch_id', 'pull_id', 'status', 'created_at'
            ]
            
            worksheet = self.get_or_create_worksheet('Matches', headers)
            if not worksheet:
                return
            
            try:
                cell = worksheet.find(str(match_data['id']))
                row_num = cell.row
                
                row_data = [
                    str(match_data['id']),
                    str(match_data.get('batch_id', '')),
                    str(match_data.get('pull_id', '')),
                    match_data.get('status', ''),
                    match_data.get('created_at', '')
                ]
                
                worksheet.update(values=[row_data], range_name=f'A{row_num}:E{row_num}')
 
            except Exception as e:
                row_data = [
                    str(match_data['id']),
                    str(match_data.get('batch_id', '')),
                    str(match_data.get('pull_id', '')),
                    match_data.get('status', ''),
                    match_data.get('created_at', '')
                ]
                worksheet.append_row(row_data)
                logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {match_data['id']}")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {e}")
    
    def export_all_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets"""
        if not self.spreadsheet:
            logging.warning("‚ö†Ô∏è Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
        
        try:
            for user_id, user_data in users.items():
                self.sync_user_to_sheets(user_id, user_data)
            for user_batches in batches.values():
                for batch in user_batches:
                    self.sync_batch_to_sheets(batch)
            for pull_data in pulls.values():
                self.sync_pull_to_sheets(pull_data)
            for deal_data in deals.values():
                self.sync_deal_to_sheets(deal_data)
            for match_data in matches.values():
                self.sync_match_to_sheets(match_data)
            
            logging.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Google Sheets")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

# ====================================================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GOOGLE SHEETS (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)
# ====================================================================
gs = None

async def init_google_sheets():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
    global gs
    try:
        if not GOOGLE_SHEETS_AVAILABLE:
            logging.warning("‚ö†Ô∏è Google Sheets –æ—Ç–∫–ª—é—á—ë–Ω (GOOGLE_SHEETS_AVAILABLE=False)")
            return

        if not os.path.exists(GOOGLE_SHEETS_CREDENTIALS):
            logging.warning(f"‚ö†Ô∏è –§–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω: {GOOGLE_SHEETS_CREDENTIALS}")
            return

        logging.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets Manager...")

        # –°–æ–∑–¥–∞—ë–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å
        loop = asyncio.get_event_loop()
        gs = await loop.run_in_executor(
            None,
            GoogleSheetsManager,
            GOOGLE_SHEETS_CREDENTIALS,
            SPREADSHEET_ID
        )

        if gs and gs.spreadsheet:
            logging.info("‚úÖ Google Sheets Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logging.warning("‚ö†Ô∏è Google Sheets Manager —Å–æ–∑–¥–∞–Ω –Ω–æ spreadsheet –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            gs = None

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        gs = None


# ============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô –õ–û–ì–ò–°–¢–û–í (–§–ï–†–ú–ï–†)
# ============================================================================

@dp.message_handler(lambda message: message.text == "üöö –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–æ–≤", state='*')
async def farmer_view_logistics_offers(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ª–æ–≥–∏—Å—Ç–æ–≤ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    
    if user_id not in users or users[user_id].get('role') != 'farmer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä–∞–º")
        return
    
    if not logistics_offers:
        await message.answer(
            "üì≠ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–æ–≤ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>\n\n"
            "–ö–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Ö –∑–¥–µ—Å—å —É–≤–∏–¥–µ—Ç—å.",
            parse_mode='HTML'
        )
        return
    
    active_offers = [offer for offer in logistics_offers.values() if offer.get('status') == 'active']
    
    if not active_offers:
        await message.answer(
            "üì≠ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ—Ç</b>\n\n"
            "–í—Å–µ —Ç–µ–∫—É—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã.",
            parse_mode='HTML'
        )
        return
    
    text = "üöö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–æ–≤</b>\n\n"
    text += f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(active_offers)}\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for offer in active_offers[:10]:
        logist_name = users.get(offer['logist_id'], {}).get('name', '–õ–æ–≥–∏—Å—Ç')
        
        button_text = (
            f"üöõ {offer['transport_type']} | "
            f"{offer['route']} | "
            f"{offer['price_per_ton']:,.0f} ‚ÇΩ/—Ç"
        )
        
        keyboard.add(
            InlineKeyboardButton(
                button_text,
                callback_data=f"farmer_view_offer:{offer['id']}"
            )
        )
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')


@dp.callback_query_handler(lambda c: c.data.startswith('farmer_view_offer:'), state='*')
async def farmer_view_offer_details(callback: types.CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–∞"""
    await state.finish()
    
    try:
        offer_id = parse_callback_id(callback.data)
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if offer_id not in logistics_offers:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    offer = logistics_offers[offer_id]
    logist_id = offer['logist_id']
    
    if logist_id not in users:
        await callback.answer("‚ùå –õ–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    logist = users[logist_id]
    
    text = (
        f"üöö <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id}</b>\n\n"
        f"üë§ –õ–æ–≥–∏—Å—Ç: {logist.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {logist.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìß Email: {logist.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {offer['transport_type']}\n"
        f"üìç –ú–∞—Ä—à—Ä—É—Ç: {offer['route']}\n"
        f"üí∞ –¶–µ–Ω–∞: {offer['price_per_ton']:,.0f} ‚ÇΩ/—Ç\n"
        f"‚è± –°—Ä–æ–∫–∏: {offer['delivery_days']} –¥–Ω–µ–π\n\n"
    )
    
    if offer.get('additional_info'):
        text += f"‚ÑπÔ∏è –î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n{offer['additional_info']}\n\n"
    
    text += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {offer['created_at']}"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(
            "‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
            callback_data=f"farmer_accept_offer:{offer_id}"
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data="farmer_back_to_offers"
        )
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('farmer_accept_offer:'), state='*')
async def farmer_accept_logistics_offer(callback: types.CallbackQuery, state: FSMContext):
    """–§–µ—Ä–º–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    try:
        offer_id = parse_callback_id(callback.data)
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if offer_id not in logistics_offers:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    offer = logistics_offers[offer_id]
    
    if offer.get('status') != 'active':
        await callback.answer("‚ùå –≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ", show_alert=True)
        return
    
    offer['status'] = 'accepted_by_farmer'
    offer['farmer_id'] = user_id
    offer['accepted_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    save_logistics_to_pickle()
    
    await callback.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!", show_alert=True)
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id} –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
        f"–õ–æ–≥–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏.\n\n"
        f"üì± –ö–æ–Ω—Ç–∞–∫—Ç –ª–æ–≥–∏—Å—Ç–∞:\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {users[offer['logist_id']].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"Email: {users[offer['logist_id']].get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
        parse_mode='HTML'
    )
    
    try:
        await bot.send_message(
            offer['logist_id'],
            f"üéâ <b>–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id} –ø—Ä–∏–Ω—è—Ç–æ —Ñ–µ—Ä–º–µ—Ä–æ–º!</b>\n\n"
            f"üë§ –§–µ—Ä–º–µ—Ä: {users[user_id].get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {users[user_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"üìß Email: {users[user_id].get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ñ–µ—Ä–º–µ—Ä–æ–º –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞: {e}")


@dp.callback_query_handler(lambda c: c.data == 'farmer_back_to_offers', state='*')
async def farmer_back_to_offers_list(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    await farmer_view_logistics_offers(callback.message, FSMContext(dp.storage, callback.from_user.id, callback.from_user.id))
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('view_deal:'), state='*')
async def view_deal_details(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–∫–∏"""
    deal_id = parse_callback_id(callback.data)
    
    if deal_id not in deals:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    deal = deals[deal_id]
    text = f"üìã <b>–°–¥–µ–ª–∫–∞ #{deal_id}</b>\n\n"
    
    text += f"üìä –°—Ç–∞—Ç—É—Å: {DEAL_STATUSES.get(deal.get('status', 'pending'), deal.get('status'))}\n"
    
    if deal.get('total_volume'):
        text += f"üì¶ –û–±—ä—ë–º: {deal['total_volume']} —Ç\n"
    
    if deal.get('exporter_id'):
        exporter_name = users.get(deal['exporter_id'], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        text += f"üì¶ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä: {exporter_name}\n"
    
    if deal.get('farmer_ids'):
        farmers_count = len(deal['farmer_ids'])
        text += f"üåæ –§–µ—Ä–º–µ—Ä–æ–≤: {farmers_count}\n"
    
    if deal.get('logistic_id'):
        logistic_name = users.get(deal['logistic_id'], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        text += f"üöö –õ–æ–≥–∏—Å—Ç: {logistic_name}\n"
    
    if deal.get('expeditor_id'):
        expeditor_name = users.get(deal['expeditor_id'], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        text += f"üöõ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä: {expeditor_name}\n"
    
    if deal.get('created_at'):
        text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {deal['created_at']}\n"
    
    if deal.get('completed_at'):
        text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {deal['completed_at']}\n"
    
    keyboard = deal_actions_keyboard(deal_id)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.message_handler(lambda m: m.text == "üîç –ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤", state='*')
async def search_exporters(message: types.Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'farmer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä–∞–º")
        return
    
    if user_id not in batches or not batches[user_id]:
        await message.answer(
            "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä—Ç–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä—Ç–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é'"
        )
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for batch in batches[user_id]:
        if batch.get('status') in ['active', '–ê–∫—Ç–∏–≤–Ω–∞', '–∞–∫—Ç–∏–≤–Ω–∞', '', None]:
            button_text = f"üåæ {batch['culture']} - {batch['volume']} —Ç"
            keyboard.add(
                InlineKeyboardButton(button_text, callback_data=f"findexporters:{batch['id']}")
            )
    
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@dp.callback_query_handler(lambda c: c.data.startswith('findexporters:'), state='*')
async def process_find_exporters(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤"""
    batch_id = int(callback.data.split(':')[1])
    user_id = callback.from_user.id
    
    await callback.answer("üîç –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤...")
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä—Ç–∏—é
    batch = None
    farmer_id = None
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–∞—Ä—Ç–∏—é —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, user_batches in batches.items():
        for b in user_batches:
            if b['id'] == batch_id:
                batch = b
                farmer_id = uid
                break
        if batch:
            break
    
    if not batch:
        await callback.message.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—É–ª—ã —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤
    matching_pulls = []
    
    for exporter_id, exporter_pulls_list in pulls.items():
        for pull in exporter_pulls_list:
            if pull.get('status') != 'open':
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—É–ª—å—Ç—É—Ä—ã
            if pull.get('culture') != batch.get('culture'):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—É (–ø—É–ª–ª –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Ü–µ–Ω—É >= —Ü–µ–Ω–µ —Ñ–µ—Ä–º–µ—Ä–∞)
            if pull.get('price', 0) < batch.get('price', 0):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä—ë–º (–≤ –ø—É–ª–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ—Å—Ç–æ)
            required = pull.get('volume', 0)
            current = pull.get('current_volume', 0)
            remaining = required - current
            
            if remaining >= batch.get('volume', 0):
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–µ
                exporter = users.get(exporter_id, {})
                matching_pulls.append({
                    'pull': pull,
                    'exporter': exporter,
                    'exporter_id': exporter_id,
                    'remaining_volume': remaining
                })
    
    if not matching_pulls:
        await callback.message.answer(
            f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
            f"üåæ {batch['culture']} - {batch['volume']} —Ç\n"
            f"üí∞ {batch['price']:,.0f} ‚ÇΩ/—Ç\n\n"
            f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            f"‚Ä¢ –°–Ω–∏–∑–∏—Ç—å —Ü–µ–Ω—É\n"
            f"‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç—å –ø–∞—Ä—Ç–∏—é –Ω–∞ –º–µ–Ω—å—à–∏–µ –æ–±—ä—ë–º—ã\n"
            f"‚Ä¢ –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—É–ª–æ–≤",
            parse_mode='HTML'
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    text = (
        f"üîç <b>–ù–∞–π–¥–µ–Ω–æ {len(matching_pulls)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤</b>\n\n"
        f"–î–ª—è –ø–∞—Ä—Ç–∏–∏:\n"
        f"üåæ {batch['culture']} - {batch['volume']} —Ç\n"
        f"üí∞ {batch['price']:,.0f} ‚ÇΩ/—Ç\n"
        f"üìç {batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"<b>–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
    )
    
    for idx, match in enumerate(matching_pulls[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10
        pull = match['pull']
        exporter = match['exporter']
        
        text += (
            f"{idx}. <b>–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä:</b> {exporter.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"   üí∞ –¶–µ–Ω–∞: {pull.get('price', 0):,.0f} ‚ÇΩ/—Ç\n"
            f"   üì¶ –ù—É–∂–Ω–æ: {pull.get('volume', 0)} —Ç (—Å–≤–æ–±–æ–¥–Ω–æ: {match['remaining_volume']} —Ç)\n"
            f"   üìç –ü–æ—Ä—Ç: {pull.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        )
        
        if exporter.get('phone'):
            text += f"   üìû {exporter['phone']}\n"
        
        text += "\n"
    
    if len(matching_pulls) > 10:
        text += f"\n... –∏ –µ—â—ë {len(matching_pulls) - 10} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
    
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for idx, match in enumerate(matching_pulls[:5], 1):  # –ü–µ—Ä–≤—ã–µ 5 –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        exporter_name = match['exporter'].get('company_name', f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä {match['exporter_id']}")
        keyboard.add(
            InlineKeyboardButton(
                f"üì© –°–≤—è–∑–∞—Ç—å—Å—è —Å {exporter_name[:20]}",
                callback_data=f"contact_exporter:{match['exporter_id']}"
            )
        )
    
    keyboard.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back_to_my_batches')
    )
    
    await callback.message.answer(text, reply_markup=keyboard, parse_mode='HTML')


@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é", state='*')
async def add_batch_start(message: types.Message, state: FSMContext):
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'farmer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä–∞–º")
        return
    await AddBatch.culture.set()  #–í–ê–ñ–ù–û!

    await message.answer(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 9\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:",
        reply_markup=culture_keyboard(),
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data.startswith('search_crop_'), state='*')
async def search_by_culture_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–∏–π –ø–æ –∫—É–ª—å—Ç—É—Ä–µ - –ò–°–ü–†–ê–í–õ–ï–ù–û"""
    await state.finish()
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—É–ª—å—Ç—É—Ä—É –∏–∑ callback_data
        culture = callback.data.replace('search_crop_', '').replace('search_selectcrop_', '')
        logging.info(f"üîç –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π –ø–æ –∫—É–ª—å—Ç—É—Ä–µ: {culture}")
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É–ª—å—Ç—É—Ä—ã", show_alert=True)
        return
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
    found_batches = []  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û –ù–ê –°–ü–ò–°–û–ö!
    
    for farmer_id in batches:
        for batch in batches[farmer_id]:
            if batch.get('culture') == culture and batch.get('status') in ['active', 'available']:
                batch['farmer_id'] = farmer_id  # –î–æ–±–∞–≤–ª—è–µ–º farmer_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                found_batches.append(batch)
    
    if not found_batches:
        # –ü–∞—Ä—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_search"))
        await callback.message.edit_text(
            f"‚ùå <b>–ü–∞—Ä—Ç–∏–π —Å –∫—É–ª—å—Ç—É—Ä–æ–π ¬´{culture}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫—É–ª—å—Ç—É—Ä—É.",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await callback.answer()
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (–æ—Ç –º–µ–Ω—å—à–µ–π –∫ –±–æ–ª—å—à–µ–π)
    found_batches_sorted = sorted(found_batches, key=lambda x: x.get('price', 0))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    text = f"üîç <b>–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Ç–∏–π: {len(found_batches)}</b>\n"
    text += f"üì¶ –ö—É–ª—å—Ç—É—Ä–∞: <b>{culture}</b>\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for idx, batch in enumerate(found_batches_sorted[:10], 1):  # –ú–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        volume = batch.get('volume', 0)
        price = batch.get('price', 0)
        region = batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')
        batch_id = batch.get('id', 'N/A')
        farmer_id = batch.get('farmer_id')
        
        text += f"{idx}. üì¶ <b>{volume:.1f} —Ç</b> | "
        text += f"üí∞ {price:,.0f} ‚ÇΩ/—Ç | "
        text += f"üìç {region}\n"
        
        keyboard.add(
            InlineKeyboardButton(
                f"üëÅ –ü–∞—Ä—Ç–∏—è #{batch_id} - {volume:.1f} —Ç",
                callback_data=f"viewbatch_{batch_id}_{farmer_id}"
            )
        )
    
    if len(found_batches) > 10:
        text += f"\n<i>... –∏ –µ—â—ë {len(found_batches) - 10} –ø–∞—Ä—Ç–∏–π</i>"
    
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="back_to_search"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(found_batches)}")

# ====================================================================
# –ö–ê–†–¢–û–ß–ö–ò –õ–û–ì–ò–°–¢–û–í –ò –≠–ö–°–ü–ï–î–ò–¢–û–†–û–í
# ====================================================================
# –ü–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞ searchbyculture –¥–æ–±–∞–≤—å—Ç–µ:

@dp.callback_query_handler(lambda c: c.data.startswith('culture:'), state=SearchByCulture.waiting_culture)
async def search_by_culture_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É–ª—å—Ç—É—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    global batches
    await state.finish()
    
    try:
        culture = callback.data.replace('search_selectcrop_', '')
        logging.info(f"üîç –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π –ø–æ –∫—É–ª—å—Ç—É—Ä–µ: {culture}")
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É–ª—å—Ç—É—Ä—ã", show_alert=True)
        return
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
    found_batches = []   
    for farmer_id in batches:
        for batch in batches[farmer_id]:
            if batch.get('culture') == culture and batch.get('status') in ['active', 'available']:
                batch_copy = batch.copy()
                batch_copy['farmer_id'] = farmer_id
                found_batches.append(batch_copy)
    
    if found_batches:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
        found_batches_sorted = sorted(found_batches, key=lambda x: x.get('price', 0))
        
        text = f"üîç <b>–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Ç–∏–π:</b> {len(found_batches)}\n"
        text += f"<b>–ö—É–ª—å—Ç—É—Ä–∞:</b> {culture}\n\n"
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –ø–∞—Ä—Ç–∏–π
        for i, batch in enumerate(found_batches_sorted[:10], 1):
            volume = batch.get('volume', 0)
            price = batch.get('price', 0)
            region = batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')
            
            text += f"{i}. <b>{volume:.1f} —Ç</b> - {price:,.0f} ‚ÇΩ/—Ç\n"
            text += f"   üìç {region}\n\n"
            
            keyboard.add(InlineKeyboardButton(
                f"–ü—Ä–æ—Å–º–æ—Ç—Ä: {volume:.1f} —Ç - {price:,.0f} ‚ÇΩ/—Ç",
                callback_data=f"viewbatch_{batch['id']}"
            ))
        
        if len(found_batches) > 10:
            text += f"\n...–∏ –µ—â—ë {len(found_batches) - 10} –ø–∞—Ä—Ç–∏–π"
        
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É", callback_data="startsearch"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_batches)} –ø–∞—Ä—Ç–∏–π –ø–æ –∫—É–ª—å—Ç—É—Ä–µ {culture}")
    else:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="startsearch"))
        
        await callback.message.edit_text(
            f"‚ùå –ü–∞—Ä—Ç–∏–π —Å –∫—É–ª—å—Ç—É—Ä–æ–π <b>{culture}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫—É–ª—å—Ç—É—Ä—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ø–∞—Ä—Ç–∏—é.",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        logging.info(f"‚ùå –ü–∞—Ä—Ç–∏–π –ø–æ –∫—É–ª—å—Ç—É—Ä–µ {culture} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    await callback.answer()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã)
@dp.callback_query_handler(lambda c: c.data.startswith('culture:'), state=AddBatch.culture)
async def add_batch_culture(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫—É–ª—å—Ç—É—Ä—ã –¥–ª—è –ø–∞—Ä—Ç–∏–∏"""
    try:
        culture = callback.data.split(':', 1)[1]
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}, data: {callback.data}")
        return
    
    await state.update_data(culture=culture)
    
    await callback.message.edit_text(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
        "–®–∞–≥ 2 –∏–∑ 9\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
        reply_markup=region_keyboard(),
        parse_mode='HTML'
    )
    await AddBatch.region.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('region:'), state=AddBatch.region)
async def add_batch_region(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –ø–∞—Ä—Ç–∏–∏"""
    region = callback.data.split(':', 1)[1]
    await state.update_data(region=region)
    
    await callback.message.edit_text(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
        "–®–∞–≥ 3 –∏–∑ 9\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –ø–∞—Ä—Ç–∏–∏ (–≤ —Ç–æ–Ω–Ω–∞—Ö):",
        parse_mode='HTML'
    )
    await AddBatch.volume.set()
    await callback.answer()

@dp.message_handler(state=AddBatch.volume)
async def add_batch_volume(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –æ–±—ä—ë–º–∞ –ø–∞—Ä—Ç–∏–∏"""
    try:
        volume = float(message.text.strip().replace(',', '.'))
        if volume <= 0:
            raise ValueError
        
        await state.update_data(volume=volume)
        
        await message.answer(
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
            "–®–∞–≥ 4 –∏–∑ 9\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (‚ÇΩ/—Ç–æ–Ω–Ω–∞):",
            parse_mode='HTML'
        )
        await AddBatch.price.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")

@dp.message_handler(state=AddBatch.price)
async def add_batch_price(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ —Ü–µ–Ω—ã –ø–∞—Ä—Ç–∏–∏"""
    try:
        price = float(message.text.strip().replace(',', '.'))
        if price <= 0:
            raise ValueError
        
        await state.update_data(price=price)
        
        await message.answer(
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
            "–®–∞–≥ 5 –∏–∑ 9\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å (%):",
            parse_mode='HTML'
        )
        await AddBatch.humidity.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")

@dp.message_handler(state=AddBatch.humidity)
async def add_batch_humidity(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–∏–∏"""
    try:
        humidity = float(message.text.strip().replace(',', '.'))
        if not 0 <= humidity <= 100:
            raise ValueError
        
        await state.update_data(humidity=humidity)
        
        await message.answer(
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
            "–®–∞–≥ 6 –∏–∑ 9\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ—Ä–Ω–æ—Å—Ç—å (%):",
            parse_mode='HTML'
        )
        await AddBatch.impurity.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:")

@dp.message_handler(state=AddBatch.impurity)
async def add_batch_impurity(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ —Å–æ—Ä–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–∏–∏"""
    try:
        impurity = float(message.text.strip().replace(',', '.'))
        if not 0 <= impurity <= 100:
            raise ValueError
        
        await state.update_data(impurity=impurity)
        data = await state.get_data()
        quality_class = determine_quality_class(data['humidity'], impurity)
        await state.update_data(quality_class=quality_class)
        
        await message.answer(
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
            "–®–∞–≥ 7 –∏–∑ 9\n\n"
            f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞: <b>{quality_class}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=storage_type_keyboard(),
            parse_mode='HTML'
        )
        await AddBatch.storage_type.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:")

@dp.callback_query_handler(lambda c: c.data.startswith('storage:'), state=AddBatch.storage_type)
async def add_batch_storage_type(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    storage_type = callback.data.split(':', 1)[1]
    await state.update_data(storage_type=storage_type)
    
    await callback.message.edit_text(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
        "–®–∞–≥ 8 –∏–∑ 9\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ '—Å–µ–π—á–∞—Å' –µ—Å–ª–∏ –≥–æ—Ç–æ–≤–∞:",
        parse_mode='HTML'
    )
    await AddBatch.readiness_date.set()
    await callback.answer()

@dp.message_handler(state=AddBatch.readiness_date)
async def add_batch_readiness_date(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏"""
    global batch_counter
    
    readiness_date = message.text.strip()

    if readiness_date.lower() == '—Å–µ–π—á–∞—Å':
        readiness_date = datetime.now().strftime('%d.%m.%Y')
    elif not validate_date(readiness_date):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '—Å–µ–π—á–∞—Å':")
        return
    
    user_id = message.from_user.id
    data = await state.get_data()
    
    # –°–æ–∑–¥–∞—ë–º –ø–∞—Ä—Ç–∏—é
    batch_counter += 1
    batch = {
        'id': batch_counter,
        'farmer_id': user_id,
        'farmer_name': users[user_id].get('name', ''),
        'culture': data['culture'],
        'region': data['region'],
        'volume': data['volume'],
        'price': data['price'],
        'humidity': data['humidity'],
        'impurity': data['impurity'],
        'quality_class': data['quality_class'],
        'storage_type': data['storage_type'],
        'readiness_date': readiness_date,
        'status': '–ê–∫—Ç–∏–≤–Ω–∞',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'files': [],
        'matches': []
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Ç–∏—é –≤ –±–∞–∑—É
    if user_id not in batches:
        batches[user_id] = []
    batches[user_id].append(batch)
    
    save_batches_to_pickle()
    
    # ‚úÖ –ê–í–¢–û–ü–†–ò–°–û–ï–î–ò–ù–ï–ù–ò–ï –ö –ü–£–õ–£ (–µ—Å–ª–∏ –ø–∞—Ä—Ç–∏—è —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å –¥–ª—è –ø—É–ª–∞)
    if 'create_batch_for_pull_id' in data:
        pull_id = data['create_batch_for_pull_id']
        
        if pull_id in pulls:
            pull = pulls[pull_id]
            available = pull['target_volume'] - pull['current_volume']
            
            if batch['volume'] <= available and batch['culture'] == pull['culture']:
                if pull_id not in pullparticipants:
                    pullparticipants[pull_id] = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—â—ë –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å
                already_joined = any(p['batch_id'] == batch['id'] for p in pullparticipants[pull_id])
                
                if not already_joined:
                    participant = {
                        'farmer_id': user_id,
                        'farmer_name': users[user_id].get('name', ''),
                        'batch_id': batch['id'],
                        'volume': batch['volume'],
                        'joined_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                    }
                    pullparticipants[pull_id].append(participant)
                    pull['current_volume'] += batch['volume']
                    
                    batch['status'] = '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞'
                    
                    save_pulls_to_pickle()
                    save_batches_to_pickle()
                    
                    logging.info(f"‚úÖ –ü–∞—Ä—Ç–∏—è #{batch['id']} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∞ –∫ –ø—É–ª—É #{pull_id}")
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É –æ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏
                    try:
                        # ‚úÖ –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –≠–ö–°–ü–û–†–¢–Å–†–ê
                        if 'exporter_id' in pull and pull['exporter_id']:
                            farmer_card = format_farmer_card(user_id, batch['id'])
                            
                            await bot.send_message(
                                pull['exporter_id'],
                                f"üéâ <b>–ù–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∞ –∫ –ø—É–ª—É #{pull_id}!</b>\n\n{farmer_card}",
                                parse_mode='HTML'
                            )
                            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É {pull['exporter_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                        else:
                            logging.warning(f"‚ö†Ô∏è –í –ø—É–ª–µ {pull_id} –Ω–µ—Ç exporter_id")
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É: {e}")
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º–µ—Ä—É –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
                    await message.answer(
                        f"‚úÖ <b>–ü–∞—Ä—Ç–∏—è #{batch['id']} —Å–æ–∑–¥–∞–Ω–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∞ –∫ –ø—É–ª—É #{pull_id}!</b>\n\n"
                        f"üåæ {batch['culture']}\n"
                        f"üì¶ –û–±—ä—ë–º: {batch['volume']} —Ç\n"
                        f"üí∞ –¶–µ–Ω–∞: {batch['price']:,.0f} ‚ÇΩ/—Ç\n\n"
                        f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
                        parse_mode='HTML',
                        reply_markup=get_role_keyboard('farmer')
                    )
                    
                    await state.finish()
                    return

    # ‚úÖ –û–ë–´–ß–ù–´–ô –§–õ–û–£ (–ø–∞—Ä—Ç–∏—è –ù–ï –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—É–ª–∞)
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
    if gs and gs.spreadsheet:
        try:
            gs.sync_batch_to_sheets(batch)
            farmer_name = users[user_id].get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            await publish_batch_to_channel(batch, farmer_name)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—É–ª—ã
    matching_pulls = await find_matching_exporters(batch)
    
    keyboard = get_role_keyboard('farmer')
    
    message_text = (
        f"‚úÖ <b>–ü–∞—Ä—Ç–∏—è #{batch['id']} –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {batch['culture']}\n"
        f"üìç –†–µ–≥–∏–æ–Ω: {batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üì¶ –û–±—ä—ë–º: {batch['volume']} —Ç\n"
        f"üí∞ –¶–µ–Ω–∞: {batch['price']:,.0f} ‚ÇΩ/—Ç\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {batch.get('humidity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}%\n"
        f"üåæ –°–æ—Ä–Ω–æ—Å—Ç—å: {batch.get('impurity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}%\n"
        f"‚≠ê –ö–ª–∞—Å—Å: {batch.get('quality_class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üè≠ –•—Ä–∞–Ω–µ–Ω–∏–µ: {batch.get('storage_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {batch.get('readiness_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
    )
    
    if matching_pulls:
        message_text += f"\n\nüéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–ª–æ–≤: {len(matching_pulls)}"
        
        # ‚úÖ –°–û–ó–î–ê–ï–ú match-–æ–±—ä–µ–∫—Ç—ã –ò –°–û–•–†–ê–ù–Ø–ï–ú –í matches
        match_objs = []
        for pull_dict in matching_pulls:
            pull_id = pull_dict['pull_id']
            
            # –°–æ–∑–¥–∞—ë–º match-–æ–±—ä–µ–∫—Ç –¥–ª—è notify_match()
            match_obj = {
                'pull_id': pull_id,
                'exporter_company': pull_dict.get('exporter_company', ''),
                'exporter_name': pull_dict.get('exporter_name', ''),
                'price': pull_dict.get('price', 0),
                'port': pull_dict.get('port', ''),
                'current_volume': pull_dict.get('current_volume', 0),
                'target_volume': pull_dict.get('target_volume', 0)
            }
            match_objs.append(match_obj)
            
            # ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –í matches
            match_id = len(matches) + 1
            matches[match_id] = {
                'id': match_id,
                'batch_id': batch['id'],
                'pull_id': pull_id,
                'status': 'active',
                'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            }
        
        await asyncio.sleep(0.5)
        await notify_match(user_id, batch, match_objs)
    
    await message.answer(message_text, reply_markup=keyboard, parse_mode='HTML')
    await state.finish()


@dp.callback_query_handler(lambda c: c.data.startswith('view_matches:'), state='*')


async def view_batch_matches(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Ç–∏–∏"""
    batch_id = parse_callback_id(callback.data)  
    user_id = callback.from_user.id
    
    batch = None
    farmer_id = None
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–∞—Ä—Ç–∏—é —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, user_batches in batches.items():
        for b in user_batches:
            if b['id'] == batch_id:
                batch = b
                farmer_id = uid
                break
        if batch:
            break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    batch_matches = []
    for match in matches.values():
        if (match['batch_id'] == batch_id and 
            match['status'] == 'active'):
            batch_matches.append(match)
    
    if not batch_matches:
        await callback.answer("ü§∑‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    text = f"üéØ <b>–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
    text += f"üåæ {batch['culture']} ‚Ä¢ {batch['volume']} —Ç ‚Ä¢ {batch['price']:,.0f} ‚ÇΩ/—Ç\n\n"
    
    for i, match in enumerate(batch_matches[:5], 1):
        pull_id = match['pull_id']
        if pull_id in pulls:
            pull = pulls[pull_id]
            progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
            
            text += f"{i}. <b>–ü—É–ª–ª #{pull_id}</b>\n"
            text += f"   üì¶ –ù—É–∂–Ω–æ: {pull['target_volume']} —Ç ({progress:.0f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)\n"
            text += f"   üí∞ –¶–µ–Ω–∞: ${pull['price']}/—Ç (~{pull['price'] * 75:,.0f} ‚ÇΩ/—Ç)\n"
            text += f"   üö¢ –ü–æ—Ä—Ç: {pull['port']}\n"
            text += f"   üë§ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä: {pull['exporter_name']}\n\n"
    
    if len(batch_matches) > 5:
        text += f"<i>... –∏ –µ—â—ë {len(batch_matches) - 5} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</i>\n\n"
    
    text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    
    await callback.message.answer(text, parse_mode='HTML')
    await callback.answer()

@dp.message_handler(lambda m: m.text == "üîß –ú–æ–∏ –ø–∞—Ä—Ç–∏–∏", state='*')
async def view_my_batches(message: types.Message, state: FSMContext):
    global batches
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'farmer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä–∞–º")
        return
    
    if user_id not in batches or not batches[user_id]:
        await message.answer(
            "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π."
        )
        return
    
    user_batches = batches[user_id]
    active_batches = [b for b in user_batches if b.get('status') == '–ê–∫—Ç–∏–≤–Ω–∞']
    other_batches = [b for b in user_batches if b.get('status') != '–ê–∫—Ç–∏–≤–Ω–∞']
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for batch in active_batches:
        has_matches = any(m['batch_id'] == batch['id'] and m['status'] == 'active' 
                         for m in matches.values())
        match_emoji = "üéØ " if has_matches else ""
        
        button_text = (
            f"{match_emoji}‚úÖ {batch['culture']} - {batch['volume']} —Ç "
            f"({batch['price']:,.0f} ‚ÇΩ/—Ç)"
        )
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"viewbatch_{batch['id']}")
        )
    
    for batch in other_batches:
        status_emoji = {
            '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞': 'üîí',
            '–ü—Ä–æ–¥–∞–Ω–∞': 'üí∞',
            '–°–Ω—è—Ç–∞ —Å –ø—Ä–æ–¥–∞–∂–∏': '‚ùå'
        }.get(batch.get('status', '–ê–∫—Ç–∏–≤–Ω–∞'), 'üì¶')
        
        button_text = (
            f"{status_emoji} {batch['culture']} - {batch['volume']} —Ç "
            f"({batch['price']:,.0f} ‚ÇΩ/—Ç)"
        )
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"viewbatch_{batch['id']}")
        )
    
    keyboard.add(
        InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤", callback_data="auto_match_all")
    )
    
    await message.answer(
        f"üì¶ <b>–í–∞—à–∏ –ø–∞—Ä—Ç–∏–∏</b> ({len(batches)} —à—Ç.)\n\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: {len(active_batches)}\n"
        f"üéØ –° —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏: {len([b for b in active_batches if any(m['batch_id'] == b['id'] and m['status'] == 'active' for m in matches.values())])}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä—Ç–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
@dp.message_handler(lambda m: m.text == "üéØ –ü—É–ª—ã", state='*')
async def view_pools_menu(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—É–ª–æ–≤ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'farmer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä–∞–º")
        return
    
    open_pulls = [pull for pull in pulls.values() if pull.get('status') == '–û—Ç–∫—Ä—ã—Ç']
    
    if not open_pulls:
        await message.answer(
            "üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É–ª—ã</b>\n\n"
            "–°–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—É–ª–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è.\n"
            "–ü—É–ª—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º–∏ –¥–ª—è —Å–±–æ—Ä–∞ –ø–∞—Ä—Ç–∏–π –∑–µ—Ä–Ω–∞.",
            parse_mode='HTML'
        )
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for pull in open_pulls[:10]:
        progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
        button_text = f"üåæ {pull['culture']} - {pull['target_volume']} —Ç ({progress:.0f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)"
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"viewpull:{pull['id']}")  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û!
        )
    
    await message.answer(
        f"üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É–ª—ã</b> ({len(open_pulls)} —à—Ç.)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@dp.message_handler(state=JoinPullStatesGroup.volume)
async def join_pull_volume(message: types.Message, state: FSMContext):
    try:
        volume = float(message.text.strip().replace(",", ".").replace(" ", ""))
        if volume <= 0:
            raise ValueError
        
        data = await state.get_data()
        pull_id = data['pull_id']
        batch_id = data['batch_id']
        user_id = message.from_user.id
        
        pull = pulls.get(pull_id)
        if not pull:
            await message.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.finish()
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        available = pull['target_volume'] - pull.get('current_volume', 0)
        
        if volume > available:
            await message.answer(
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ–±—ä—ë–º!\n"
                f"–î–æ—Å—Ç—É–ø–Ω–æ: {available:,.0f} —Ç\n"
                f"–í—ã —É–∫–∞–∑–∞–ª–∏: {volume:,.0f} —Ç"
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if 'participants' not in pull:
            pull['participants'] = []
        
        pull['participants'].append({
            'farmer_id': user_id,
            'batch_id': batch_id,
            'volume': volume,
            'joined_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä—ë–º
        pull['current_volume'] = pull.get('current_volume', 0) + volume
        save_pulls_to_pickle()
        
        # ‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –ü–†–û–í–ï–†–ö–ê - –î–û–ë–ê–í–ò–¢–¨ –≠–¢–£ –°–¢–†–û–ö–£!
        is_full = check_and_close_pull_if_full(pull_id)
        
        await state.finish()
        
        if is_full:
            # –ü—É–ª –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100%
            await message.answer(
                f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                f"–í–∞—à–∞ –ø–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: {volume:,.0f} —Ç\n\n"
                f"‚úÖ <b>–ü—É–ª #{pull_id} –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ 100%!</b>\n\n"
                f"–ü—É–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç –∏ —Å–æ–∑–¥–∞–Ω–∞ —Å–¥–µ–ª–∫–∞.\n"
                f"–î–µ—Ç–∞–ª–∏ —Å–¥–µ–ª–∫–∏ –ø—Ä–∏–¥—É—Ç –æ—Ç–¥–µ–ª—å–Ω–æ.",
                parse_mode='HTML',
                reply_markup=farmer_keyboard()
            )
        else:
            # –û–±—ã—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            fill_percent = (pull['current_volume'] / pull['target_volume']) * 100
            remaining = pull['target_volume'] - pull['current_volume']
            
            await message.answer(
                f"‚úÖ <b>–ü–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—É–ª!</b>\n\n"
                f"üì¶ –í–∞—à –æ–±—ä–µ–º: {volume:,.0f} —Ç\n"
                f"üíµ –¶–µ–Ω–∞: ${pull['price']:,.0f}/—Ç\n"
                f"üí∞ –í–∞—à–∞ —Å—É–º–º–∞: ${volume * pull['price']:,.0f}\n\n"
                f"üìä <b>–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—É–ª–∞:</b>\n"
                f"{pull['current_volume']:,.0f} / {pull['target_volume']:,.0f} —Ç ({fill_percent:.1f}%)\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å: {remaining:,.0f} —Ç\n\n"
                f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø—É–ª –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω.",
                parse_mode='HTML',
                reply_markup=farmer_keyboard()
            )
        
        logging.info(f"Batch {batch_id} ‚Üí Pull {pull_id}, volume: {volume}, full: {is_full}")
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä—ë–º. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")


@dp.message_handler(lambda m: m.text == "üöö –ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É", state='*')
async def create_shipping_request(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'exporter':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º")
        return
    
    user_pulls = [p for p in pulls.values() if p['exporter_id'] == user_id and p.get('status') == '–û—Ç–∫—Ä—ã—Ç']
    
    if not user_pulls:
        await message.answer(
            "üöö <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—É–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É.\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—É–ª —á–µ—Ä–µ–∑ –º–µ–Ω—é '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—É–ª'"
        )
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for pull in user_pulls:
        button_text = f"üåæ {pull['culture']} - {pull['target_volume']} —Ç ‚Üí {pull['port']}"
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"create_shipping:{pull['id']}")
        )
    
    await message.answer(
        "üöö <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∞:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
@dp.callback_query_handler(lambda c: c.data == 'refresh_prices', state='*')
async def refresh_prices(callback: types.CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ)"""
    await state.finish()

    prices_msg = format_prices_message()
    
    try:
        await callback.message.edit_text(prices_msg, parse_mode='HTML')
        await callback.answer("‚úÖ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    except MessageNotModified:
        await callback.answer("‚ÑπÔ∏è –¶–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)

@dp.callback_query_handler(lambda c: c.data == "refresh_news", state='*')
async def refresh_news(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏...")
    await update_news_cache()
    
    news_msg = format_news_message()
    await callback.message.edit_text(
        news_msg, 
        parse_mode='HTML',
        disable_web_page_preview=True
    )

@dp.callback_query_handler(lambda c: c.data in ["view_analytics", "view_grain_news", "view_export_news"], state='*')
@dp.callback_query_handler(lambda c: c.data == "auto_match_all", state='*')
async def auto_match_all_batches(callback: types.CallbackQuery):
    """–ê–≤—Ç–æ–ø–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π"""
    user_id = callback.from_user.id
    
    if user_id not in batches:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä—Ç–∏–π", show_alert=True)
        return
    
    active_batches = [b for b in batches[user_id] if b.get('status') == '–ê–∫—Ç–∏–≤–Ω–∞']
    
    if not active_batches:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π", show_alert=True)
        return
    
    await callback.answer("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤...")
    
    total_matches = 0
    for batch in active_batches:
        matching_pulls = await find_matching_exporters(batch)
        if matching_pulls:
            total_matches += len(matching_pulls)
            for pull in matching_pulls:
                await notify_match(user_id, batch, [pull])
        await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    if total_matches > 0:
        await callback.message.answer(
            f"‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {total_matches}\n"
            f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –ø–∞—Ä—Ç–∏—è—Ö."
        )
    else:
        await callback.message.answer(
            "ü§∑‚Äç‚ôÇÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω\n"
            "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞\n"
            "‚Ä¢ –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
        )

async def view_batch_details_direct(message: types.Message, batch_id: str, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–∞—Ä—Ç–∏–∏"""
    logging.info(f"üîç –ò—â–µ–º –ø–∞—Ä—Ç–∏—é batch_id={batch_id}, user_id={user_id}")

    # ‚úÖ –ü–†–û–í–ï–†–ö–ê –¢–ò–ü–ê –î–ê–ù–ù–´–•
    if not isinstance(batches, dict):
        logging.error(f"‚ùå batches –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø: {type(batches)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä—Ç–∏–π")
        return

    batch = None

    # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–ò–°–ö –ü–ê–†–¢–ò–ò
    user_batches = batches.get(user_id, [])
    for b in user_batches:
        if str(b.get('id')) == str(batch_id):
            batch = b
            break
    
    if not batch:
        await message.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    active_matches = [m for m in matches.values() 
                     if m['batch_id'] == batch_id and m['status'] == 'active']
    
    text = f"""
üì¶ <b>–ü–∞—Ä—Ç–∏—è #{batch['id']}</b>

üåæ –ö—É–ª—å—Ç—É—Ä–∞: {batch['culture']}
üìç –†–µ–≥–∏–æ–Ω: {batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üì¶ –û–±—ä—ë–º: {batch['volume']} —Ç
üí∞ –¶–µ–Ω–∞: {batch['price']:,.0f} ‚ÇΩ/—Ç
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {batch.get('humidity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}%
üåæ –°–æ—Ä–Ω–æ—Å—Ç—å: {batch.get('impurity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}%
‚≠ê –ö–ª–∞—Å—Å: {batch.get('quality_class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üè≠ –•—Ä–∞–Ω–µ–Ω–∏–µ: {batch.get('storage_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {batch.get('readiness_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìä –°—Ç–∞—Ç—É—Å: {batch.get('status', '–ê–∫—Ç–∏–≤–Ω–∞')}
üìÖ –°–æ–∑–¥–∞–Ω–æ: {batch.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
"""
    
    if active_matches:
        text += f"\nüéØ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(active_matches)}</b>"
    
    if batch.get('files'):
        text += f"\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(batch['files'])}"
    
    keyboard = batch_actions_keyboard(batch_id)
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')

@dp.callback_query_handler(lambda c: c.data.startswith('view_batch:'), state='*')
async def view_batch_details_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()  #–¢–µ–ø–µ—Ä—å state –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ‚úÖ
    batch_id = parse_callback_id(callback.data)  
    user_id = callback.from_user.id
    await view_batch_details_direct(callback.message, batch_id, user_id)
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('viewbatch_'), state='*')
async def view_batch_from_search(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø–∞—Ä—Ç–∏–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    logging.info(f"üîç viewbatch callback: {callback.data}")
    await state.finish()
    
    try:
        batch_id = int(callback.data.split('_')[1])
        logging.info(f"‚úÖ –ò–∑–≤–ª–µ—á—ë–Ω batch_id: {batch_id}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è batch_id: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    user_id = callback.from_user.id
    await view_batch_details_direct(callback.message, batch_id, user_id)

async def view_batch_details_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø–∞—Ä—Ç–∏–∏"""
    await state.finish()
    
    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º ':' –≤–º–µ—Å—Ç–æ '_'
        batch_id = parse_callback_id(callback.data)
    except (IndexError, ValueError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ batch_id –∏–∑ {callback.data}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    user_id = callback.from_user.id
    
    # –ò—â–µ–º –ø–∞—Ä—Ç–∏—é
    batch = None
    farmer_id = None
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–∞—Ä—Ç–∏—é —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, user_batches in batches.items():
        for b in user_batches:
            if b['id'] == batch_id:
                batch = b
                farmer_id = uid
                break
        if batch:
            break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
    msg = f"üì¶ <b>–ü–∞—Ä—Ç–∏—è #{batch_id}</b>\n\n"
    msg += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {batch['culture']}\n"
    msg += f"üìä –û–±—ä—ë–º: {batch['volume']} —Ç\n"
    msg += f"üí∞ –¶–µ–Ω–∞: {batch['price']:,.0f} ‚ÇΩ/—Ç\n"
    msg += f"üìç –†–µ–≥–∏–æ–Ω: {batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    msg += f"üìã –°—Ç–∞—Ç—É—Å: {batch.get('status', '–ê–∫—Ç–∏–≤–Ω–∞')}\n"
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'nature' in batch:
        msg += "\n<b>–ö–∞—á–µ—Å—Ç–≤–æ:</b>\n"
        msg += f"   üî∏ –ù–∞—Ç—É—Ä–∞: {batch.get('nature', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –≥/–ª\n"
        msg += f"   üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {batch.get('moisture', '-')}%\n"
        msg += f"   üåø –°–æ—Ä–Ω–æ—Å—Ç—å: {batch.get('impurity', '-')}%\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_my_batches")
    )
    
    await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == 'back_to_my_batches', state='*')
async def back_to_my_batches(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ä—Ç–∏–π"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
    if user_id not in users or users[user_id].get('role') != 'farmer':
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä–∞–º", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_batches = batches.get(user_id, [])
    
    if not user_batches:
        await callback.message.edit_text(
            "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π.",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="backtomainmenu")
            )
        )
        await callback.answer()
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏
    active_batches = [b for b in user_batches if b.get('status') in ['–ê–∫—Ç–∏–≤–Ω–∞', 'active', '–î–æ—Å—Ç—É–ø–Ω–∞']]
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä—Ç–∏–π
    for batch in active_batches:
        culture = batch.get('culture', '?')
        volume = batch.get('volume', 0)
        price = batch.get('price', 0)
        button_text = f"‚úÖ {culture} - {volume} —Ç ({price:,.0f} ‚ÇΩ/—Ç)"
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"viewbatch_{batch['id']}")
        )
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞
    if active_batches:
        keyboard.add(
            InlineKeyboardButton("üîç –ê–≤—Ç–æ–ø–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤", callback_data="auto_match_all")
        )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.add(
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="backtomainmenu")
    )
    
    message_text = f"üì¶ <b>–í–∞—à–∏ –ø–∞—Ä—Ç–∏–∏</b> ({len(active_batches)} –∞–∫—Ç–∏–≤–Ω—ã—Ö)\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    try:
        await callback.message.edit_text(
            message_text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    except MessageNotModified:
        pass
    
    await callback.answer()

    
    await callback.message.edit_text(
        f"üì¶ <b>–í–∞—à–∏ –ø–∞—Ä—Ç–∏–∏</b> ({len(batches)} —à—Ç.)\n\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: {len(active_batches)}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä—Ç–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.message_handler(lambda m: m.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –ø—É–ª", state='*')
async def create_pull_start(message: types.Message, state: FSMContext):
    await state.finish()
    userid = message.from_user.id
    
    if userid not in users or users[userid].get("role") != "exporter":
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–≤.")
        return
    
    await CreatePullStatesGroup.culture.set()
    await message.answer(
        "üåæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
        "<b>–®–∞–≥ 1 –∏–∑ 10</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:",
        reply_markup=culture_keyboard(),
        parse_mode="HTML"
    )
    logging.info(f"User {userid} started pull creation, state set to CreatePullStatesGroup.culture")

# ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É–ª—å—Ç—É—Ä—ã
@dp.callback_query_handler(lambda c: c.data.startswith("culture:"), state=CreatePullStatesGroup.culture)
async def create_pull_culture_callback(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"Received callback: {callback.data}, state: {await state.get_state()}")
    
    try:
        culture = callback.data.split(":", 1)[1]
        logging.info(f"Parsed culture: {culture}")
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É–ª—å—Ç—É—Ä—ã", show_alert=True)
        logging.error(f"Culture selection error: {e}, data: {callback.data}")
        return
    
    await state.update_data(culture=culture)
    
    try:
        await callback.message.edit_text(
            f"üåæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            f"<b>–®–∞–≥ 2 –∏–∑ 10</b>\n\n"
            f"–í—ã–±—Ä–∞–Ω–∞ –∫—É–ª—å—Ç—É—Ä–∞: <b>{culture}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –æ–±—ä–µ–º –ø—É–ª–∞ (–≤ —Ç–æ–Ω–Ω–∞—Ö):",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error editing message: {e}")
        await callback.message.answer(
            f"üåæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            f"<b>–®–∞–≥ 2 –∏–∑ 10</b>\n\n"
            f"–í—ã–±—Ä–∞–Ω–∞ –∫—É–ª—å—Ç—É—Ä–∞: <b>{culture}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –æ–±—ä–µ–º –ø—É–ª–∞ (–≤ —Ç–æ–Ω–Ω–∞—Ö):",
            parse_mode="HTML"
        )
    
    await CreatePullStatesGroup.volume.set()
    await callback.answer()
    logging.info("State changed to CreatePullStatesGroup.volume")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–º–∞
@dp.message_handler(state=CreatePullStatesGroup.volume)
async def create_pull_volume(message: types.Message, state: FSMContext):
    try:
        volume = float(message.text.strip().replace(",", "."))
        if volume <= 0:
            raise ValueError
        await state.update_data(volume=volume)
        await message.answer(
            f"üåæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            f"<b>–®–∞–≥ 3 –∏–∑ 10</b>\n\n"
            f"–û–±—ä–µ–º: <b>{volume:,.0f} —Ç–æ–Ω–Ω</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É FOB ($/—Ç–æ–Ω–Ω–∞):",
            parse_mode="HTML"
        )
        await CreatePullStatesGroup.price.set()
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–º. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã
@dp.message_handler(state=CreatePullStatesGroup.price)
async def create_pull_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.strip().replace(",", "."))
        if price <= 0:
            raise ValueError
        await state.update_data(price=price)
        await message.answer(
            f"üåæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            f"<b>–®–∞–≥ 4 –∏–∑ 10</b>\n\n"
            f"–¶–µ–Ω–∞: <b>${price:,.0f}/—Ç–æ–Ω–Ω–∞</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –æ—Ç–≥—Ä—É–∑–∫–∏:",
            reply_markup=port_keyboard(),
            parse_mode="HTML"
        )
        await CreatePullStatesGroup.port.set()
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ç–∞
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ç–∞
@dp.callback_query_handler(lambda c: c.data.startswith("selectport_"), state=CreatePullStatesGroup.port)
async def create_pull_port_callback(callback: types.CallbackQuery, state: FSMContext):
    logging.info(f"Received port callback: {callback.data}, state: {await state.get_state()}")
    
    try:
        port = callback.data.split("_", 1)[1]
        logging.info(f"Parsed port: {port}")
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä—Ç–∞", show_alert=True)
        logging.error(f"Port selection error: {e}, data: {callback.data}")
        return
    
    await state.update_data(port=port)
    
    try:
        await callback.message.edit_text(
            f"üåæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            f"<b>–®–∞–≥ 5 –∏–∑ 10</b>\n\n"
            f"–ü–æ—Ä—Ç: <b>{port}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å (%):",
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error editing message: {e}")
        await callback.message.answer(
            f"üåæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            f"<b>–®–∞–≥ 5 –∏–∑ 10</b>\n\n"
            f"–ü–æ—Ä—Ç: <b>{port}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å (%):",
            parse_mode="HTML"
        )
    
    await CreatePullStatesGroup.moisture.set()
    await callback.answer()
    logging.info(f"Port set: {port}, state changed to CreatePullStatesGroup.moisture")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
@dp.message_handler(state=CreatePullStatesGroup.moisture)
async def create_pull_moisture(message: types.Message, state: FSMContext):
    try:
        moisture = float(message.text.strip().replace(",", "."))
        if not (0 <= moisture <= 100):
            raise ValueError
        await state.update_data(moisture=moisture)
        await message.answer(
            f"üåæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            f"<b>–®–∞–≥ 6 –∏–∑ 10</b>\n\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>{moisture}%</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –Ω–∞—Ç—É—Ä—É (–≥/–ª):",
            parse_mode="HTML"
        )
        await CreatePullStatesGroup.nature.set()
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ç—É—Ä—ã
@dp.message_handler(state=CreatePullStatesGroup.nature)
async def create_pull_nature(message: types.Message, state: FSMContext):
    try:
        nature = float(message.text.strip().replace(",", "."))
        if nature <= 0:
            raise ValueError
        await state.update_data(nature=nature)
        await message.answer(
            f"üåæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            f"<b>–®–∞–≥ 7 –∏–∑ 10</b>\n\n"
            f"–ù–∞—Ç—É—Ä–∞: <b>{nature} –≥/–ª</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–æ—Ä–Ω—É—é –ø—Ä–∏–º–µ—Å—å (%):",
            parse_mode="HTML"
        )
        await CreatePullStatesGroup.impurity.set()
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –Ω–∞—Ç—É—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Ä–Ω–æ–π –ø—Ä–∏–º–µ—Å–∏
@dp.message_handler(state=CreatePullStatesGroup.impurity)
async def create_pull_impurity(message: types.Message, state: FSMContext):
    try:
        impurity = float(message.text.strip().replace(",", "."))
        if not (0 <= impurity <= 100):
            raise ValueError
        await state.update_data(impurity=impurity)
        await message.answer(
            f"üåæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            f"<b>–®–∞–≥ 8 –∏–∑ 10</b>\n\n"
            f"–°–æ—Ä–Ω–∞—è –ø—Ä–∏–º–µ—Å—å: <b>{impurity}%</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–µ—Ä–Ω–æ–≤—É—é –ø—Ä–∏–º–µ—Å—å (%):",
            parse_mode="HTML"
        )
        await CreatePullStatesGroup.weed.set()
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–∏–º–µ—Å—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–µ—Ä–Ω–æ–≤–æ–π –ø—Ä–∏–º–µ—Å–∏
@dp.message_handler(state=CreatePullStatesGroup.weed)
async def create_pull_weed(message: types.Message, state: FSMContext):
    try:
        weed = float(message.text.strip().replace(",", "."))
        if not (0 <= weed <= 100):
            raise ValueError
        await state.update_data(weed=weed)
        await message.answer(
            f"üåæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            f"<b>–®–∞–≥ 9 –∏–∑ 10</b>\n\n"
            f"–ó–µ—Ä–Ω–æ–≤–∞—è –ø—Ä–∏–º–µ—Å—å: <b>{weed}%</b>\n\n"
            f"–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§–∏—Ç–æ—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –∫–∞—á–µ—Å—Ç–≤–æ, –≤–µ—Ç—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç)",
            parse_mode="HTML"
        )
        await CreatePullStatesGroup.documents.set()
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø—Ä–∏–º–µ—Å—å. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")


@dp.message_handler(state=CreatePullStatesGroup.documents)
async def create_pull_documents(message: types.Message, state: FSMContext):
    documents = message.text.strip()
    await state.update_data(documents=documents)
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("CPT", callback_data="doctype_CPT"),
        InlineKeyboardButton("FOB", callback_data="doctype_FOB")
    )
    keyboard.add(
        InlineKeyboardButton("CIF", callback_data="doctype_CIF"),
        InlineKeyboardButton("EXW", callback_data="doctype_EXW")
    )
    
    await message.answer(
        f"üåæ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
        f"<b>–®–∞–≥ 10 –∏–∑ 10</b>\n\n"
        f"–î–æ–∫—É–º–µ–Ω—Ç—ã: <b>{documents}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await CreatePullStatesGroup.doctype.set()
    logging.info(f"Documents set: {documents}, state changed to CreatePullStatesGroup.doctype")


@dp.callback_query_handler(lambda c: c.data.startswith("doctype_"), state=CreatePullStatesGroup.doctype)
async def create_pull_finish(callback: types.CallbackQuery, state: FSMContext):
    global pull_counter
    
    logging.info(f"Received doctype callback: {callback.data}, state: {await state.get_state()}")
    
    try:
        doctype = callback.data.split("_", 1)[1]
        logging.info(f"Parsed doctype: {doctype}")
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞–≤–∫–∏", show_alert=True)
        logging.error(f"Doctype selection error: {e}, data: {callback.data}")
        return
    
    await state.update_data(doctype=doctype)
    data = await state.get_data()
    userid = callback.from_user.id
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞
    pull_counter += 1
    pull = {
        "id": pull_counter,
        "exporter_id": userid,
        "exporter_name": users[userid].get("name", ""),
        "culture": data["culture"],
        "target_volume": data["volume"],
        "current_volume": 0,
        "price": data["price"],
        "port": data["port"],
        "moisture": data.get("moisture", 0),
        "nature": data.get("nature", 0),
        "impurity": data.get("impurity", 0),
        "weed": data.get("weed", 0),
        "documents": data.get("documents", ""),
        "doc_type": doctype,
        "status": "–û—Ç–∫—Ä—ã—Ç",
        "created_at": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "participants": []
    }
    
    pulls[pull_counter] = pull
    save_pulls_to_pickle()
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
    try:
        if gs and gs.spreadsheet:
            gs.sync_pull_to_sheets(pull)
    except Exception as e:
        logging.error(f"Error syncing to Google Sheets: {e}")
    
    logging.info(f"Pull {pull_counter} created by user {userid}")
    
    # ‚úÖ –ó–ê–í–ï–†–®–ê–ï–ú STATE –û–î–ò–ù –†–ê–ó
    await state.finish()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    summary = (
        f"‚úÖ <b>–ü—É–ª #{pull_counter} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: <b>{pull['culture']}</b>\n"
        f"üì¶ –û–±—ä–µ–º: <b>{pull['target_volume']:,.0f} —Ç–æ–Ω–Ω</b>\n"
        f"üíµ –¶–µ–Ω–∞ FOB: <b>${pull['price']:,.0f}/—Ç–æ–Ω–Ω–∞</b>\n"
        f"üö¢ –ü–æ—Ä—Ç: <b>{pull['port']}</b>\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: <b>‚â§{pull['moisture']}%</b>\n"
        f"‚öñÔ∏è –ù–∞—Ç—É—Ä–∞: <b>‚â•{pull['nature']} –≥/–ª</b>\n"
        f"üåø –°–æ—Ä–Ω–∞—è –ø—Ä–∏–º–µ—Å—å: <b>‚â§{pull['impurity']}%</b>\n"
        f"üåæ –ó–µ—Ä–Ω–æ–≤–∞—è –ø—Ä–∏–º–µ—Å—å: <b>‚â§{pull['weed']}%</b>\n"
        f"üìã –î–æ–∫—É–º–µ–Ω—Ç—ã: <b>{pull['documents']}</b>\n"
        f"üì¶ –¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏: <b>{doctype}</b>\n\n"
        f"–§–µ—Ä–º–µ—Ä—ã —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –ø—É–ª—É —Å–æ —Å–≤–æ–∏–º–∏ –ø–∞—Ä—Ç–∏—è–º–∏."
    )
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìã –ú–æ–∏ –ø—É–ª—ã", callback_data="back_to_pulls"))
    
    await callback.message.edit_text(summary, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()
    

@dp.callback_query_handler(lambda c: c.data == "back_to_pools_list", state='*')
async def back_to_pools_list(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—É–ª–æ–≤"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    open_pulls = [pull for pull in pulls.values() if pull.get('status') == '–û—Ç–∫—Ä—ã—Ç']
    
    if not open_pulls:
        await callback.message.edit_text(
            "üì¶ –°–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—É–ª–æ–≤.\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤."
        )
        await callback.answer()
        return
    if user_id in batches and batches[user_id]:
        farmer_cultures = set(batch['culture'] for batch in batches[user_id])
        relevant_pulls = [p for p in open_pulls if p['culture'] in farmer_cultures]
        
        if relevant_pulls:
            open_pulls = relevant_pulls
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for pull in open_pulls[:10]:
        available = pull['target_volume'] - pull['current_volume']
        progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
        
        button_text = f"üåæ {pull['culture']} | {available} —Ç | ${pull['price']}/—Ç ({progress:.0f}%)"
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"viewpull:{pull['id']}")
        )
    
    await callback.message.edit_text(
        f"üì¶ <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø—É–ª—ã</b> ({len(open_pulls)} —à—Ç.)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('view_pull_matches:'), state='*')
async def view_pull_matches(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –ø—É–ª–∞"""
    try:
        pull_id = parse_callback_id(callback.data)
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    user_id = callback.from_user.id
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    if pull['exporter_id'] != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—É–ª—É", show_alert=True)
        return
    pull_matches = []
    for match in matches.values():
        if (match['pull_id'] == pull_id and 
            match['status'] == 'active'):
            pull_matches.append(match)
    
    if not pull_matches:
        await callback.answer("ü§∑‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    text = f"üéØ <b>–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –ø—É–ª–∞ #{pull_id}</b>\n\n"
    text += f"üåæ {pull['culture']} ‚Ä¢ {pull['target_volume']} —Ç ‚Ä¢ ${pull['price']}/—Ç\n\n"
    
    for i, match in enumerate(pull_matches[:5], 1):
        batch_id = match['batch_id']
        batch_info = None
        for user_batches in batches.values():
            for batch in user_batches:
                if batch['id'] == batch_id:
                    batch_info = batch
                    break
            if batch_info:
                break
        
        if batch_info:
            text += f"{i}. <b>–ü–∞—Ä—Ç–∏—è #{batch_id}</b>\n"
            text += f"   üì¶ –û–±—ä—ë–º: {batch_info['volume']} —Ç\n"
            text += f"   üí∞ –¶–µ–Ω–∞: {batch_info['price']:,.0f} ‚ÇΩ/—Ç\n"
            text += f"   üìç –†–µ–≥–∏–æ–Ω: {batch_info['region']}\n"
            text += f"   üë§ –§–µ—Ä–º–µ—Ä: {batch_info['farmer_name']}\n\n"
    
    if len(pull_matches) > 5:
        text += f"<i>... –∏ –µ—â—ë {len(pull_matches) - 5} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</i>\n\n"
    
    text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ñ–µ—Ä–º–µ—Ä–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    
    await callback.message.answer(text, parse_mode='HTML')
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == 'back_to_my_pulls', state='*')
async def back_to_my_pulls_callback(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    user_id = callback.from_user.id
    if user_id not in users or users[user_id].get('role') != 'exporter':
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º", show_alert=True)
        return
    my_pulls = {k: v for k, v in pulls.items() if v['exporter_id'] == user_id}
    if not my_pulls:
        await callback.message.edit_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–ª–æ–≤.")
        await callback.answer()
        return
    text = "üì¶ <b>–í–∞—à–∏ –ø—É–ª—ã:</b>\n\n"
    keyboard = InlineKeyboardMarkup()
    for pull_id, pull in my_pulls.items():
        status_emoji = "üü¢" if pull['status'] == '–û—Ç–∫—Ä—ã—Ç' else "üî¥"
        button_text = f"{status_emoji} –ü—É–ª #{pull_id}: {pull['culture']}"
        keyboard.add(InlineKeyboardButton(button_text, callback_data=f"viewpull:{pull_id}"))
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.message_handler(lambda m: m.text == "üì¶ –ú–æ–∏ –ø—É–ª—ã", state='*')
async def view_my_pulls(message: types.Message, state: FSMContext):
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'exporter':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º")
        return
    my_pulls = {k: v for k, v in pulls.items() if v['exporter_id'] == user_id}
    
    if not my_pulls:
        await message.answer(
            "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—É–ª–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—É–ª' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ."
        )
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for pull_id, pull in my_pulls.items():
        status_emoji = {
            '–û—Ç–∫—Ä—ã—Ç': 'üü¢',
            '–í —Ä–∞–±–æ—Ç–µ': 'üü°', 
            '–ó–∞–∫—Ä—ã—Ç': 'üî¥',
            '–ó–∞–≤–µ—Ä—à—ë–Ω': '‚úÖ'
        }.get(pull.get('status', '–û—Ç–∫—Ä—ã—Ç'), 'üì¶')
        
        progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
        has_matches = any(m['pull_id'] == pull_id and m['status'] == 'active' 
                         for m in matches.values())
        match_emoji = "üéØ " if has_matches else ""
        
        button_text = (
            f"{match_emoji}{status_emoji} {pull['culture']} - {pull['current_volume']:.0f}/"
            f"{pull['target_volume']:.0f} —Ç ({progress:.0f}%)"
        )
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"view_pull:{pull_id}")
        )
    
    await message.answer(
        f"üì¶ <b>–í–∞—à–∏ –ø—É–ª—ã</b> ({len(my_pulls)} —à—Ç.)\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data.startswith('view_pull:'), state='*')
async def view_pull_details(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—É–ª–∞"""
    try:
        pull_id = parse_callback_id(callback.data)
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    user_id = callback.from_user.id
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    is_owner = pull['exporter_id'] == user_id
    
    progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
    active_matches = [m for m in matches.values() 
                     if m['pull_id'] == pull_id and m['status'] == 'active']
    
    text = f"""
üì¶ <b>–ü—É–ª #{pull['id']}</b>

üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull['culture']}
üì¶ –û–±—ä—ë–º: {pull['current_volume']:.0f}/{pull['target_volume']:.0f} —Ç ({progress:.0f}%)
üí∞ –¶–µ–Ω–∞ FOB: ${pull['price']}/—Ç (~{pull['price'] * 75:,.0f} ‚ÇΩ/—Ç)
üö¢ –ü–æ—Ä—Ç: {pull['port']}

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É:</b>
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: –¥–æ {pull['moisture']}%
üèãÔ∏è –ù–∞—Ç—É—Ä–∞: –æ—Ç {pull['nature']} –≥/–ª
üåæ –°–æ—Ä–Ω–æ—Å—Ç—å: –¥–æ {pull['impurity']}%
üåø –ó–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å: –¥–æ {pull['weed']}%

üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {pull['documents']}
üìã –¢–∏–ø: {pull['doc_type']}
üìä –°—Ç–∞—Ç—É—Å: {translate_pull_status(
    pull.get('status'),
    pull.get('current_volume'),
    pull.get('target_volume')
)}
üë§ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä: {pull['exporter_name']}
üìÖ –°–æ–∑–¥–∞–Ω: {pull['created_at']}
"""
    
    if active_matches:
        text += f"\nüéØ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(active_matches)}</b>"
    
    participants_count = len(pull.get('participants', []))
    if participants_count > 0:
        text += f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if is_owner:
        keyboard.add(
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"editpull_{pull_id}"),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"deletepull_{pull_id}")
        )
        if pull.get('status') == 'active':
            keyboard.add(
                InlineKeyboardButton("üîí –ó–∞–∫—Ä—ã—Ç—å –ø—É–ª–ª", callback_data=f"close_pull_{pull_id}")
        )
        if active_matches:
            keyboard.add(
                InlineKeyboardButton("üéØ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", callback_data=f"view_pull_matches:{pull_id}")
            )
        
        keyboard.add(
            InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"pullparticipants:{pull_id}"),
            InlineKeyboardButton("üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞", callback_data=f"pull_logistics:{pull_id}")
        )
    else:
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"join_pull:{pull_id}")
        )
    
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_pulls")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.message_handler(lambda m: m.text == "üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–∏–∏", state='*')
async def search_batches_for_exporter(message: types.Message, state: FSMContext):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'exporter':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º")
        return
    
    await message.answer(
        "üîç <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:",
        reply_markup=search_criteria_keyboard(),
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data.startswith('search_by:'), state='*')
async def handle_search_criteria(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–∏–π"""
    await state.finish()
    
    criteria = callback.data.split(':', 1)[1]
    
    if criteria == 'culture':
        await callback.message.edit_text(
            "üåæ <b>–ü–æ–∏—Å–∫ –ø–æ –∫—É–ª—å—Ç—É—Ä–µ</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:",
            reply_markup=culture_keyboard(),
            parse_mode='HTML'
        )
        await SearchBatchesStatesGroup.enter_culture.set()
        
    elif criteria == 'region':
        await callback.message.edit_text(
            "üìç <b>–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
            reply_markup=region_keyboard(),
            parse_mode='HTML'
        )
        await SearchBatchesStatesGroup.enter_region.set()
        
    elif criteria == 'volume':
        await callback.message.edit_text(
            "üì¶ <b>–ü–æ–∏—Å–∫ –ø–æ –æ–±—ä—ë–º—É</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º (—Ç–æ–Ω–Ω):",
            parse_mode='HTML'
        )
        await SearchBatchesStatesGroup.enter_min_volume.set()
        
    elif criteria == 'price':
        await callback.message.edit_text(
            "üí∞ <b>–ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (‚ÇΩ/—Ç):",
            parse_mode='HTML'
        )
        await SearchBatchesStatesGroup.enter_max_price.set()
        
    elif criteria == 'quality':
        await callback.message.edit_text(
            "‚≠ê <b>–ü–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å—É –∫–∞—á–µ—Å—Ç–≤–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:",
            reply_markup=quality_class_keyboard(),
            parse_mode='HTML'
        )
        await SearchBatchesStatesGroup.enter_quality_class.set()
        
    elif criteria == 'storage':
        await callback.message.edit_text(
            "üè≠ <b>–ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É —Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
            reply_markup=storage_type_keyboard(),
            parse_mode='HTML'
        )
        await SearchBatchesStatesGroup.enter_storage_type.set()
        
    elif criteria == 'all':
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º</b>\n\n"
            "–ù–∞—á–Ω—ë–º —Å –∫—É–ª—å—Ç—É—Ä—ã. –í—ã–±–µ—Ä–∏—Ç–µ:",
            reply_markup=culture_keyboard(),
            parse_mode='HTML'
        )
        await SearchBatchesStatesGroup.enter_culture.set()
        
    elif criteria == 'available':
        # –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
        await callback.answer("üîç –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏...")
        
        available_batches = []
        for user_batches in batches.values():
            for batch in user_batches:
                if batch.get('status') in ['active', '–ê–∫—Ç–∏–≤–Ω–∞', 'available', '–¥–æ—Å—Ç—É–ø–Ω–∞']:
                    available_batches.append(batch)
        
        if available_batches:
            text = f"üåæ <b>–ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π: {len(available_batches)}</b>\n\n"
            
            for i, batch in enumerate(available_batches[:10], 1):
                text += f"{i}. <b>{batch['culture']}</b> - {batch['volume']} —Ç\n"
                text += f"   üí∞ {batch['price']:,.0f} ‚ÇΩ/—Ç | üìç {batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            
            if len(available_batches) > 10:
                text += f"... –∏ –µ—â—ë {len(available_batches) - 10} –ø–∞—Ä—Ç–∏–π\n"
            
            keyboard = InlineKeyboardMarkup(row_width=1)
            for batch in available_batches[:5]:
                keyboard.add(InlineKeyboardButton(
                    f"{batch['culture']} - {batch['volume']} —Ç",
                    callback_data=f"viewbatch_{batch['id']}"
                ))
            keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_search"))
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        else:
            await callback.message.edit_text(
                "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                parse_mode='HTML'
            )
            
    elif criteria == 'topregions':
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—Ç–∏–∏ –∏–∑ —Ç–æ–ø–æ–≤—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        region_counts = {}
        for user_batches in batches.values():
            for batch in user_batches:
                if batch.get('status') in ['active', '–ê–∫—Ç–∏–≤–Ω–∞', 'available', '–¥–æ—Å—Ç—É–ø–Ω–∞']:
                    region = batch.get('region', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    region_counts[region] = region_counts.get(region, 0) + 1
        
        if region_counts:
            top_regions = sorted(region_counts.items(), key=lambda x: x[1], reverse=True)[:5]
            
            text = "üìç <b>–¢–æ–ø-5 —Ä–µ–≥–∏–æ–Ω–æ–≤:</b>\n\n"
            for i, (region, count) in enumerate(top_regions, 1):
                text += f"{i}. {region}: {count} –ø–∞—Ä—Ç–∏–π\n"
            
            keyboard = InlineKeyboardMarkup(row_width=1)
            for region, count in top_regions:
                keyboard.add(InlineKeyboardButton(
                    f"{region} ({count})",
                    callback_data=f"searchregion:{region}"
                ))
            keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_search"))
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        else:
            await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", parse_mode='HTML')
    
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == 'back_to_search', state='*')
async def back_to_search_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞"""
    await state.finish()
    
    await callback.message.edit_text(
        "üîç <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:",
        reply_markup=search_criteria_keyboard(),
        parse_mode='HTML'
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É–ª—å—Ç—É—Ä—ã
@dp.callback_query_handler(lambda c: c.data.startswith('culture:'), state=SearchBatchesStatesGroup.enter_culture)
async def search_by_culture_selected(callback: types.CallbackQuery, state: FSMContext):
    global batches
    culture = callback.data.split(':', 1)[1]
    
    # –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π –ø–æ –∫—É–ª—å—Ç—É—Ä–µ
    found_batches = []    
    for user_batches in batches.values():
        for batch in user_batches:
            if batch.get('culture') == culture and batch.get('status') in ['active', '–ê–∫—Ç–∏–≤–Ω–∞', 'available', '–¥–æ—Å—Ç—É–ø–Ω–∞']:
                found_batches.append(batch)
    
    await state.finish()
    
    if found_batches:
        text = f"üåæ <b>–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Ç–∏–π '{culture}': {len(found_batches)}</b>\n\n"
        
        for i, batch in enumerate(found_batches[:10], 1):
            text += f"{i}. {batch['volume']} —Ç - {batch['price']:,.0f} ‚ÇΩ/—Ç\n"
            text += f"   üìç {batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        
        if len(found_batches) > 10:
            text += f"... –∏ –µ—â—ë {len(found_batches) - 10} –ø–∞—Ä—Ç–∏–π"
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        for batch in found_batches[:5]:
            keyboard.add(InlineKeyboardButton(
                f"{batch['volume']} —Ç - {batch['price']:,.0f} ‚ÇΩ/—Ç",
                callback_data=f"viewbatch_{batch['id']}"
            ))
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_search"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await callback.message.edit_text(
            f"‚ùå –ü–∞—Ä—Ç–∏–π '{culture}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            parse_mode='HTML'
        )
    
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
@dp.callback_query_handler(lambda c: c.data.startswith('region:') or c.data.startswith('searchregion:'), state='*')
async def search_by_region_selected(callback: types.CallbackQuery, state: FSMContext):
    if ':' in callback.data:
        region = callback.data.split(':', 1)[1]
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞", show_alert=True)
        return
    
    # –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π –ø–æ —Ä–µ–≥–∏–æ–Ω—É
    found_batches = [] 
    for user_batches in batches.values():
        for batch in user_batches:
            if batch.get('region') == region and batch.get('status') in ['active', '–ê–∫—Ç–∏–≤–Ω–∞', 'available', '–¥–æ—Å—Ç—É–ø–Ω–∞']:
                found_batches.append(batch)
    
    await state.finish()
    
    if found_batches:
        text = f"üìç <b>–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Ç–∏–π –≤ '{region}': {len(found_batches)}</b>\n\n"
        
        for i, batch in enumerate(found_batches[:10], 1):
            text += f"{i}. {batch['culture']} - {batch['volume']} —Ç\n"
            text += f"   üí∞ {batch['price']:,.0f} ‚ÇΩ/—Ç\n\n"
        
        if len(found_batches) > 10:
            text += f"... –∏ –µ—â—ë {len(found_batches) - 10} –ø–∞—Ä—Ç–∏–π"
        
        keyboard = InlineKeyboardMarkup(row_width=1)
        for batch in found_batches[:5]:
            keyboard.add(InlineKeyboardButton(
                f"{batch['culture']} - {batch['volume']} —Ç",
                callback_data=f"viewbatch_{batch['id']}"
            ))
        keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_search"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await callback.message.edit_text(
            f"‚ùå –ü–∞—Ä—Ç–∏–π –≤ '{region}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
            parse_mode='HTML'
        )
    
    await callback.answer()

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –†–ê–°–®–ò–†–ï–ù–ù–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ –≠–ö–°–ü–û–†–¢–Å–†–ê
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–π –≤ –ø—É–ª–ª, –≤—ã–±–æ—Ä –ª–æ–≥–∏—Å—Ç–æ–≤ –∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

@dp.callback_query_handler(lambda c: c.data.startswith('add_batch_to_pull:'), state='*')
async def add_batch_to_pull_select(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä –ø—É–ª–ª–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏"""
    global batches
    try:
        batch_id = parse_callback_id(callback.data)  
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    user_id = callback.from_user.id

    if batch_id not in batches:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    batch = batches[batch_id]

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—É–ª—ã —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞ —Å —Ç–æ–π –∂–µ –∫—É–ª—å—Ç—É—Ä–æ–π
    user_pulls = []
    for pid, p in pulls.items():
        if (p.get('creator_id') == user_id and 
            p.get('culture', '').lower() == batch.get('culture', '').lower() and
            p.get('status', 'active') in ['active', '–æ—Ç–∫—Ä—ã—Ç', '–∞–∫—Ç–∏–≤–µ–Ω']):
            user_pulls.append((pid, p))

    if not user_pulls:
        await callback.answer(
            f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–ª–æ–≤ –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã: {batch.get('culture', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø—É–ª–ª —Å–Ω–∞—á–∞–ª–∞!",
            show_alert=True
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—É–ª–æ–≤
    keyboard = InlineKeyboardMarkup(row_width=1)

    for pull_id, pull in user_pulls:
        # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä—ë–º
        current_vol = 0
        if 'batches' in pull and pull['batches']:
            for b_id in pull['batches']:
                if b_id in batches:
                    current_vol += batches[b_id].get('volume', 0)

        target_vol = pull.get('target_volume', 0)

        keyboard.add(InlineKeyboardButton(
            f"–ü—É–ª–ª #{pull_id}: {current_vol:.1f}/{target_vol:.1f} —Ç",
            callback_data=f"confirm_add_batch:{batch_id}:{pull_id}"
        ))

    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action"))

    await callback.message.edit_text(
        f"üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –≤ –ø—É–ª–ª</b>\n\n"
        f"üåæ –ü–∞—Ä—Ç–∏—è: {batch.get('culture', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ‚Ä¢ {batch.get('volume', 0):.1f} —Ç\n"
        f"üìç –†–µ–≥–∏–æ–Ω: {batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üí∞ –¶–µ–Ω–∞: {batch.get('price', 0):,} ‚ÇΩ/—Ç\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
        parse_mode='HTML',
        reply_markup=keyboard
    )
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('confirm_add_batch:'), state='*')
async def confirm_add_batch_to_pull(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏ –≤ –ø—É–ª–ª"""
    try:
        _, batch_id, pull_id = callback.data.split(':')
        batch_id = int(batch_id)
        pull_id = int(pull_id)
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    if batch_id not in batches or pull_id not in pulls:
        await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    batch = batches[batch_id]
    pull = pulls[pull_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É–ª–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É
    if pull.get('creator_id') != callback.from_user.id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –ø—É–ª–ª", show_alert=True)
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –ø–∞—Ä—Ç–∏–π –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if 'batches' not in pull:
        pull['batches'] = []

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ä—Ç–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É–∂–µ
    if batch_id in pull['batches']:
        await callback.answer("‚ö†Ô∏è –ü–∞—Ä—Ç–∏—è —É–∂–µ –≤ –ø—É–ª–ª–µ", show_alert=True)
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Ç–∏—é –≤ –ø—É–ª–ª
    pull['batches'].append(batch_id)
    batch['status'] = 'in_pull'
    batch['pull_id'] = pull_id

    # –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º
    current_volume = 0
    for b_id in pull['batches']:
        if b_id in batches:
            current_volume += batches[b_id].get('volume', 0)

    target_volume = pull.get('target_volume', 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É–ª–ª–∞
    if current_volume >= target_volume:
        pull['status'] = 'completed'

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞
        try:
            await bot.send_message(
                callback.from_user.id,
                f"üéâ <b>–ü—É–ª–ª #{pull_id} —Å–æ–±—Ä–∞–Ω!</b>\n\n"
                f"üåæ {pull.get('culture', '–ö—É–ª—å—Ç—É—Ä–∞')}\n"
                f"üìä –û–±—ä—ë–º: {current_volume:.1f}/{target_volume:.1f} —Ç\n"
                f"üìç –ü–æ—Ä—Ç: {pull.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∞ –∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞!",
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ–µ—Ä–º–µ—Ä–∞
    farmer_id = batch.get('farmer_id')
    if farmer_id and farmer_id in users:
        try:
            await bot.send_message(
                farmer_id,
                f"‚úÖ <b>–í–∞—à–∞ –ø–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—É–ª–ª!</b>\n\n"
                f"üåæ {batch.get('culture', '–ö—É–ª—å—Ç—É—Ä–∞')} ‚Ä¢ {batch.get('volume', 0):.1f} —Ç\n"
                f"üì¶ –ü—É–ª–ª #{pull_id}\n"
                f"üö¢ –ü–æ—Ä—Ç: {pull.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üí∞ –¶–µ–Ω–∞: {batch.get('price', 0):,} ‚ÇΩ/—Ç",
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ñ–µ—Ä–º–µ—Ä–∞ {farmer_id}: {e}")

    save_data()

    status_text = "üéâ –ü—É–ª–ª —Å–æ–±—Ä–∞–Ω!" if current_volume >= target_volume else "‚úÖ –ü–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞"

    await callback.message.edit_text(
        f"‚úÖ <b>–ü–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—É–ª–ª #{pull_id}!</b>\n\n"
        f"üìä –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º: {current_volume:.1f}/{target_volume:.1f} —Ç\n"
        f"{status_text}",
        parse_mode='HTML'
    )
    await callback.answer("‚úÖ –ü–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2. –ü–†–û–°–ú–û–¢–† –ò –í–´–ë–û–† –õ–û–ì–ò–°–¢–ê
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@dp.callback_query_handler(lambda c: c.data.startswith('select_logistics_for_pull:'), state='*')
async def show_logistics_for_pull(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏—Å—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    try:
        pull_id = parse_callback_id(callback.data)
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    pull = pulls[pull_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É–ª–ª —Å–æ–±—Ä–∞–Ω
    if pull.get('status') not in ['completed', '—Å–æ–±—Ä–∞–Ω', '–∑–∞–∫—Ä—ã—Ç']:
        await callback.answer("‚ö†Ô∏è –ü—É–ª–ª –µ—â—ë –Ω–µ —Å–æ–±—Ä–∞–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏—Å—Ç–æ–≤
    available_logistics = []

    for user_id, user_data in users.items():
        if user_data.get('role') == 'logist':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –ª–æ–≥–∏—Å—Ç–∞
            logistic_card = user_data.get('logistics_card', {})
            if logistic_card:
                available_logistics.append((user_id, logistic_card, user_data))

    if not available_logistics:
        await callback.answer(
            "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–∏—Å—Ç–æ–≤\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            show_alert=True
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    text = f"üöö <b>–í—ã–±–æ—Ä –ª–æ–≥–∏—Å—Ç–∞ –¥–ª—è –ø—É–ª–ª–∞ #{pull_id}</b>\n\n"
    text += f"üåæ {pull.get('culture', '–ö—É–ª—å—Ç—É—Ä–∞')} ‚Ä¢ {pull.get('target_volume', 0):.1f} —Ç\n"
    text += f"üö¢ –ü–æ—Ä—Ç: {pull.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    text += f"<b>–î–æ—Å—Ç—É–ø–Ω–æ –ª–æ–≥–∏—Å—Ç–æ–≤: {len(available_logistics)}</b>\n"

    keyboard = InlineKeyboardMarkup(row_width=1)

    for log_id, log_card, log_user in available_logistics:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        company = log_card.get('company_name', '–ö–æ–º–ø–∞–Ω–∏—è')
        price = log_card.get('price_per_ton', 0)

        btn_text = f"üöö {company} ‚Ä¢ {price:,} ‚ÇΩ/—Ç"

        keyboard.add(InlineKeyboardButton(
            btn_text,
            callback_data=f"view_logistic_card:{pull_id}:{log_id}"
        ))

    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action"))

    await callback.message.edit_text(text, parse_mode='HTML', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('view_logistic_card:'), state='*')
async def view_logistic_card_for_selection(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–≥–∏—Å—Ç–∞ –∏ –≤—ã–±–æ—Ä"""
    try:
        _, pull_id, log_id = callback.data.split(':')
        pull_id = int(pull_id)
        log_id = int(log_id)
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    if log_id not in users:
        await callback.answer("‚ùå –õ–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    log_user = users[log_id]
    log_card = log_user.get('logistics_card', {})

    if not log_card:
        await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    text = "üöö <b>–ö–∞—Ä—Ç–æ—á–∫–∞ –ª–æ–≥–∏—Å—Ç–∞</b>\n\n"
    text += f"üè¢ <b>{log_card.get('company_name', '–ö–æ–º–ø–∞–Ω–∏—è')}</b>\n"
    text += f"üìç –ú–∞—Ä—à—Ä—É—Ç: {log_card.get('route', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üí∞ –¢–∞—Ä–∏—Ñ: {log_card.get('price_per_ton', 0):,} ‚ÇΩ/—Ç\n"
    text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {log_card.get('transport_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"‚è± –°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: {log_card.get('delivery_days', '–ù–µ —É–∫–∞–∑–∞–Ω')} –¥–Ω–µ–π\n"

    if log_card.get('additional_info'):
        text += f"\nüìù {log_card['additional_info']}\n"

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    text += "\n<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
    if log_user.get('username'):
        text += f"Telegram: @{log_user['username']}\n"
    if log_user.get('phone'):
        text += f"üìû {log_user['phone']}\n"

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(
            "‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ–≥–æ –ª–æ–≥–∏—Å—Ç–∞",
            callback_data=f"confirm_select_logistic:{pull_id}:{log_id}"
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data=f"select_logistics_for_pull:{pull_id}"
        )
    )

    await callback.message.edit_text(text, parse_mode='HTML', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('confirm_select_logistic:'), state='*')
async def confirm_select_logistic(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ª–æ–≥–∏—Å—Ç–∞"""
    try:
        _, pull_id, log_id = callback.data.split(':')
        pull_id = int(pull_id)
        log_id = int(log_id)
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    pull = pulls[pull_id]

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –ª–æ–≥–∏—Å—Ç–∞
    pull['selected_logistic'] = log_id

    save_data()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–æ–≥–∏—Å—Ç–∞
    log_user = users.get(log_id, {})
    try:
        await bot.send_message(
            log_id,
            f"üéâ <b>–í—ã –≤—ã–±—Ä–∞–Ω—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏!</b>\n\n"
            f"üì¶ –ü—É–ª–ª #{pull_id}\n"
            f"üåæ {pull.get('culture', '–ö—É–ª—å—Ç—É—Ä–∞')} ‚Ä¢ {pull.get('target_volume', 0):.1f} —Ç\n"
            f"üö¢ –ü–æ—Ä—Ç: {pull.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∞ {log_id}: {e}")

    company_name = log_user.get('logistics_card', {}).get('company_name', '–õ–æ–≥–∏—Å—Ç')

    await callback.message.edit_text(
        f"‚úÖ <b>–õ–æ–≥–∏—Å—Ç –≤—ã–±—Ä–∞–Ω!</b>\n\n"
        f"üöö –ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n"
        f"üì¶ –î–ª—è –ø—É–ª–ª–∞ #{pull_id}\n\n"
        f"–õ–æ–≥–∏—Å—Ç –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
        parse_mode='HTML'
    )
    await callback.answer("‚úÖ –õ–æ–≥–∏—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω!")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 3. –ü–†–û–°–ú–û–¢–† –ò –í–´–ë–û–† –≠–ö–°–ü–ï–î–ò–¢–û–†–ê
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

@dp.callback_query_handler(lambda c: c.data.startswith('select_expeditor_for_pull:'), state='*')
async def show_expeditors_for_pull(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"""
    try:
        pull_id = parse_callback_id(callback.data)
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    pull = pulls[pull_id]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—É–ª–ª —Å–æ–±—Ä–∞–Ω
    if pull.get('status') not in ['completed', '—Å–æ–±—Ä–∞–Ω', '–∑–∞–∫—Ä—ã—Ç']:
        await callback.answer("‚ö†Ô∏è –ü—É–ª–ª –µ—â—ë –Ω–µ —Å–æ–±—Ä–∞–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤
    available_expeditors = []

    for user_id, user_data in users.items():
        if user_data.get('role') == 'expeditor':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞
            expeditor_card = user_data.get('expeditor_card', {})
            if expeditor_card:
                available_expeditors.append((user_id, expeditor_card, user_data))

    if not available_expeditors:
        await callback.answer(
            "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
            show_alert=True
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"üìÑ <b>–í—ã–±–æ—Ä —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞ –¥–ª—è –ø—É–ª–ª–∞ #{pull_id}</b>\n\n"
    text += f"üåæ {pull.get('culture', '–ö—É–ª—å—Ç—É—Ä–∞')} ‚Ä¢ {pull.get('target_volume', 0):.1f} —Ç\n"
    text += f"üö¢ –ü–æ—Ä—Ç: {pull.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    text += f"<b>–î–æ—Å—Ç—É–ø–Ω–æ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤: {len(available_expeditors)}</b>\n"

    keyboard = InlineKeyboardMarkup(row_width=1)

    for exp_id, exp_card, exp_user in available_expeditors:
        company = exp_card.get('company_name', '–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä')
        price = exp_card.get('customs_fee', 0)

        btn_text = f"üìÑ {company} ‚Ä¢ {price:,} ‚ÇΩ"

        keyboard.add(InlineKeyboardButton(
            btn_text,
            callback_data=f"view_expeditor_card:{pull_id}:{exp_id}"
        ))

    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action"))

    await callback.message.edit_text(text, parse_mode='HTML', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('view_expeditor_card:'), state='*')
async def view_expeditor_card_for_selection(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞ –∏ –≤—ã–±–æ—Ä"""
    try:
        _, pull_id, exp_id = callback.data.split(':')
        pull_id = int(pull_id)
        exp_id = int(exp_id)
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    if exp_id not in users:
        await callback.answer("‚ùå –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    exp_user = users[exp_id]
    exp_card = exp_user.get('expeditor_card', {})

    if not exp_card:
        await callback.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    text = "üìÑ <b>–ö–∞—Ä—Ç–æ—á–∫–∞ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞</b>\n\n"
    text += f"üè¢ <b>{exp_card.get('company_name', '–ö–æ–º–ø–∞–Ω–∏—è')}</b>\n"
    text += f"üìã –£—Å–ª—É–≥–∏: {exp_card.get('services', '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –î–¢')}\n"
    text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {exp_card.get('customs_fee', 0):,} ‚ÇΩ\n"
    text += f"‚è± –°—Ä–æ–∫–∏: {exp_card.get('processing_time', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n"

    if exp_card.get('additional_services'):
        text += f"\n‚ú® –î–æ–ø. —É—Å–ª—É–≥–∏: {exp_card['additional_services']}\n"

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    text += "\n<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
    if exp_user.get('username'):
        text += f"Telegram: @{exp_user['username']}\n"
    if exp_user.get('phone'):
        text += f"üìû {exp_user['phone']}\n"

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton(
            "‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ–≥–æ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞",
            callback_data=f"confirm_select_expeditor:{pull_id}:{exp_id}"
        )
    )
    keyboard.add(
        InlineKeyboardButton(
            "‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data=f"select_expeditor_for_pull:{pull_id}"
        )
    )

    await callback.message.edit_text(text, parse_mode='HTML', reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('confirm_select_expeditor:'), state='*')
async def confirm_select_expeditor(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    try:
        _, pull_id, exp_id = callback.data.split(':')
        pull_id = int(pull_id)
        exp_id = int(exp_id)
    except (ValueError, IndexError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    pull = pulls[pull_id]

    # –ù–∞–∑–Ω–∞—á–∞–µ–º —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞
    pull['selected_expeditor'] = exp_id

    save_data()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞
    exp_user = users.get(exp_id, {})
    try:
        await bot.send_message(
            exp_id,
            f"üéâ <b>–í—ã –≤—ã–±—Ä–∞–Ω—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –î–¢!</b>\n\n"
            f"üì¶ –ü—É–ª–ª #{pull_id}\n"
            f"üåæ {pull.get('culture', '–ö—É–ª—å—Ç—É—Ä–∞')} ‚Ä¢ {pull.get('target_volume', 0):.1f} —Ç\n"
            f"üö¢ –ü–æ—Ä—Ç: {pull.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞ {exp_id}: {e}")

    company_name = exp_user.get('expeditor_card', {}).get('company_name', '–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä')

    await callback.message.edit_text(
        f"‚úÖ <b>–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω!</b>\n\n"
        f"üìÑ –ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n"
        f"üì¶ –î–ª—è –ø—É–ª–ª–∞ #{pull_id}\n\n"
        f"–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
        parse_mode='HTML'
    )
    await callback.answer("‚úÖ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω!")


async def select_search_criteria(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞"""
    search_type = callback.data.split(':', 1)[1]
    
    await state.update_data(search_type=search_type)
    
    if search_type == 'culture':
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –∫—É–ª—å—Ç—É—Ä–µ</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:",
            reply_markup=culture_keyboard()
        )
        await SearchBatchesStatesGroup.enter_culture.set()
    
    elif search_type == 'region':
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
            reply_markup=region_keyboard()
        )
        await SearchBatchesStatesGroup.enter_region.set()
    
    elif search_type == 'volume':
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –æ–±—ä—ë–º—É</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º (–≤ —Ç–æ–Ω–Ω–∞—Ö):"
        )
        await SearchBatchesStatesGroup.enter_min_volume.set()
    
    elif search_type == 'price':
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (‚ÇΩ/—Ç–æ–Ω–Ω–∞):"
        )
        await SearchBatchesStatesGroup.enter_min_price.set()
    
    elif search_type == 'quality':
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å—É –∫–∞—á–µ—Å—Ç–≤–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞:",
            reply_markup=quality_class_keyboard()
        )
        await SearchBatchesStatesGroup.enter_quality_class.set()
    
    elif search_type == 'storage':
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É —Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=storage_type_keyboard()
        )
        await SearchBatchesStatesGroup.enter_storage_type.set()
    
    elif search_type == 'all':
        await callback.message.edit_text(
            "üîç <b>–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:",
            reply_markup=culture_keyboard()
        )
        await SearchBatchesStatesGroup.enter_culture.set()
    
    elif search_type == 'active':
        await perform_search(callback.message, {'status': '–ê–∫—Ç–∏–≤–Ω–∞'})
    
    await callback.answer()

    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    region = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    search_type = data.get('search_type')
    
    if search_type == 'region':
        await perform_search(callback.message, {'region': region})
        await state.finish()
    else:
        await state.update_data(region=region)
        await callback.message.edit_text(
            "üîç <b>–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º (–≤ —Ç–æ–Ω–Ω–∞—Ö):"
        )
        await SearchBatchesStatesGroup.enter_min_volume.set()
    
    await callback.answer()

@dp.message_handler(state=SearchBatchesStatesGroup.enter_min_volume)
async def search_min_volume(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—ë–º–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    try:
        min_volume = float(message.text.strip().replace(',', '.'))
        if min_volume < 0:
            raise ValueError
        
        data = await state.get_data()
        
        if data.get('search_type') == 'volume':
            await perform_search(message, {'min_volume': min_volume})
            await state.finish()
        else:
            await state.update_data(min_volume=min_volume)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º (–≤ —Ç–æ–Ω–Ω–∞—Ö, –∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ):")
            await SearchBatchesStatesGroup.enter_max_volume.set()
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.message_handler(state=SearchBatchesStatesGroup.enter_max_volume)
async def search_max_volume(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—ë–º–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    try:
        max_volume_text = message.text.strip()
        max_volume = float(max_volume_text.replace(',', '.')) if max_volume_text != '0' else 0
        
        if max_volume < 0:
            raise ValueError
        
        await state.update_data(max_volume=max_volume)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (‚ÇΩ/—Ç–æ–Ω–Ω–∞):")
        await SearchBatchesStatesGroup.enter_min_price.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.message_handler(state=SearchBatchesStatesGroup.enter_min_price)
async def search_min_price(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    try:
        min_price = float(message.text.strip().replace(',', '.'))
        if min_price < 0:
            raise ValueError
        
        await state.update_data(min_price=min_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (‚ÇΩ/—Ç–æ–Ω–Ω–∞, –∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ):")
        await SearchBatchesStatesGroup.enter_max_price.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.message_handler(state=SearchBatchesStatesGroup.enter_max_price)
async def search_max_price(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    try:
        max_price_text = message.text.strip()
        max_price = float(max_price_text.replace(',', '.')) if max_price_text != '0' else 0
        
        if max_price < 0:
            raise ValueError
        
        data = await state.get_data()
        search_params = {
            'culture': data.get('culture'),
            'region': data.get('region'),
            'min_volume': data.get('min_volume', 0),
            'max_volume': data.get('max_volume', 0),
            'min_price': data.get('min_price', 0),
            'max_price': max_price,
            'status': '–ê–∫—Ç–∏–≤–Ω–∞'
        }
        
        await perform_search(message, search_params)
        await state.finish()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.callback_query_handler(lambda c: c.data.startswith('quality:'), state=SearchBatchesStatesGroup.enter_quality_class)
async def search_by_quality(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    quality_class = callback.data.split(':', 1)[1]
    
    await perform_search(callback.message, {'quality_class': quality_class})
    await state.finish()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('storage:'), state=SearchBatchesStatesGroup.enter_storage_type)
async def search_by_storage(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    storage_type = callback.data.split(':', 1)[1]
    
    await perform_search(callback.message, {'storage_type': storage_type})
    await state.finish()
    await callback.answer()

async def perform_search(message, search_params):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    found_batches = []    
    for user_batches in batches.values():
        for batch in user_batches:
            if matches_search_criteria(batch, search_params):
                found_batches.append(batch)
    
    if not found_batches:
        await message.answer(
            "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
            "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.",
            parse_mode='HTML'
        )
        return
    found_batches.sort(key=lambda x: x['price'])
    
    text = "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
    text += f"–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Ç–∏–π: {len(found_batches)}\n\n"
    
    for i, batch in enumerate(found_batches[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑
        text += f"{i}. <b>–ü–∞—Ä—Ç–∏—è #{batch['id']}</b>\n"
        text += f"   üåæ {batch['culture']} ‚Ä¢ {batch['volume']} —Ç\n"
        text += f"   üí∞ {batch['price']:,.0f} ‚ÇΩ/—Ç\n"
        text += f"   üìç {batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"   ‚≠ê {batch.get('quality_class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"   üë§ {batch['farmer_name']}\n\n"
    
    if len(found_batches) > 10:
        text += f"<i>... –∏ –µ—â—ë {len(found_batches) - 10} –ø–∞—Ä—Ç–∏–π</i>\n\n"
    
    text += "üí° <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ñ–µ—Ä–º–µ—Ä–æ–º.</b>"
    
    await message.answer(text, parse_mode='HTML')

def matches_search_criteria(batch, search_params):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–∞—Ä—Ç–∏–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞"""
    if batch.get('status') != '–ê–∫—Ç–∏–≤–Ω–∞':
        return False
    if search_params.get('culture') and batch['culture'] != search_params['culture']:
        return False
    if search_params.get('region') and batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω') != search_params['region']:
        return False
    if search_params.get('min_volume', 0) > 0 and batch['volume'] < search_params['min_volume']:
        return False
    if (search_params.get('max_volume', 0) > 0 and 
        search_params['max_volume'] < batch['volume']):
        return False
    if search_params.get('min_price', 0) > 0 and batch['price'] < search_params['min_price']:
        return False
    if (search_params.get('max_price', 0) > 0 and 
        search_params['max_price'] < batch['price']):
        return False
    if (search_params.get('quality_class') and 
        batch.get('quality_class') != search_params.get('quality_class')):
        return False
    if (search_params.get('storage_type') and 
        batch.get('storage_type') != search_params.get('storage_type')):
        return False
    
    return True

@dp.callback_query_handler(lambda c: c.data.startswith('attach_files:'), state='*')
async def attach_files_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫ –ø–∞—Ä—Ç–∏–∏"""
    batch_id = parse_callback_id(callback.data)  
    await state.update_data(attach_batch_id=batch_id)
    
    await callback.message.edit_text(
        f"üìé <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫ –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ, PDF, –¥–æ–∫—É–º–µ–Ω—Ç—ã):\n"
        "‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞\n"
        "‚Ä¢ –§–æ—Ç–æ –∑–µ—Ä–Ω–∞\n" 
        "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–∞—Ä—Ç–∏—é\n"
        "‚Ä¢ –î—Ä—É–≥–∏–µ relevant —Ñ–∞–π–ª—ã\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /done",
        parse_mode='HTML'
    )
    await AttachFilesStatesGroup.upload_files.set()
    await callback.answer()

@dp.message_handler(content_types=['photo', 'document'], state=AttachFilesStatesGroup.upload_files)
async def attach_files_upload(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    data = await state.get_data()
    batch_id = data.get('attach_batch_id')
    user_id = message.from_user.id
    batch = None
    farmer_id = None
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–∞—Ä—Ç–∏—é —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, user_batches in batches.items():
        for b in user_batches:
            if b['id'] == batch_id:
                batch = b
                farmer_id = uid
                break
        if batch:
            break
    
    if not batch:
        await message.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.finish()
        return
    if 'files' not in batch:
        batch['files'] = []
    file_info = None
    if message.photo:
        file_info = {
            'type': 'photo',
            'file_id': message.photo[-1].file_id,
            'caption': message.caption or '',
            'uploaded_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    elif message.document:
        file_info = {
            'type': 'document',
            'file_id': message.document.file_id,
            'file_name': message.document.file_name,
            'mime_type': message.document.mime_type,
            'caption': message.caption or '',
            'uploaded_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    
    if file_info:
        batch['files'].append(file_info)
        save_batches_to_pickle()
        if gs and gs.spreadsheet:
            gs.update_batch_in_sheets(batch)
        
        await message.answer(
            f"‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω ({len(batch['files'])} –≤—Å–µ–≥–æ)\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )

@dp.message_handler(commands=['done'], state=AttachFilesStatesGroup.upload_files)
async def attach_files_done(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    data = await state.get_data()
    batch_id = data.get('attach_batch_id')
    user_id = message.from_user.id
    
    batch = None
    farmer_id = None
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–∞—Ä—Ç–∏—é —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, user_batches in batches.items():
        for b in user_batches:
            if b['id'] == batch_id:
                batch = b
                farmer_id = uid
                break
        if batch:
            break
    
    await state.finish()
    
    files_count = len(batch.get('files', [])) if batch else 0
    
    role = users[user_id].get('role')
    keyboard = get_role_keyboard(role)
    
    await message.answer(
        f"‚úÖ <b>–§–∞–π–ª—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã!</b>\n\n"
        f"–ü–∞—Ä—Ç–∏—è #{batch_id}\n"
        f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {files_count}",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await view_batch_details_direct(message, batch_id, user_id)

@dp.callback_query_handler(lambda c: c.data.startswith('view_files:'), state='*')
async def view_batch_files(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤ –ø–∞—Ä—Ç–∏–∏"""
    batch_id = parse_callback_id(callback.data)  
    user_id = callback.from_user.id
    batch = None
    farmer_id = None
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–∞—Ä—Ç–∏—é —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, user_batches in batches.items():
        for b in user_batches:
            if b['id'] == batch_id:
                batch = b
                farmer_id = uid
                break
        if batch:
            break
    
    if not batch or not batch.get('files'):
        await callback.answer("üìé –§–∞–π–ª–æ–≤ –Ω–µ—Ç", show_alert=True)
        return
    
    await callback.message.answer(
        f"üìé <b>–§–∞–π–ª—ã –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
        f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(batch['files'])}",
        parse_mode='HTML'
    )
    for file_info in batch['files']:
        try:
            if file_info['type'] == 'photo':
                await callback.message.answer_photo(
                    file_info['file_id'],
                    caption=file_info.get('caption', '') or f"üì∑ –§–æ—Ç–æ –¥–ª—è –ø–∞—Ä—Ç–∏–∏ #{batch_id}"
                )
            elif file_info['type'] == 'document':
                caption = f"üìÑ {file_info.get('file_name', '–î–æ–∫—É–º–µ–Ω—Ç')}"
                if file_info.get('caption'):
                    caption += f"\n{file_info['caption']}"
                
                await callback.message.answer_document(
                    file_info['file_id'],
                    caption=caption
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await callback.message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {file_info.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')}"
            )
    
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "back_to_pulls", state='*')
async def back_to_pulls(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—É–ª–æ–≤"""
    user_id = callback.from_user.id
    
    if user_id not in users or users[user_id].get('role') != 'exporter':
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    my_pulls = {k: v for k, v in pulls.items() if v['exporter_id'] == user_id}
    
    if not my_pulls:
        await callback.message.edit_text("üì¶ –£ –≤–∞—Å –Ω–µ—Ç –ø—É–ª–æ–≤")
        await callback.answer()
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for pull_id, pull in my_pulls.items():
        status_emoji = {
            '–û—Ç–∫—Ä—ã—Ç': 'üü¢',
            '–í —Ä–∞–±–æ—Ç–µ': 'üü°',
            '–ó–∞–∫—Ä—ã—Ç': 'üî¥',
            '–ó–∞–≤–µ—Ä—à—ë–Ω': '‚úÖ'
        }.get(pull.get('status', '–û—Ç–∫—Ä—ã—Ç'), 'üì¶')
        
        progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
        
        has_matches = any(m['pull_id'] == pull_id and m['status'] == 'active' 
                         for m in matches.values())
        match_emoji = "üéØ " if has_matches else ""
        
        button_text = (
            f"{match_emoji}{status_emoji} {pull['culture']} - {pull['current_volume']:.0f}/"
            f"{pull['target_volume']:.0f} —Ç ({progress:.0f}%)"
        )
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"view_pull:{pull_id}")
        )
    
    await callback.message.edit_text(
        f"üì¶ <b>–í–∞—à–∏ –ø—É–ª—ã</b> ({len(my_pulls)} —à—Ç.)\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "back_to_deals", state='*')
async def back_to_deals(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å–¥–µ–ª–æ–∫"""
    user_id = callback.from_user.id
    
    user_deals = []
    for deal_id, deal in deals.items():
        if (deal.get('exporter_id') == user_id or 
            user_id in deal.get('farmer_ids', []) or
            deal.get('logistic_id') == user_id or
            deal.get('expeditor_id') == user_id):
            user_deals.append(deal)
    
    if not user_deals:
        await callback.message.edit_text("üìã –£ –≤–∞—Å –Ω–µ—Ç —Å–¥–µ–ª–æ–∫")
        await callback.answer()
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for deal in user_deals[:10]:
        status_emoji = {
            'pending': 'üîÑ',
            'matched': 'üéØ',
            'shipping': 'üöõ',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(deal.get('status', 'pending'), 'üìã')
        
        deal_info = f"–°–¥–µ–ª–∫–∞ #{deal['id']}"
        if deal.get('total_volume'):
            deal_info += f" - {deal['total_volume']} —Ç"
        
        button_text = f"{status_emoji} {deal_info}"
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"view_deal:{deal['id']}")
        )
    
    await callback.message.edit_text(
        f"üìã <b>–í–∞—à–∏ —Å–¥–µ–ª–∫–∏</b> ({len(user_deals)} —à—Ç.)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.message_handler(commands=['stats'], state='*')
@dp.message_handler(commands=['help'], state='*')
async def cmd_help(message: types.Message, state: FSMContext):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer(
            "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Exportum</b>\n\n"
            "Exportum - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–µ—Ä–Ω–æ–º\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å\n"
            "3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å\n"
            "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:\n"
            "‚Ä¢ üåæ –§–µ—Ä–º–µ—Ä - –ø—Ä–æ–¥–∞–∂–∞ –∑–µ—Ä–Ω–∞\n"
            "‚Ä¢ üì¶ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä - –ø–æ–∫—É–ø–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç\n"
            "‚Ä¢ üöö –õ–æ–≥–∏—Å—Ç - –ø–µ—Ä–µ–≤–æ–∑–∫–∏\n"
            "‚Ä¢ üöõ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä - –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            parse_mode='HTML'
        )
        return
    
    user = users[user_id]
    role = user.get('role')
    
    text = f"‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è {ROLES.get(role, role)}</b>\n\n"
    
    if role == 'farmer':
        text += (
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–π:</b>\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É, –æ–±—ä—ë–º, —Ü–µ–Ω—É\n"
            "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞\n"
            "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ñ–æ—Ç–æ\n\n"
            
            "üîç <b>–ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤:</b>\n"  
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –ø—É–ª–∞–º\n"
            "‚Ä¢ –†—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö\n\n"
            
            "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏—è–º–∏:</b>\n"
            "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
            
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã\n"
            "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
            "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞"
        )
    
    elif role == 'exporter':
        text += (
            "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–æ–≤:</b>\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–µ—Ä–Ω—É\n"
            "‚Ä¢ –ó–∞–¥–∞–π—Ç–µ —Ü–µ–Ω—É FOB\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –æ—Ç–≥—Ä—É–∑–∫–∏\n\n"
            
            "üîç <b>–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π:</b>\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∏ –∫–∞—á–µ—Å—Ç–≤—É\n\n"
            
            "üöö <b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É\n"
            "‚Ä¢ –í—ã–±–æ—Ä –ª–æ–≥–∏—Å—Ç–æ–≤\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
            
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ß—ë—Ç–∫–æ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –ø—É–ª—ã"
        )
    
    elif role == 'logistic':
        text += (
            "üöö <b>–í–∞—à–∏ —É—Å–ª—É–≥–∏:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–≥–∏—Å—Ç–∞\n"
            "‚Ä¢ –£–∫–∞–∑–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤\n"
            "‚Ä¢ –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏\n\n"
            
            "üìã <b>–†–∞–±–æ—Ç–∞ —Å –∑–∞—è–≤–∫–∞–º–∏:</b>\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–æ–∏—Ö —É—Å–ª—É–≥\n"
            "‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º–∏\n\n"
            
            "üíº <b>–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤\n"
            "‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏\n\n"
            
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã\n"
            "‚Ä¢ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ –Ω–∞ –∑–∞—è–≤–∫–∏\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        )
    
    elif role == 'expeditor':
        text += (
            "üöõ <b>–í–∞—à–∏ —É—Å–ª—É–≥–∏:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞\n"
            "‚Ä¢ –£–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥ –∏ —Ç–∞—Ä–∏—Ñ–æ–≤\n"
            "‚Ä¢ –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\n\n"
            
            "üìã <b>–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:</b>\n"
            "‚Ä¢ –§–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n"
            "‚Ä¢ –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞\n"
            "‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞\n\n"
            
            "üíº <b>–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫\n"
            "‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n\n"
            
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ß—ë—Ç–∫–æ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ —É—Å–ª—É–≥–∏\n"
            "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—Ä–æ–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é"
        )
    
    text += "\n\nüìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @exportum_support"
    
    await message.answer(text, parse_mode='HTML')

@dp.callback_query_handler(lambda c: c.data.startswith('edit_batch:'), state='*')
async def start_edit_batch(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏"""
    batch_id = parse_callback_id(callback.data)  
    user_id = callback.from_user.id
    batch = None
    farmer_id = None
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–∞—Ä—Ç–∏—é —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, user_batches in batches.items():
        for b in user_batches:
            if b['id'] == batch_id:
                batch = b
                farmer_id = uid
                break
        if batch:
            break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    await state.update_data(editing_batch_id=batch_id)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=edit_batch_fields_keyboard(batch_id),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('edit_field:'), state='*')
async def edit_batch_field_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏"""
    field = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    batch_id = data.get('editing_batch_id')
    
    if not batch_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    await state.update_data(edit_field=field, editing_batch_id=batch_id)
    field_names = {
        'price': '–Ω–æ–≤—É—é —Ü–µ–Ω—É (‚ÇΩ/—Ç–æ–Ω–Ω–∞)',
        'volume': '–Ω–æ–≤—ã–π –æ–±—ä—ë–º (–≤ —Ç–æ–Ω–Ω–∞—Ö)',
        'humidity': '–Ω–æ–≤—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å (%)',
        'impurity': '–Ω–æ–≤—É—é —Å–æ—Ä–Ω–æ—Å—Ç—å (%)',
        'quality_class': '–Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞',
        'storage_type': '–Ω–æ–≤—ã–π —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è',
        'readiness_date': '–Ω–æ–≤—É—é –¥–∞—Ç—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–î–î.–ú–ú.–ì–ì–ì–ì)',
        'status': '–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å'
    }
    
    if field == 'status':
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
            reply_markup=status_keyboard(),
            parse_mode='HTML'
        )
        await EditBatch.new_value.set()
    elif field == 'quality_class':
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞:",
            reply_markup=quality_class_keyboard(),
            parse_mode='HTML'
        )
        await EditBatch.new_value.set()
    elif field == 'storage_type':
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=storage_type_keyboard(),
            parse_mode='HTML'
        )
        await EditBatch.new_value.set()
    else:
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ {field_names.get(field, '–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')}:"
        )
        await EditBatch.new_value.set()
    
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('status:'), state=EditBatch.new_value)
async def edit_batch_status_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏"""
    new_status = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    batch_id = data.get('editing_batch_id')
    user_id = callback.from_user.id
    
    if not batch_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
    batch = None
    farmer_id = None
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–∞—Ä—Ç–∏—é —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, user_batches in batches.items():
        for b in user_batches:
            if b['id'] == batch_id:
                batch = b
                farmer_id = uid
                break
        if batch:
            break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
    old_value = batch.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')
    batch['status'] = new_status
    save_batches_to_pickle()
    if gs and gs.spreadsheet:
        gs.update_batch_in_sheets(batch)
    
    await state.finish()
    await callback.message.edit_text(
        f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
        f"–ü–∞—Ä—Ç–∏—è #{batch_id}\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_status}"
    )
    await asyncio.sleep(1)
    await view_batch_details_direct(callback.message, batch_id, user_id)
    await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")

@dp.callback_query_handler(lambda c: c.data.startswith('quality:'), state=EditBatch.new_value)
async def edit_batch_quality_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏"""
    new_quality = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    batch_id = data.get('editing_batch_id')
    user_id = callback.from_user.id
    
    if not batch_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
    batch = None
    farmer_id = None
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–∞—Ä—Ç–∏—é —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, user_batches in batches.items():
        for b in user_batches:
            if b['id'] == batch_id:
                batch = b
                farmer_id = uid
                break
        if batch:
            break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
    old_value = batch.get('quality_class', '–ù–µ —É–∫–∞–∑–∞–Ω')
    batch['quality_class'] = new_quality
    save_batches_to_pickle()
    if gs and gs.spreadsheet:
        gs.update_batch_in_sheets(batch)
    
    await state.finish()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ö–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
        f"–ü–∞—Ä—Ç–∏—è #{batch_id}\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_quality}"
    )
    await asyncio.sleep(1)
    await view_batch_details_direct(callback.message, batch_id, user_id)
    await callback.answer("‚úÖ –ö–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª—ë–Ω")

@dp.callback_query_handler(lambda c: c.data.startswith('storage:'), state=EditBatch.new_value)
async def edit_batch_storage_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏"""
    new_storage = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    batch_id = data.get('editing_batch_id')
    user_id = callback.from_user.id
    
    if not batch_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
    batch = None
    farmer_id = None
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–∞—Ä—Ç–∏—é —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, user_batches in batches.items():
        for b in user_batches:
            if b['id'] == batch_id:
                batch = b
                farmer_id = uid
                break
        if batch:
            break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
    old_value = batch.get('storage_type', '–ù–µ —É–∫–∞–∑–∞–Ω')
    batch['storage_type'] = new_storage
    save_batches_to_pickle()
    if gs and gs.spreadsheet:
        gs.update_batch_in_sheets(batch)
    
    await state.finish()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
        f"–ü–∞—Ä—Ç–∏—è #{batch_id}\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_storage}"
    )
    await asyncio.sleep(1)
    await view_batch_details_direct(callback.message, batch_id, user_id)
    await callback.answer("‚úÖ –¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω")

@dp.message_handler(state=EditBatch.new_value)
async def edit_batch_new_value(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏"""
    data = await state.get_data()
    batch_id = data.get('editing_batch_id')
    field = data.get('edit_field')
    user_id = message.from_user.id
    
    if not batch_id or not field:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.finish()
        return
    batch = None
    farmer_id = None
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–∞—Ä—Ç–∏—é —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, user_batches in batches.items():
        for b in user_batches:
            if b['id'] == batch_id:
                batch = b
                farmer_id = uid
                break
        if batch:
            break
    
    if not batch:
        await message.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.finish()
        return
    
    new_value = message.text.strip()
    try:
        if field in ['price', 'volume', 'humidity', 'impurity']:
            new_value_float = float(new_value.replace(',', '.'))
            if field == 'price' and new_value_float <= 0:
                await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            elif field == 'volume' and new_value_float <= 0:
                await message.answer("‚ùå –û–±—ä—ë–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            elif field in ['humidity', 'impurity'] and not (0 <= new_value_float <= 100):
                await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            
            old_value = batch.get(field, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            batch[field] = new_value_float
            if field in ['humidity', 'impurity']:
                batch['quality_class'] = determine_quality_class(
                    batch.get('humidity', 0),
                    batch.get('impurity', 0)
                )
        
        elif field == 'readiness_date':
            if new_value.lower() == '—Å–µ–π—á–∞—Å':
                new_value = datetime.now().strftime('%d.%m.%Y')
            elif not validate_date(new_value):
                await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '—Å–µ–π—á–∞—Å'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            
            old_value = batch.get(field, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            batch[field] = new_value
        
        else:
            old_value = batch.get(field, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            batch[field] = new_value
        save_batches_to_pickle()
        if gs and gs.spreadsheet:
            gs.update_batch_in_sheets(batch)
        
        await state.finish()
        field_names_ru = {
            'price': '–¶–µ–Ω–∞',
            'volume': '–û–±—ä—ë–º',
            'humidity': '–í–ª–∞–∂–Ω–æ—Å—Ç—å',
            'impurity': '–°–æ—Ä–Ω–æ—Å—Ç—å',
            'readiness_date': '–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏'
        }
        
        role = users[user_id].get('role')
        keyboard = get_role_keyboard(role)
        
        await message.answer(
            f"‚úÖ <b>{field_names_ru.get(field, field.capitalize())} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"–ü–∞—Ä—Ç–∏—è #{batch_id}\n"
            f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
            f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await view_batch_details_direct(message, batch_id, user_id)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )

@dp.callback_query_handler(lambda c: c.data == 'edit_cancel', state='*')
async def edit_cancel(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.finish()
    await callback.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('delete_batch:'), state='*')
async def delete_batch_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏"""
    batch_id = parse_callback_id(callback.data)  
    user_id = callback.from_user.id
    batch_exists = False
    if user_id in batches:
        for b in batches[user_id]:
            if b['id'] == batch_id:
                batch_exists = True
                break
    
    if not batch_exists:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_batch:{batch_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_batch")
    )
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—Ç–∏—é #{batch_id}?\n\n"
        f"<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('confirm_delete_batch:'), state='*')
async def delete_batch_confirmed(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏"""
    await state.finish()
    
    try:
        batch_id = int(callback.data.split(':')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞!", show_alert=True)
        return
    
    user_id = callback.from_user.id
    
    # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—Ç–∏—é
    if user_id in batches:
        batches[user_id] = [b for b in batches[user_id] if b['id'] != batch_id]
        save_batches_to_pickle()
    
    # ‚úÖ –î–û–ë–ê–í–¨–¢–ï: –£–¥–∞–ª—è–µ–º –ø–∞—Ä—Ç–∏—é –∏–∑ –≤—Å–µ—Ö –ø—É–ª–æ–≤
    removed_from_pulls = []
    for pull_id, participants in list(pullparticipants.items()):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —ç—Ç–∞ –ø–∞—Ä—Ç–∏—è –≤ –ø—É–ª–µ
        old_count = len(participants)
        pullparticipants[pull_id] = [
            p for p in participants 
            if p['batch_id'] != batch_id
        ]
        
        # –ï—Å–ª–∏ –ø–∞—Ä—Ç–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø—É–ª–∞
        if len(pullparticipants[pull_id]) < old_count:
            removed_from_pulls.append(pull_id)
            
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä—ë–º –ø—É–ª–∞
            if pull_id in pulls:
                pulls[pull_id]['current_volume'] = sum(
                    p['volume'] for p in pullparticipants[pull_id]
                )
                logging.info(f"üîÑ –ü—É–ª #{pull_id}: –æ–±—ä—ë–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω ‚Üí {pulls[pull_id]['current_volume']} —Ç")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if removed_from_pulls:
        save_pulls_to_pickle()
        logging.info(f"üóëÔ∏è –ü–∞—Ä—Ç–∏—è #{batch_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø—É–ª–æ–≤: {removed_from_pulls}")
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ Google Sheets
    if gs and gs.spreadsheet:
        try:
            gs.delete_batch_from_sheets(batch_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ Google Sheets: {e}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"‚úÖ –ü–∞—Ä—Ç–∏—è <b>#{batch_id}</b> —É–¥–∞–ª–µ–Ω–∞!"
    if removed_from_pulls:
        message += f"\nüîÑ –¢–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø—É–ª–æ–≤: {', '.join(f'#{pid}' for pid in removed_from_pulls)}"
    
    await callback.message.edit_text(message, parse_mode='HTML')
    await callback.answer()



@dp.callback_query_handler(lambda c: c.data == 'cancel_delete_batch', state='*')
async def cancel_delete_batch(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    await state.finish()
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('editfield_crop_'), state='*')
async def edit_crop_field(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É–ª—å—Ç—É—Ä—ã"""
    await state.finish()
    
    try:
        batch_id = int(callback.data.split('_')[2])
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ batch_id: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    user_id = callback.from_user.id
    load_batches_from_pickle()
    
    batch = None
    farmer_id = None
    for f_id, user_batches in batches.items():
        for b in user_batches:
            if isinstance(b, dict) and b.get('id') == batch_id:
                batch = b
                farmer_id = f_id
                break
        if batch:
            break
    
    if not batch or farmer_id != user_id:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    await state.update_data(batch_id=batch_id)
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    cultures = ['–ü—à–µ–Ω–∏—Ü–∞', '–ö—É–∫—É—Ä—É–∑–∞', '–Ø—á–º–µ–Ω—å', '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫', '–†–∞–ø—Å', '–°–æ—è']
    
    for culture in cultures:
        keyboard.insert(InlineKeyboardButton(culture, callback_data=f"setcrop_{batch_id}_{culture}"))
    
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"editcancel_{batch_id}"))
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é <b>–∫—É–ª—å—Ç—É—Ä—É</b>:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('setcrop_'), state='*')
async def set_crop_value(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π –∫—É–ª—å—Ç—É—Ä—ã"""
    await state.finish()
    
    try:
        parts = callback.data.split('_')
        batch_id = int(parts[1])
        new_crop = '_'.join(parts[2:])
    except (IndexError, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    user_id = callback.from_user.id
    load_batches_from_pickle()
    
    updated = False
    old_crop = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    for farmer_id, user_batches in batches.items():
        if farmer_id != user_id:
            continue
        for batch in user_batches:
            if isinstance(batch, dict) and batch.get('id') == batch_id:
                old_crop = batch.get('culture', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                batch['culture'] = new_crop
                updated = True
                break
        if updated:
            break
    
    if not updated:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", show_alert=True)
        return
    
    save_batches(batches)
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ö—É–ª—å—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        f"–ü–∞—Ä—Ç–∏—è #{batch_id}\n"
        f"–ë—ã–ª–æ: {old_crop}\n"
        f"–°—Ç–∞–ª–æ: {new_crop}",
        reply_markup=batch_actions_keyboard(batch_id),
        parse_mode='HTML'
    )
    await callback.answer("‚úÖ –ö—É–ª—å—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")


@dp.callback_query_handler(lambda c: c.data == 'canceldeletebatch', state='*')
async def cancel_delete_batch(callback: types.CallbackQuery, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.finish()
    
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('editpull_'), state='*')
async def start_edit_pull(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–ª–∞"""
    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–∞—Ä—Å–∏–º —á–µ—Ä–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
        pull_id = parse_callback_id(callback.data)
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    user_id = callback.from_user.id
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    if pull['exporter_id'] != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ –ø—É–ª–∞", show_alert=True)
        return
    
    await state.update_data(editing_pull_id=pull_id)
    
    try:
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ #{pull_id}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=edit_pull_fields_keyboard(),
            parse_mode='HTML'
        )
    except MessageNotModified:
        pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º –≤–∏–¥–µ
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('edit_pull_field:'), state='*')
async def edit_pull_field_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–ª–∞"""
    field = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    pull_id = data.get('editing_pull_id')
    
    if not pull_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(edit_pull_field=field, editing_pull_id=pull_id)
    
    field_names = {
        'culture': '–Ω–æ–≤—É—é –∫—É–ª—å—Ç—É—Ä—É',
        'volume': '–Ω–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π –æ–±—ä—ë–º (–≤ —Ç–æ–Ω–Ω–∞—Ö)',
        'price': '–Ω–æ–≤—É—é —Ü–µ–Ω—É FOB ($/—Ç–æ–Ω–Ω–∞)',
        'port': '–Ω–æ–≤—ã–π –ø–æ—Ä—Ç –æ—Ç–≥—Ä—É–∑–∫–∏',
        'moisture': '–Ω–æ–≤—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å (%)',
        'nature': '–Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –Ω–∞—Ç—É—Ä—É (–≥/–ª)',
        'impurity': '–Ω–æ–≤—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–æ—Ä–Ω–æ—Å—Ç—å (%)',
        'weed': '–Ω–æ–≤—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å (%)'
    }
    
    if field == 'culture':
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ #{pull_id}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫—É–ª—å—Ç—É—Ä—É:",
            reply_markup=culture_keyboard()
        )
        await EditPullStatesGroup.edit_culture.set()
    elif field == 'port':
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ #{pull_id}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—Ç:",
            reply_markup=port_keyboard()
        )
        await EditPullStatesGroup.edit_port.set()
    else:
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ #{pull_id}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ {field_names.get(field, '–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')}:"
        )
        state_mapping = {
            'volume': EditPullStatesGroup.edit_volume,
            'price': EditPullStatesGroup.edit_price,
            'moisture': EditPullStatesGroup.edit_moisture,
            'nature': EditPullStatesGroup.edit_nature,
            'impurity': EditPullStatesGroup.edit_impurity,
            'weed': EditPullStatesGroup.edit_weed
        }
        
        await state_mapping.get(field, EditPullStatesGroup.edit_volume).set()
    
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('culture:'), state=EditPullStatesGroup.edit_culture)
async def edit_pull_culture(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É–ª—å—Ç—É—Ä—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    new_culture = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    pull_id = data.get('editing_pull_id')
    
    if not pull_id or pull_id not in pulls:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.finish()
        return
    
    pull = pulls[pull_id]
    old_value = pull['culture']
    pull['culture'] = new_culture
    
    save_pulls_to_pickle()
    
    if gs and gs.spreadsheet:
        gs.update_pull_in_sheets(pull)
    
    await state.finish()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ö—É–ª—å—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        f"–ü—É–ª #{pull_id}\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_culture}"
    )
    await asyncio.sleep(1)
    await callback.answer("‚úÖ –ö—É–ª—å—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

@dp.callback_query_handler(lambda c: c.data.startswith('port:'), state=EditPullStatesGroup.edit_port)
async def edit_pull_port(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    port_index = parse_callback_id(callback.data)
    ports = [
        "–ê—Ä–∏–±",
        "–ê—Ä–∏–±-–°–Ω–∞–±",
        "–ö–ó–ö",
        "–ü–ö–§ –Æ–¢",
        "–ü–ö–§ –í–ü",
        "–ê—Å—Ç—Ä –ü–æ—Ä—Ç",
        "–ê—Å—Ç—Ä –£–Ω–∏–≤",
        "–ê—Å—Ç—Ä –Æ–∂–Ω",
        "–ó–Æ–ô–î-–í–ï–°–¢",
        "–ê–≥—Ä–æ–§—É–¥",
        "–ü–æ—Ä—Ç 83",
        "–ü–ö–§ –¶–ì–ü",
        "–ê—Å—Ç—Ä –∑–µ—Ä–Ω",
        "–ê—Å—Ç—Ä –º–æ—Ä—Å–∫"
    ]

    new_port = ports[port_index] if port_index < len(ports) else '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å'
    
    data = await state.get_data()
    pull_id = data.get('editing_pull_id')
    
    if not pull_id or pull_id not in pulls:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.finish()
        return
    
    pull = pulls[pull_id]
    old_value = pull['port']
    pull['port'] = new_port
    
    save_pulls_to_pickle()
    
    if gs and gs.spreadsheet:
        gs.update_pull_in_sheets(pull)
    
    await state.finish()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü–æ—Ä—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
        f"–ü—É–ª #{pull_id}\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_port}"
    )
    await asyncio.sleep(1)
    await view_pull_details(callback)
    await callback.answer("‚úÖ –ü–æ—Ä—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")

@dp.message_handler(state=EditPullStatesGroup.edit_volume)
async def edit_pull_volume(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—ä—ë–º–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    await edit_pull_numeric_field(message, state, 'target_volume', '–û–±—ä—ë–º')

@dp.message_handler(state=EditPullStatesGroup.edit_price)
async def edit_pull_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    await edit_pull_numeric_field(message, state, 'price', '–¶–µ–Ω–∞')

@dp.message_handler(state=EditPullStatesGroup.edit_moisture)
async def edit_pull_moisture(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    await edit_pull_numeric_field(message, state, 'moisture', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', 0, 100)

@dp.message_handler(state=EditPullStatesGroup.edit_nature)
async def edit_pull_nature(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—Ç—É—Ä—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    await edit_pull_numeric_field(message, state, 'nature', '–ù–∞—Ç—É—Ä–∞')

@dp.message_handler(state=EditPullStatesGroup.edit_impurity)
async def edit_pull_impurity(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ—Ä–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    await edit_pull_numeric_field(message, state, 'impurity', '–°–æ—Ä–Ω–æ—Å—Ç—å', 0, 100)

@dp.message_handler(state=EditPullStatesGroup.edit_weed)
async def edit_pull_weed(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    await edit_pull_numeric_field(message, state, 'weed', '–ó–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å', 0, 100)

async def edit_pull_numeric_field(message: types.Message, state: FSMContext, field: str, field_name: str, min_val: float = 0, max_val: float = None):
    try:
        new_value = float(message.text.strip().replace(',', '.'))
        
        if new_value < min_val:
            await message.answer(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ {min_val}")
            return
        
        if max_val is not None and new_value > max_val:
            await message.answer(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ {max_val}")
            return
        
        data = await state.get_data()
        pull_id = data.get('editing_pull_id')
        
        if not pull_id or pull_id not in pulls:
            await message.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.finish()
            return
        
        pull = pulls[pull_id]
        old_value = pull.get(field, 0)
        pull[field] = new_value
        
        save_pulls_to_pickle()
        
        if gs and gs.spreadsheet:
            gs.update_pull_in_sheets(pull)
        
        await state.finish()
        
        keyboard = get_role_keyboard('exporter')
        await message.answer(
            f"‚úÖ <b>{field_name} –∏–∑–º–µ–Ω–µ–Ω–∞!</b>\n\n"
            f"–ü—É–ª #{pull_id}\n"
            f"–ë—ã–ª–æ: {old_value}\n"
            f"–°—Ç–∞–ª–æ: {new_value}",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–º–µ—Å—Ç–æ view_pull_details_direct –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç
        # –ò–ª–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä–µ–∑ callback
        # await view_pull_details_direct(message, pull_id)
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@dp.callback_query_handler(lambda c: c.data.startswith('viewpull:'), state='*')
async def viewpulldetailscallback(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø—É–ª–∞"""
    await state.finish()
    
    try:
        pullid = parse_callback_id(callback.data)
    except (IndexError, ValueError) as e:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—É–ª–∞', show_alert=True)
        return
    
    userid = callback.from_user.id
    
    if pullid not in pulls:
        await callback.answer('‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return
    
    pull = pulls[pullid]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∏ ID
    isowner = (pull.get('exporter_id') == userid and 
               users.get(userid, {}).get('role') == 'exporter')
    
    progress = (pull.get('current_volume', 0) / pull.get('target_volume', 1)) * 100 if pull.get('target_volume', 0) > 0 else 0
    
    text = (
        f"<b>üåæ –ü—É–ª #{pullid}</b>\n\n"
        f"üìä <b>–ö—É–ª—å—Ç—É—Ä–∞:</b> {pull.get('culture', '–ù/–î')}\n"
        f"üì¶ <b>–û–±—ä—ë–º:</b> {pull.get('current_volume', 0):.0f}/{pull.get('target_volume', 0):.0f} —Ç–æ–Ω–Ω ({progress:.0f}%)\n"
        f"üí∞ <b>–¶–µ–Ω–∞ FOB:</b> ${pull.get('price', 0):,.0f}/—Ç–æ–Ω–Ω–∞\n"
        f"üö¢ <b>–ü–æ—Ä—Ç:</b> {pull.get('port', '–ù/–î')}\n\n"
        f"<b>üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É:</b>\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: –¥–æ {pull.get('moisture', 0)}%\n"
        f"üåæ –ù–∞—Ç—É—Ä–∞: –æ—Ç {pull.get('nature', 0)} –≥/–ª\n"
        f"üî¨ –°–æ—Ä–Ω–æ—Å—Ç—å: –¥–æ {pull.get('impurity', 0)}%\n"
        f"üåø –ó–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å: –¥–æ {pull.get('weed', 0)}%\n\n"
        f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {pull.get('documents', '–ù–µ—Ç')}\n"
        f"üìã –°—Ç–∞—Ç—É—Å: {pull.get('status', '–ê–∫—Ç–∏–≤–µ–Ω')}\n"
        f"üóì –°–æ–∑–¥–∞–Ω: {pull.get('created_at', '–ù/–î')}"
    )
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if isowner:
        keyboard.add(
            InlineKeyboardButton('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'editpull_{pullid}'),
            InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'deletepull_{pullid}')
        )
        keyboard.add(
            InlineKeyboardButton('üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏', callback_data=f'viewpullparticipants_{pullid}'),
            InlineKeyboardButton('ü§ù –ú–∞—Ç—á–∏', callback_data=f'viewpullmatches_{pullid}')
        )
        keyboard.add(
            InlineKeyboardButton('üîí –ó–∞–∫—Ä—ã—Ç—å –ø—É–ª', callback_data=f'close_pull_{pullid}')
        )
    else:
        keyboard.add(
            InlineKeyboardButton('ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data=f'join_pull:{pullid}')  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û!
        )
    
    keyboard.add(
        InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_pools_list')
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–õ–ê–î–ö–ò ====================
# ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –í–´–®–ï –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤!

async def debug_pull_deletion(pullid: int):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–∞"""
    logging.info(f"=== DEBUG: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–∞ {pullid} ===")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ –ø–∞–º—è—Ç–∏
    in_memory = pullid in pulls
    logging.info(f"–í –ø–∞–º—è—Ç–∏ (pulls dict): {in_memory}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ pickle
    try:
        with open(PULLSFILE, 'rb') as f:
            saved_pulls = pickle.load(f)
            in_pickle = pullid in saved_pulls.get('pulls', {})
            logging.info(f"–í pickle —Ñ–∞–π–ª–µ: {in_pickle}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è pickle: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤ Google Sheets
    if gs and gs.spreadsheet:
        try:
            worksheet = gs.spreadsheet.worksheet('Pulls')
            all_values = worksheet.get_all_values()
            
            found_in_sheets = False
            for row in all_values[1:]:
                if row and len(row) > 0:
                    try:
                        if int(row[0]) == pullid:
                            found_in_sheets = True
                            break
                    except (ValueError, IndexError):
                        continue
            
            logging.info(f"–í Google Sheets: {found_in_sheets}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Google Sheets: {e}")
    
    logging.info("=== DEBUG: –ó–∞–≤–µ—Ä—à–µ–Ω–æ ===")


async def notify_logistic_pull_closed(pullid: int):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ª–æ–≥–∏—Å—Ç–æ–≤ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ª–æ–≥–∏—Å—Ç–æ–≤
        logistics = [uid for uid, user in users.items() if user.get('role') == 'logistic']
        
        if pullid not in pulls:
            logging.error(f"–ü—É–ª {pullid} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–æ–≤")
            return
        
        pull = pulls[pullid]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üîî <b>–ü—É–ª #{pullid} –∑–∞–∫—Ä—ã—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –ª–æ–≥–∏—Å—Ç–∏–∫–µ</b>\n\n"
            f"üåæ <b>–ö—É–ª—å—Ç—É—Ä–∞:</b> {pull.get('culture', '–ù/–î')}\n"
            f"üì¶ <b>–û–±—ä—ë–º:</b> {pull.get('targetvolume', 0)} —Ç–æ–Ω–Ω\n"
            f"üí∞ <b>–¶–µ–Ω–∞ FOB:</b> ${pull.get('price', 0):,.0f}/—Ç–æ–Ω–Ω–∞\n"
            f"üö¢ <b>–ü–æ—Ä—Ç:</b> {pull.get('port', '–ù/–î')}\n\n"
            f"üìã –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É —ç—Ç–æ–≥–æ –ø—É–ª–∞."
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ª–æ–≥–∏—Å—Ç–∞–º
        for logistic_id in logistics:
            try:
                await bot.send_message(logistic_id, message, parse_mode='HTML')
                logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ {pullid} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Å—Ç—É {logistic_id}")
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∞ {logistic_id}: {e}")
        
        logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–∞ {pullid} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {len(logistics)} –ª–æ–≥–∏—Å—Ç–∞–º")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ notify_logistic_pull_closed: {e}")

# ==================== –ù–ê–ß–ê–õ–û –£–î–ê–õ–ï–ù–ò–Ø –ü–£–õ–ê ====================
@dp.callback_query_handler(lambda c: c.data.startswith('deletepull_'), state='*')
async def deletepullstart_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–∞"""
    try:
        pullid = parse_callback_id(callback.data)
    except (IndexError, ValueError) as e:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—É–ª–∞', show_alert=True)
        return
    
    userid = callback.from_user.id
    
    if pullid not in pulls:
        await callback.answer('‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return
    
    pull = pulls[pullid]
    
    if pull.get('exporter_id') != userid:
        await callback.answer('‚ùå –¢–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç–µ–ª—å –ø—É–ª–∞ –º–æ–∂–µ—Ç –µ–≥–æ —É–¥–∞–ª–∏—Ç—å', show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton('‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data=f'confirmdeletepull_{pullid}'),
        InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='canceldeletepull')
    )
    
    await callback.message.edit_text(
        f"<b>‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—É–ª ‚Ññ{pullid}?\n\n"
        f"üåæ <b>–ö—É–ª—å—Ç—É—Ä–∞:</b> {pull.get('culture', '–ù/–î')}\n"
        f"üì¶ <b>–û–±—ä—ë–º:</b> {pull.get('targetvolume', 0)} —Ç–æ–Ω–Ω\n"
        f"üí∞ <b>–¶–µ–Ω–∞ FOB:</b> ${pull.get('price', 0):,.0f}/—Ç–æ–Ω–Ω–∞\n\n"
        f"<b>‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await callback.answer()


# ==================== –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –£–î–ê–õ–ï–ù–ò–Ø ====================
@dp.callback_query_handler(lambda c: c.data.startswith('confirmdeletepull_'), state='*')
async def deletepullconfirmed_callback(callback: types.CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø—É–ª–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    await state.finish()
    
    try:
        pullid = parse_callback_id(callback.data)
    except (IndexError, ValueError) as e:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø—É–ª–∞', show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏: {e}, data: {callback.data}")
        return
    
    userid = callback.from_user.id
    
    if pullid not in pulls:
        await callback.answer('‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return
    
    pull = pulls[pullid]
    
    if pull.get('exporter_id') != userid:
        await callback.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—É–ª–∞', show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    pull_culture = pull.get('culture', '–ù/–î')
    pull_volume = pull.get('targetvolume', 0)
    pull_price = pull.get('price', 0)
    
    # ========== –£–î–ê–õ–ï–ù–ò–ï –°–í–Ø–ó–ê–ù–ù–´–• –î–ê–ù–ù–´–• ==========
    
    # 1. –£–¥–∞–ª—è–µ–º –≤—Å–µ –º–∞—Ç—á–∏
    matches_to_delete = [mid for mid, m in matches.items() if m.get('pullid') == pullid]
    for mid in matches_to_delete:
        del matches[mid]
    
    # 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants = pullparticipants.get(pullid, [])
    if pullid in pullparticipants:
        del pullparticipants[pullid]
    
    # 3. –£–¥–∞–ª—è–µ–º —Å–∞–º –ø—É–ª
    del pulls[pullid]
    
    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    savepullstopickle()  # ‚Üê –í–û–¢ –¢–£–¢ –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò!
    
    # ========== –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –° GOOGLE SHEETS ==========
    if gs and gs.spreadsheet:
        try:
            worksheet = gs.spreadsheet.worksheet('Pulls')
            all_values = worksheet.get_all_values()
            
            rows_to_delete = []
            for i, row in enumerate(all_values[1:], start=2):
                if row and len(row) > 0:
                    try:
                        if int(row[0]) == pullid:
                            rows_to_delete.append(i)
                    except (ValueError, IndexError):
                        continue
            
            for row_num in reversed(rows_to_delete):
                worksheet.delete_rows(row_num)
            
            logging.info(f"–ü—É–ª {pullid} —É–¥–∞–ª—ë–Ω –∏–∑ Google Sheets")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Google Sheets: {e}")
    
    # ========== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ==========
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for participant in participants:
        farmerid = participant.get('farmerid')
        if farmerid and farmerid in users:
            try:
                await bot.send_message(
                    farmerid,
                    f"<b>üóë –ü—É–ª ‚Ññ{pullid} –±—ã–ª —É–¥–∞–ª—ë–Ω</b>\n\n"
                    f"üåæ <b>–ö—É–ª—å—Ç—É—Ä–∞:</b> {pull_culture}\n"
                    f"üì¶ <b>–û–±—ä—ë–º:</b> {pull_volume} —Ç–æ–Ω–Ω\n"
                    f"üí∞ <b>–¶–µ–Ω–∞ FOB:</b> ${pull_price:,.0f}/—Ç–æ–Ω–Ω–∞\n\n"
                    f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä —É–¥–∞–ª–∏–ª —ç—Ç–æ—Ç –ø—É–ª. –ï—Å–ª–∏ —É –≤–∞—Å –±—ã–ª–∏ –ø–∞—Ä—Ç–∏–∏, –æ–Ω–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.",
                    parse_mode='HTML'
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ñ–µ—Ä–º–µ—Ä–∞ {farmerid}: {e}")
    
    # ========== –û–¢–í–ï–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ ==========
    await callback.message.edit_text(
        f"<b>‚úÖ –ü—É–ª ‚Ññ{pullid} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!</b>\n\n"
        f"üåæ <b>–ö—É–ª—å—Ç—É—Ä–∞:</b> {pull_culture}\n"
        f"üì¶ <b>–û–±—ä—ë–º:</b> {pull_volume} —Ç–æ–Ω–Ω\n"
        f"üí∞ <b>–¶–µ–Ω–∞ FOB:</b> ${pull_price:,.0f}/—Ç–æ–Ω–Ω–∞\n\n"
        f"üóë –£–¥–∞–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n"
        f"üóë –£–¥–∞–ª–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches_to_delete)}",
        parse_mode='HTML'
    )
    
    await callback.answer('‚úÖ –ü—É–ª —É–¥–∞–ª—ë–Ω!')
    
    logging.info(f"–ü—É–ª {pullid} —É–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {userid}. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}, –º–∞—Ç—á–µ–π: {len(matches_to_delete)}")


# ==================== –û–¢–ú–ï–ù–ê –£–î–ê–õ–ï–ù–ò–Ø ====================
@dp.callback_query_handler(lambda c: c.data == 'canceldeletepull', state='*')
async def canceldeletepull_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–∞"""
    await state.finish()
    
    await callback.message.edit_text(
        "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü—É–ª –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω."
    )
    
    await callback.answer()

    await callback.message.edit_text(
        f"üîí <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–ª–∞</b>\n\n"
        f"üÜî –ü—É–ª–ª #{pull_id}\n"
        f"üåæ {pull.get('culture', 'N/A')}\n"
        f"üì¶ {pull.get('targetvolume', 0)} —Ç\n"
        f"üí∞ {pull.get('price', 0)} $/—Ç (FOB)\n\n"
        f"<b>‚ö†Ô∏è –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—É–ª–ª–∞:</b>\n"
        f"‚Ä¢ –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–µ —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n"
        f"‚Ä¢ –õ–æ–≥–∏—Å—Ç—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ '–ó–∞–∫—Ä—ã—Ç'\n\n"
        f"<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã?</b>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('confirmclosepull_'), state='*')
async def confirm_close_pull_callback(callback_query: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–ª–∞"""
    try:
        pull_id = int(callback_query.data.split('_')[3])
    except (IndexError, ValueError) as e:
        await callback_query.answer('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø—É–ª–ª–∞', show_alert=True)
        return
    
    user_id = callback_query.from_user.id
    
    if pull_id not in pulls:
        await callback_query.answer('‚ùå –ü—É–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', show_alert=True)
        return
    
    pull = pulls[pull_id]
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—è
    if pull.get('exporter_id') != user_id:
        await callback_query.answer('‚ö†Ô∏è –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –∑–∞–∫—Ä—ã—Ç—å –ø—É–ª–ª', show_alert=True)
        return
    
    # –ò–ó–ú–ï–ù–ò–¢–¨ –°–¢–ê–¢–£–° –ù–ê 'CLOSED'
    pulls[pull_id]['status'] = 'closed'
    pulls[pull_id]['closedat'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
    savepullstopickle()
    
    # –û–±–Ω–æ–≤–∏—Ç—å –≤ Google Sheets (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ)
    if gs and gs.spreadsheet:
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            gs.updatepullinsheets(pull)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—É–ª–ª–∞ –≤ Google Sheets: {e}")
    
    # ‚Üê –û–¢–ü–†–ê–í–ò–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –õ–û–ì–ò–°–¢–ê–ú
    await notify_logistic_pull_closed(pull_id)
    
    # –£–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É–ª–ª–∞
    participants = pullparticipants.get(pull_id, [])
    for participant in participants:
        farmerid = participant.get('farmerid')
        if farmerid and farmerid in users:
            try:
                await bot.send_message(
                    farmerid,
                    f"üîí <b>–ü—É–ª–ª #{pull_id} –∑–∞–∫—Ä—ã—Ç</b>\n\n"
                    f"üåæ {pull.get('culture', 'N/A')}\n"
                    f"üì¶ {pull.get('targetvolume', 0)} —Ç\n"
                    f"üí∞ {pull.get('price', 0)} $/—Ç\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!",
                    parse_mode='HTML'
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–µ—Ä–º–µ—Ä–∞ {farmerid}: {e}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"‚úÖ <b>–ü—É–ª–ª #{pull_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç!</b>\n\n"
        f"üåæ {pull.get('culture', 'N/A')}\n"
        f"üì¶ {pull.get('targetvolume', 0)} —Ç\n"
        f"üí∞ {pull.get('price', 0)} $/—Ç\n\n"
        f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –ª–æ–≥–∏—Å—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.",
        parse_mode='HTML'
    )
    
    await callback_query.answer('‚úÖ –ü—É–ª–ª –∑–∞–∫—Ä—ã—Ç!')
    logging.info(f"–ü—É–ª–ª {pull_id} –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")


@dp.callback_query_handler(lambda c: c.data == 'cancel_delete_pull', state='*')
async def cancel_delete_pull(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–∞"""
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()


# ================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ö–†–´–¢–ò–Ø –ü–£–õ–õ–ê
# ================================
@dp.callback_query_handler(lambda c: c.data == 'get_partner_contacts', state='*')
async def get_partner_contacts_handler(callback: types.CallbackQuery):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ"""
    user_id = callback.from_user.id
    partner_info = None
    
    # –ò—â–µ–º —Å–¥–µ–ª–∫—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç
    for deal_id, deal in deals.items():
        if deal.get('logistic_id') == user_id:
            # –õ–æ–≥–∏—Å—Ç - –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞
            exporter_id = deal.get('exporter_id')
            exporter = users.get(exporter_id)
            if exporter:
                partner_info = "üì¶ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞:</b>\n\n"
                partner_info += f"üìù {exporter.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                partner_info += f"üì± {exporter.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                partner_info += f"üìß {exporter.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                partner_info += f"üìç {exporter.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                break
        
        elif deal.get('expeditor_id') == user_id:
            # –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä - –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞
            exporter_id = deal.get('exporter_id')
            exporter = users.get(exporter_id)
            if exporter:
                partner_info = "üì¶ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞:</b>\n\n"
                partner_info += f"üìù {exporter.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                partner_info += f"üì± {exporter.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                partner_info += f"üìß {exporter.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                partner_info += f"üìç {exporter.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                break
    
    if not partner_info:
        await callback.answer("ü§∑‚Äç‚ôÇÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    await callback.message.answer(partner_info, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('complete_deal:'), state='*')
async def complete_deal(callback: types.CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
    deal_id = parse_callback_id(callback.data)
    
    if deal_id not in deals:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    deal = deals[deal_id]
    user_id = callback.from_user.id
    if userid != deal.get('exporterid') and userid not in deal.get('farmerids', []):
        await callback.answer('‚ö†Ô∏è –¢–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–¥–µ–ª–∫–∏ –º–æ–≥—É—Ç –µ—ë –∑–∞–≤–µ—Ä—à–∏—Ç—å', showalert=True)
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"confirm_complete_deal:{deal_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_complete_deal")
    )
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É #{deal_id}?\n\n"
        f"–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:\n"
        f"‚Ä¢ –°–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—Å—è –≤ –∞—Ä—Ö–∏–≤\n"
        f"‚Ä¢ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n"
        f"<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_complete_deal:'), state='*')
async def confirm_complete_deal(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    deal_id = parse_callback_id(callback.data)
    
    if deal_id not in deals:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    deal = deals[deal_id]
    deal['status'] = 'completed'
    deal['completed_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    save_pulls_to_pickle()
    await notify_deal_participants(deal_id, "‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    await callback.message.edit_text(
        f"üéâ <b>–°–¥–µ–ª–∫–∞ #{deal_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Exportum!",
        parse_mode='HTML'
    )
    await callback.answer("‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

@dp.callback_query_handler(lambda c: c.data.startswith('cancel_deal:'), state='*')
async def cancel_deal(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏"""
    deal_id = parse_callback_id(callback.data)
    
    if deal_id not in deals:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    deal = deals[deal_id]
    user_id = callback.from_user.id
    if deal.get('exporter_id') != user_id:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_deal:{deal_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_cancel_deal")
    )
    
    await callback.message.edit_text(
        f"‚ùå <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É #{deal_id}?\n\n"
        f"–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã:\n"
        f"‚Ä¢ –°–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ç–º–µ–Ω—ë–Ω–Ω–∞—è\n"
        f"‚Ä¢ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n"
        f"<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_cancel_deal:'), state='*')
async def confirm_cancel_deal(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏"""
    deal_id = parse_callback_id(callback.data)
    
    if deal_id not in deals:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    deal = deals[deal_id]
    deal['status'] = 'cancelled'
    deal['completed_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    save_pulls_to_pickle()
    await notify_deal_participants(deal_id, "‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    await callback.message.edit_text(
        f"‚ùå <b>–°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞!</b>\n\n"
        f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏.",
        parse_mode='HTML'
    )
    await callback.answer("‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

@dp.callback_query_handler(lambda c: c.data in ['cancel_complete_deal', 'cancel_cancel_deal'], state='*')
async def cancel_deal_action(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–¥–µ–ª–∫–æ–π"""
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

async def notify_deal_participants(deal_id: int, message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏"""
    deal = deals.get(deal_id)
    if not deal:
        return
    
    participants = []
    if deal.get('exporter_id'):
        participants.append(deal['exporter_id'])
    if deal.get('farmer_ids'):
        participants.extend(deal['farmer_ids'])
    if deal.get('logistic_id'):
        participants.append(deal['logistic_id'])
    if deal.get('expeditor_id'):
        participants.append(deal['expeditor_id'])
    for user_id in participants:
        try:
            await bot.send_message(
                user_id,
                f"üìã <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id}</b>\n\n{message}",
                parse_mode='HTML'
            )
            await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

@dp.callback_query_handler(lambda c: c.data.startswith('logistics:'), state='*')
async def deal_logistics(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π –¥–ª—è —Å–¥–µ–ª–∫–∏"""
    deal_id = parse_callback_id(callback.data)
    
    if deal_id not in deals:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    deal = deals[deal_id]
    
    text = f"üöö <b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–∫–∏ #{deal_id}</b>\n\n"
    
    if deal.get('logistic_id'):
        logistic = users.get(deal['logistic_id'])
        if logistic:
            text += "‚úÖ <b>–õ–æ–≥–∏—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω:</b>\n"
            text += f"üìù {logistic.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            text += f"üì± {logistic.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"üìß {logistic.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        else:
            text += "‚ùå –õ–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ\n"
    else:
        text += "ü§∑‚Äç‚ôÇÔ∏è <b>–õ–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</b>\n\n"
        text += "–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É."
    
    if deal.get('expeditor_id'):
        expeditor = users.get(deal['expeditor_id'])
        if expeditor:
            text += "\n‚úÖ <b>–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω:</b>\n"
            text += f"üìù {expeditor.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            text += f"üì± {expeditor.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"üìß {expeditor.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        else:
            text += "\n‚ùå –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ\n"
    else:
        text += "\nü§∑‚Äç‚ôÇÔ∏è <b>–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</b>\n\n"
        text += "–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–µ", callback_data=f"view_deal:{deal_id}"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('pullparticipants:'), state='*')
async def show_pullparticipants(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É–ª–∞"""
    try:
        pull_id = parse_callback_id(callback.data)
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    participants = pullparticipants.get(pull_id, [])
    
    text = f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—É–ª–∞ #{pull_id}</b>\n\n"
    text += f"üåæ {pull['culture']} ‚Ä¢ {pull['target_volume']} —Ç\n\n"
    
    if not participants:
        text += "ü§∑‚Äç‚ôÇÔ∏è –£ –ø—É–ª–∞ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    else:
        total_participant_volume = 0
        for i, participant in enumerate(participants, 1):
            farmer_id = participant.get('farmer_id')
            farmer = users.get(farmer_id)
            batch_id = participant.get('batch_id')
            volume = participant.get('volume', 0)
            total_participant_volume += volume
            
            farmer_name = farmer.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if farmer else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            text += f"{i}. üë§ {farmer_name}\n"
            text += f"   üì¶ –ü–∞—Ä—Ç–∏—è #{batch_id}: {volume} —Ç\n"
            text += f"   üìç {farmer.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω') if farmer else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        
        fill_percentage = (total_participant_volume / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
        text += f"üìä <b>–ò—Ç–æ–≥–æ:</b> {total_participant_volume:.0f}/{pull['target_volume']:.0f} —Ç ({fill_percentage:.1f}%)"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—É–ª—É", callback_data=f"view_pull:{pull_id}"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('pull_logistics:'), state='*')
async def pull_logistics_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—É–ª–∞"""
    try:
        pull_id = parse_callback_id(callback.data)
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    
    text = f"üöö <b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞ #{pull_id}</b>\n\n"
    text += f"üåæ {pull['culture']} ‚Ä¢ {pull['target_volume']} —Ç ‚Ä¢ {pull['port']}\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É", callback_data=f"create_shipping:{pull_id}"),
        InlineKeyboardButton("üëÄ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data=f"view_shipping_requests:{pull_id}"),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ª–æ–≥–∏—Å—Ç–æ–≤", callback_data="view_logistics_contacts")
    )
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—É–ª—É", callback_data=f"view_pull:{pull_id}"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('create_shipping:'), state='*')
async def create_shipping_from_pull(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É –∏–∑ –ø—É–ª–∞"""
    try:
        pull_id = parse_callback_id(callback.data)
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    
    await state.update_data(pull_id=pull_id)
    
    await callback.message.edit_text(
        f"üöö <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—É–ª–∞ #{pull_id}</b>\n\n"
        f"üåæ {pull['culture']} ‚Ä¢ {pull['target_volume']} —Ç ‚Ä¢ {pull['port']}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≥–æ—Ä–æ–¥/—Ä–µ–≥–∏–æ–Ω):",
        parse_mode='HTML'
    )
    
    await ShippingRequestStatesGroup.route_from.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "view_logistics_contacts", state='*')
async def view_logistics_contacts(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ª–æ–≥–∏—Å—Ç–æ–≤"""
    logistics_users = [user for user in users.values() if user.get('role') == 'logistic']
    
    if not logistics_users:
        await callback.answer("ü§∑‚Äç‚ôÇÔ∏è –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ª–æ–≥–∏—Å—Ç–æ–≤", show_alert=True)
        return
    
    text = "üöö <b>–õ–æ–≥–∏—Å—Ç—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</b>\n\n"
    
    for i, logistic in enumerate(logistics_users[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑
        text += f"{i}. üìù {logistic.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"   üì± {logistic.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"   üìß {logistic.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"   üìç {logistic.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    if len(logistics_users) > 10:
        text += f"<i>... –∏ –µ—â—ë {len(logistics_users) - 10} –ª–æ–≥–∏—Å—Ç–æ–≤</i>\n\n"
    
    text += "üí° <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ª–æ–≥–∏—Å—Ç–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –ø–µ—Ä–µ–≤–æ–∑–∫–∏.</b>"
    
    await callback.message.edit_text(text, parse_mode='HTML')
    await callback.answer()

@dp.message_handler(lambda m: m.text in ["üöö –ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞", "üöõ –ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞"], state='*')
async def show_logistics_card(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –ª–æ–≥–∏—Å—Ç–∞/—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    user_id = message.from_user.id

    if user_id not in users:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    user = users[user_id]
    role = user.get('role')

    if role not in ['logistic', 'expeditor']:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Å—Ç–∞–º –∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞–º")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    role_emoji = "üöö" if role == 'logistic' else "üöõ"
    role_name = "–õ–æ–≥–∏—Å—Ç" if role == 'logistic' else "–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä"

    text = f"{role_emoji} <b>–ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞ ({role_name})</b>\n\n"
    text += f"üë§ –ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: <code>{user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
    text += f"üìß Email: {user.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üìç –†–µ–≥–∏–æ–Ω: {user.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"

    if user.get('inn'):
        text += f"üè¢ –ò–ù–ù: <code>{user['inn']}</code>\n"

    if user.get('company_details'):
        text += f"üìã –û –∫–æ–º–ø–∞–Ω–∏–∏:\n{user['company_details'][:300]}\n\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    if role == 'logistic':
        # –°—á–∏—Ç–∞–µ–º –∑–∞—è–≤–∫–∏ –ª–æ–≥–∏—Å—Ç–∞
        logistics_requests = [req for req in shipping_requests.values() if req.get('logist_id') == user_id]
        active_requests = [req for req in logistics_requests if req.get('status') == 'active']
        text += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(logistics_requests)}\n"
        text += f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_requests)}\n"
    else:  # expeditor
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞
        text += "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        text += "   ‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: 0\n"
        text += "   ‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: 0\n"

    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile"))

    await message.answer(text, parse_mode='HTML', reply_markup=keyboard)


@dp.message_handler(lambda m: m.text == "üöö –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", state='*')
async def show_active_requests(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"""
    await state.finish()
    user_id = message.from_user.id
    
    if user_id not in users:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    user = users[user_id]
    role = user.get('role')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if role == 'logistic':
        # –õ–æ–≥–∏—Å—Ç –≤–∏–¥–∏—Ç –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤
        user_requests = [req for req in shipping_requests.values() if req.get('status') == 'active']
        title = "üöö <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</b>"
        show_buttons = True
    elif role == 'exporter':
        # –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä –≤–∏–¥–∏—Ç –°–í–û–ò –∑–∞—è–≤–∫–∏
        user_requests = [req for req in shipping_requests.values() if req.get('exporter_id') == user_id]
        title = "üìã <b>–ú–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</b>"
        show_buttons = False
    elif role == 'expeditor':
        # –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –≤–∏–¥–∏—Ç –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ–º—É –Ω–∞–∑–Ω–∞—á–µ–Ω—ã
        user_requests = []  # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—É
        title = "üöõ <b>–ú–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ</b>"
        show_buttons = False
    else:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏")
        return
    
    if not user_requests:
        msg_text = f"{title}\n\n"
        if role == 'logistic':
            msg_text += "üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç\n\n"
            msg_text += "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—ã —Å–æ–∑–¥–∞–¥—É—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É, "
            msg_text += "–æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        else:
            msg_text += "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫"
        
        await message.answer(msg_text, reply_markup=logistic_keyboard() if role == 'logistic' else None, parse_mode='HTML')
        return
    
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∞)
    if show_buttons:
        keyboard = InlineKeyboardMarkup(row_width=1)
        
        for req in user_requests[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
            req_id = req.get('id', 'N/A')
            culture = req.get('culture', 'N/A')
            volume = req.get('volume', 0) or 0  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û!
            route_from = req.get('route_from', '‚Äî')
            route_to = req.get('route_to', '‚Äî')
            
            btn_text = f"üöõ #{req_id} | {culture} | {volume:.0f} —Ç | {route_from}‚Üí{route_to}"
            keyboard.add(
                InlineKeyboardButton(btn_text, callback_data=f"view_request:{req_id}")
            )
        
        await message.answer(
            f"{title}\n\n"
            f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <b>{len(user_requests)}</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    else:
        # –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–º
        text = f"{title}\n\n"
        
        for idx, req in enumerate(user_requests[:10], 1):
            req_id = req.get('id', 'N/A')
            volume = req.get('volume', 0) or 0  # ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û!
            route_from = req.get('route_from', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            route_to = req.get('route_to', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            culture = req.get('culture', 'N/A')
            status = req.get('status', 'unknown')
            
            text += f"{idx}. üì¶ –ó–∞—è–≤–∫–∞ #{req_id}\n"
            text += f"   ‚Ä¢ –ö—É–ª—å—Ç—É—Ä–∞: {culture}\n"
            text += f"   ‚Ä¢ –û–±—ä—ë–º: {volume:.0f} —Ç\n"
            text += f"   ‚Ä¢ –ú–∞—Ä—à—Ä—É—Ç: {route_from} ‚Üí {route_to}\n"
            text += f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        if len(user_requests) > 10:
            text += f"<i>... –∏ –µ—â—ë {len(user_requests) - 10} –∑–∞—è–≤–æ–∫</i>\n\n"
        
        await message.answer(text, parse_mode='HTML')

@dp.callback_query_handler(lambda c: c.data.startswith('view_request:'), state='*')
async def view_request_details(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"""
    await state.finish()
    
    try:
        request_id = int(callback.data.split(':')[1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    if request_id not in shipping_requests:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    request = shipping_requests[request_id]
    pull_id = request.get('pull_id')
    pull = pulls.get(pull_id, {})
    exporter_id = request.get('exporter_id')
    exporter = users.get(exporter_id, {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏
    text = f"""üöö <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É #{request_id}</b>

<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–∑–µ:</b>
üåæ –ö—É–ª—å—Ç—É—Ä–∞: {request.get('culture', '‚Äî')}
üì¶ –û–±—ä—ë–º: {request.get('volume', 0):.0f} —Ç
üí∞ –¶–µ–Ω–∞ FOB: ${pull.get('price', 0):.2f}/—Ç
üö¢ –ü–æ—Ä—Ç: {pull.get('port', '‚Äî')}

<b>–ú–∞—Ä—à—Ä—É—Ç:</b>
üìç –û—Ç–∫—É–¥–∞: {request.get('route_from', '‚Äî')}
üìç –ö—É–¥–∞: {request.get('route_to', '‚Äî')}
üìÖ –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request.get('desired_date', '‚Äî')}

<b>–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä:</b>
üè¢ {exporter.get('company_name', 'N/A')}
üì± @{exporter.get('username', '–Ω–µ—Ç username')}

<b>–°—Ç–∞—Ç—É—Å:</b> {request.get('status', 'active').upper()}
üìÖ –°–æ–∑–¥–∞–Ω–∞: {request.get('created_at', '‚Äî')}
"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç —ç—Ç–æ–≥–æ –ª–æ–≥–∏—Å—Ç–∞
    user_id = callback.from_user.id
    existing_offers = [
        offer for offer in logistic_offers.values()
        if offer.get('request_id') == request_id 
        and offer.get('logist_id') == user_id
    ]
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    if existing_offers:
        # –õ–æ–≥–∏—Å—Ç —É–∂–µ —Å–¥–µ–ª–∞–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        offer = existing_offers[0]
        text += f"\n\n‚úÖ <b>–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
        text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {offer.get('vehicle_type', '‚Äî')}\n"
        text += f"üí∞ –¶–µ–Ω–∞: {offer.get('price', 0):,.0f} ‚ÇΩ\n"
        text += f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {offer.get('delivery_date', '‚Äî')}\n"
        text += f"üìä –°—Ç–∞—Ç—É—Å: {offer.get('status', 'pending')}"
        
        keyboard.add(
            InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="back_to_requests")
        )
    else:
        # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        keyboard.add(
            InlineKeyboardButton("üí∞ –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", 
                                callback_data=f"make_offer:{request_id}")
        )
        keyboard.add(
            InlineKeyboardButton("‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="back_to_requests")
        )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == 'back_to_requests', state='*')
async def back_to_requests(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    await state.finish()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    user = users[user_id]
    role = user.get('role')
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
    if role == 'logistic':
        user_requests = [req for req in shipping_requests.values() if req.get('status') == 'active']
        title = "üöö <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</b>"
    else:
        await callback.answer("‚ùå –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Å—Ç–∞–º", show_alert=True)
        return
    
    if not user_requests:
        await callback.message.edit_text(
            f"{title}\n\n"
            f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç\n\n"
            f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—ã —Å–æ–∑–¥–∞–¥—É—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É, "
            f"–æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å.",
            parse_mode='HTML'
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for req in user_requests[:15]:
        req_id = req.get('id', 'N/A')
        culture = req.get('culture', 'N/A')
        volume = req.get('volume', 0) or 0
        route_from = req.get('route_from', '‚Äî')
        route_to = req.get('route_to', '‚Äî')
        
        btn_text = f"üöõ #{req_id} | {culture} | {volume:.0f} —Ç | {route_from}‚Üí{route_to}"
        keyboard.add(
            InlineKeyboardButton(btn_text, callback_data=f"view_request:{req_id}")
        )
    
    await callback.message.edit_text(
        f"{title}\n\n"
        f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <b>{len(user_requests)}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

# ============================================================================
# –õ–û–ì–ò–°–¢: –°–û–ó–î–ê–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –î–û–°–¢–ê–í–ö–ï
# ============================================================================

@dp.callback_query_handler(lambda c: c.data.startswith('make_offer:'), state='*')
async def make_offer_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–æ–º"""
    
    try:
        request_id = int(callback.data.split(':')[1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    if request_id not in shipping_requests:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    request = shipping_requests[request_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –≤ FSM
    await state.update_data(request_id=request_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üöõ –§—É—Ä–∞ (20 —Ç)", callback_data="vehicle:fura"),
        InlineKeyboardButton("üöö –ï–≤—Ä–æ—Ñ—É—Ä–∞ (22 —Ç)", callback_data="vehicle:eurofura"),
        InlineKeyboardButton("üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 20ft", callback_data="vehicle:container20"),
        InlineKeyboardButton("üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 40ft", callback_data="vehicle:container40"),
        InlineKeyboardButton("üöê –î—Ä—É–≥–æ–µ", callback_data="vehicle:other"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_offer")
    )
    
    await callback.message.edit_text(
        f"üí∞ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
        f"üì¶ –ó–∞—è–≤–∫–∞: #{request_id}\n"
        f"üåæ {request.get('culture', 'N/A')} - {request.get('volume', 0):.0f} —Ç\n"
        f"üìç {request.get('route_from', '‚Äî')} ‚Üí {request.get('route_to', '‚Äî')}\n\n"
        f"<b>–®–∞–≥ 1/3:</b> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await LogisticOfferStatesGroup.vehicle_type.set()
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('vehicle:'), state=LogisticOfferStatesGroup.vehicle_type)
async def offer_vehicle_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    
    vehicle_map = {
        'fura': 'üöõ –§—É—Ä–∞ (20 —Ç)',
        'eurofura': 'üöö –ï–≤—Ä–æ—Ñ—É—Ä–∞ (22 —Ç)',
        'container20': 'üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 20ft',
        'container40': 'üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 40ft',
        'other': 'üöê –î—Ä—É–≥–æ–µ'
    }
    
    vehicle_code = callback.data.split(':')[1]
    vehicle_type = vehicle_map.get(vehicle_code, 'üöê –î—Ä—É–≥–æ–µ')
    
    await state.update_data(vehicle_type=vehicle_type)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ü–µ–Ω—ã
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_offer")
    )
    
    data = await state.get_data()
    request_id = data.get('request_id')
    request = shipping_requests.get(request_id, {})
    
    await callback.message.edit_text(
        f"üí∞ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
        f"üì¶ –ó–∞—è–≤–∫–∞: #{request_id}\n"
        f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle_type}\n\n"
        f"<b>–®–∞–≥ 2/3:</b> –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ (–≤ —Ä—É–±–ª—è—Ö):\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>50000</code> –∏–ª–∏ <code>75000</code>\n\n"
        f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Ü–µ–Ω–∞ –¥–ª—è {request.get('volume', 0):.0f} —Ç: "
        f"{int(request.get('volume', 0) * 1500):,} ‚ÇΩ",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await LogisticOfferStatesGroup.price.set()
    await callback.answer()


@dp.message_handler(state=LogisticOfferStatesGroup.price)
async def offer_price_entered(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã"""
    
    try:
        price = float(message.text.replace(',', '').replace(' ', ''))
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>50000</code>",
            parse_mode='HTML'
        )
        return
    
    await state.update_data(price=price)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –¥–∞—Ç—ã
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìÖ –ó–∞–≤—Ç—Ä–∞", callback_data="date:tomorrow"),
        InlineKeyboardButton("üìÖ –ß–µ—Ä–µ–∑ 3 –¥–Ω—è", callback_data="date:3days"),
        InlineKeyboardButton("üìÖ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", callback_data="date:week"),
        InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="date:custom"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_offer")
    )
    
    data = await state.get_data()
    request_id = data.get('request_id')
    vehicle_type = data.get('vehicle_type')
    
    await message.answer(
        f"üí∞ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
        f"üì¶ –ó–∞—è–≤–∫–∞: #{request_id}\n"
        f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle_type}\n"
        f"üí∞ –¶–µ–Ω–∞: {price:,.0f} ‚ÇΩ\n\n"
        f"<b>–®–∞–≥ 3/3:</b> –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await LogisticOfferStatesGroup.delivery_date.set()


@dp.callback_query_handler(lambda c: c.data.startswith('date:'), state=LogisticOfferStatesGroup.delivery_date)
async def offer_date_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    
    from datetime import datetime, timedelta
    
    date_code = callback.data.split(':')[1]
    
    if date_code == 'custom':
        await callback.message.edit_text(
            "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
            "–§–æ—Ä–º–∞—Ç: <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>15.11.2025</code>",
            parse_mode='HTML'
        )
        await callback.answer()
        return
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á—ë—Ç –¥–∞—Ç—ã
    today = datetime.now()
    if date_code == 'tomorrow':
        delivery_date = today + timedelta(days=1)
    elif date_code == '3days':
        delivery_date = today + timedelta(days=3)
    elif date_code == 'week':
        delivery_date = today + timedelta(days=7)
    else:
        delivery_date = today + timedelta(days=1)
    
    delivery_date_str = delivery_date.strftime('%d.%m.%Y')
    await state.update_data(delivery_date=delivery_date_str)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    await show_offer_confirmation(callback.message, state)
    await callback.answer()


@dp.message_handler(state=LogisticOfferStatesGroup.delivery_date)
async def offer_date_custom(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    
    from datetime import datetime
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        delivery_date = datetime.strptime(message.text, '%d.%m.%Y')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        if delivery_date < datetime.now():
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!")
            return
        
        delivery_date_str = delivery_date.strftime('%d.%m.%Y')
        await state.update_data(delivery_date=delivery_date_str)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
        await show_offer_confirmation(message, state)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>15.11.2025</code>",
            parse_mode='HTML'
        )


async def show_offer_confirmation(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    
    data = await state.get_data()
    request_id = data.get('request_id')
    vehicle_type = data.get('vehicle_type')
    price = data.get('price')
    delivery_date = data.get('delivery_date')
    
    request = shipping_requests.get(request_id, {})
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_offer"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_offer")
    )
    
    text = f"""üí∞ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>

üì¶ <b>–ó–∞—è–≤–∫–∞ #{request_id}</b>
üåæ {request.get('culture', 'N/A')} - {request.get('volume', 0):.0f} —Ç
üìç {request.get('route_from', '‚Äî')} ‚Üí {request.get('route_to', '‚Äî')}

<b>–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>
üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle_type}
üí∞ –¶–µ–Ω–∞: {price:,.0f} ‚ÇΩ
üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}

–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É?"""
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    await LogisticOfferStatesGroup.confirm.set()


@dp.callback_query_handler(lambda c: c.data == 'confirm_offer', state=LogisticOfferStatesGroup.confirm)
async def confirm_logistic_offer(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    
    data = await state.get_data()
    request_id = data.get('request_id')
    vehicle_type = data.get('vehicle_type')
    price = data.get('price')
    delivery_date = data.get('delivery_date')
    
    user_id = callback.from_user.id
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    offer_id = len(logistic_offers) + 1
    offer = {
        'id': offer_id,
        'request_id': request_id,
        'logist_id': user_id,
        'vehicle_type': vehicle_type,
        'price': price,
        'delivery_date': delivery_date,
        'status': 'pending',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    logistic_offers[offer_id] = offer
    save_logistic_offers()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É
    request = shipping_requests.get(request_id, {})
    exporter_id = request.get('exporter_id')
    logist = users.get(user_id, {})
    
    if exporter_id:
        try:
            keyboard = InlineKeyboardMarkup(row_width=2)
            keyboard.add(
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_offer:{offer_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_offer:{offer_id}")
            )
            
            await bot.send_message(
                exporter_id,
                f"üí∞ <b>–ù–û–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ü–û –î–û–°–¢–ê–í–ö–ï!</b>\n\n"
                f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
                f"üåæ {request.get('culture', 'N/A')} - {request.get('volume', 0):.0f} —Ç\n"
                f"üìç {request.get('route_from', '‚Äî')} ‚Üí {request.get('route_to', '‚Äî')}\n\n"
                f"<b>–û—Ç –ª–æ–≥–∏—Å—Ç–∞:</b>\n"
                f"üè¢ {logist.get('company_name', 'N/A')}\n"
                f"üì± @{logist.get('username', '–Ω–µ—Ç username')}\n\n"
                f"<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
                f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle_type}\n"
                f"üí∞ –¶–µ–Ω–∞: {price:,.0f} ‚ÇΩ\n"
                f"üìÖ –î–∞—Ç–∞: {delivery_date}",
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É {exporter_id} –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ #{offer_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É: {e}")
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
        f"üì¶ –ó–∞—è–≤–∫–∞: #{request_id}\n"
        f"üí∞ –¶–µ–Ω–∞: {price:,.0f} ‚ÇΩ\n"
        f"üìÖ –î–∞—Ç–∞: {delivery_date}\n\n"
        f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n"
        f"–í—ã —É–∑–Ω–∞–µ—Ç–µ –æ —Ä–µ—à–µ–Ω–∏–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø—Ä–∏–º–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
        parse_mode='HTML'
    )
    
    await state.finish()
    await callback.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")


@dp.callback_query_handler(lambda c: c.data == 'cancel_offer', state='*')
async def cancel_offer(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    
    await state.finish()
    
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>üöö –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏</b> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫.",
        parse_mode='HTML'
    )
    
    await callback.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

@dp.message_handler(lambda m: m.text == "üíº –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", state='*')
async def show_my_offers(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–æ–≤ - –ø—É–ª—ã, –¥–ª—è –ª–æ–≥–∏—Å—Ç–æ–≤ - –∑–∞—è–≤–∫–∏)"""
    user_id = message.from_user.id

    if user_id not in users:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    user = users[user_id]
    role = user.get('role')

    if role == 'exporter':
        # –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –≤–∏–¥–∏—Ç —Å–≤–æ–∏ –ø—É–ª—ã
        user_pulls = [pull for pull in pulls.values() if pull.get('exporter_id') == user_id]

        if not user_pulls:
            await message.answer("üíº <b>–ú–æ–∏ –ø—É–ª—ã</b>\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—É–ª–æ–≤", parse_mode='HTML')
            return

        text = "üíº <b>–ú–æ–∏ –ø—É–ª—ã</b>\n\n"
        for idx, pull in enumerate(user_pulls[:10], 1):
            pull_id = pull.get('id')
            culture = pull.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            volume = pull.get('volume', 0)
            price = pull.get('price', 0)
            status = pull.get('status', '–û—Ç–∫—Ä—ã—Ç')

            text += f"{idx}. üåæ –ü—É–ª #{pull_id}\n"
            text += f"   ‚Ä¢ {culture}, {volume} —Ç\n"
            text += f"   ‚Ä¢ {price:,.0f} ‚ÇΩ/—Ç\n"
            text += f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å: {status}\n\n"

        if len(user_pulls) > 10:
            text += f"<i>... –∏ –µ—â—ë {len(user_pulls) - 10} –ø—É–ª–æ–≤</i>\n"

        await message.answer(text, parse_mode='HTML')

    elif role == 'logistic':
        # –õ–æ–≥–∏—Å—Ç –≤–∏–¥–∏—Ç —Å–≤–æ–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É
        user_requests = [req for req in shipping_requests.values() if req.get('logist_id') == user_id]

        if not user_requests:
            await message.answer("üíº <b>–ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫", parse_mode='HTML')
            return

        text = "üíº <b>–ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø–µ—Ä–µ–≤–æ–∑–∫–µ</b>\n\n"
        for idx, req in enumerate(user_requests[:10], 1):
            req_id = req.get('id')
            volume = req.get('volume', 0)
            from_loc = req.get('from', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            to_loc = req.get('to', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            price = req.get('price', 0)

            text += f"{idx}. üöö –ó–∞—è–≤–∫–∞ #{req_id}\n"
            text += f"   ‚Ä¢ {from_loc} ‚Üí {to_loc}\n"
            text += f"   ‚Ä¢ {volume} —Ç, {price:,.0f} ‚ÇΩ\n\n"

        await message.answer(text, parse_mode='HTML')
    else:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏")


@dp.message_handler(lambda m: m.text in ["üìã –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏", "üìã –ú–æ–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"], state='*')
async def show_my_transportations(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–µ–≤–æ–∑–∫–∏/–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ"""
    user_id = message.from_user.id

    if user_id not in users:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    user = users[user_id]
    role = user.get('role')

    if role == 'logistic':
        title = "üìã <b>–ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏</b>"
        # –õ–æ–≥–∏—Å—Ç –≤–∏–¥–∏—Ç –∑–∞—è–≤–∫–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ "–≤ —Ä–∞–±–æ—Ç–µ"
        active_requests = [req for req in shipping_requests.values() 
                          if req.get('logist_id') == user_id and req.get('status') == 'in_progress']

        if not active_requests:
            await message.answer(f"{title}\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫", parse_mode='HTML')
            return

        text = f"{title}\n\n"
        for idx, req in enumerate(active_requests[:10], 1):
            text += f"{idx}. üöö –ó–∞—è–≤–∫–∞ #{req.get('id')}\n"
            text += f"   ‚Ä¢ {req.get('from')} ‚Üí {req.get('to')}\n"
            text += f"   ‚Ä¢ {req.get('volume')} —Ç\n\n"

        await message.answer(text, parse_mode='HTML')

    elif role == 'expeditor':
        title = "üìã <b>–ú–æ–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è</b>"
        # –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –≤–∏–¥–∏—Ç —Å–≤–æ–∏ –æ—Ñ–æ—Ä–º–ª—è–µ–º—ã–µ —Å–¥–µ–ª–∫–∏
        # TODO: –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Å–¥–µ–ª–æ–∫ –ø–æ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—É
        text = f"{title}\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–π"
        await message.answer(text, parse_mode='HTML')
    else:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤–∞—à–µ–π —Ä–æ–ª–∏")


@dp.callback_query_handler(lambda c: c.data.startswith('view_shipping_requests:'), state='*')
async def view_shipping_requests_callback(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—É–ª–∞"""
    pull_id = parse_callback_id(callback.data)

    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –ª–æ–≥–∏—Å—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    pull = pulls[pull_id]
    pull_region = pull.get('region', '')

    relevant_requests = [req for req in shipping_requests.values() 
                        if req.get('status') == 'active' and 
                        (pull_region in req.get('from', '') or pull_region in req.get('to', ''))]

    if not relevant_requests:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ–≥–∏—Å—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞", show_alert=True)
        return

    text = f"üöö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏—Å—Ç—ã –¥–ª—è –ø—É–ª–∞ #{pull_id}</b>\n\n"

    for idx, req in enumerate(relevant_requests[:10], 1):
        logist_id = req.get('logist_id')
        if logist_id and logist_id in users:
            logist = users[logist_id]
            text += f"{idx}. {logist.get('name', '–õ–æ–≥–∏—Å—Ç')}\n"
            text += f"   ‚Ä¢ üìû {logist.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"   ‚Ä¢ üìç {req.get('from')} ‚Üí {req.get('to')}\n"
            text += f"   ‚Ä¢ üí∞ {req.get('price', 0):,.0f} ‚ÇΩ\n\n"

    if len(relevant_requests) > 10:
        text += f"<i>... –∏ –µ—â—ë {len(relevant_requests) - 10} –ª–æ–≥–∏—Å—Ç–æ–≤</i>\n\n"

    text += "üí° <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ª–æ–≥–∏—Å—Ç–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –ø–µ—Ä–µ–≤–æ–∑–∫–∏.</b>"

    await callback.message.edit_text(text, parse_mode='HTML')
    await callback.answer()


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def edit_pull_fields_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –ø—É–ª–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üåæ –ö—É–ª—å—Ç—É—Ä–∞", callback_data="edit_pull_field:culture"),
        InlineKeyboardButton("üì¶ –û–±—ä—ë–º", callback_data="edit_pull_field:volume"),
        InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data="edit_pull_field:price"),
        InlineKeyboardButton("üö¢ –ü–æ—Ä—Ç", callback_data="edit_pull_field:port")
    )
    keyboard.add(
        InlineKeyboardButton("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å", callback_data="edit_pull_field:moisture"),
        InlineKeyboardButton("üèãÔ∏è –ù–∞—Ç—É—Ä–∞", callback_data="edit_pull_field:nature"),
        InlineKeyboardButton("üåæ –°–æ—Ä–Ω–æ—Å—Ç—å", callback_data="edit_pull_field:impurity"),
        InlineKeyboardButton("üåø –ó–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å", callback_data="edit_pull_field:weed")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_my_pulls")
    )
    return keyboard



async def send_daily_stats():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω—É"""
    try:
        total_users = len(users)
        role_stats = defaultdict(int)
        for user in users.values():
            role = user.get('role', 'unknown')
            role_stats[role] += 1
        total_batches = sum(len(batches) for user_batches in batches.values())
        active_batches = sum(1 for user_batches in batches.values() for b in batches if b.get('status') == '–ê–∫—Ç–∏–≤–Ω–∞')
        total_pulls = len(pulls)
        open_pulls = len([p for p in pulls.values() if p.get('status') == '–û—Ç–∫—Ä—ã—Ç'])
        total_deals = len(deals)
        active_deals = len([d for d in deals.values() if d.get('status') in ['pending', 'matched', 'shipping']])
        
        text = "üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Exportum</b>\n\n"
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        text += f"üì¶ –ü–∞—Ä—Ç–∏–π: {total_batches} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_batches})\n"
        text += f"üéØ –ü—É–ª–æ–≤: {total_pulls} (–æ—Ç–∫—Ä—ã—Ç—ã—Ö: {open_pulls})\n"
        text += f"üìã –°–¥–µ–ª–æ–∫: {total_deals} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_deals})\n"
        text += f"üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}\n\n"
        
        text += "<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º:</b>\n"
        for role, count in role_stats.items():
            role_name = ROLES.get(role, role)
            text += f"‚Ä¢ {role_name}: {count}\n"
        
        await bot.send_message(ADMIN_ID, text, parse_mode='HTML')
        logging.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    global scheduler  # ‚Üê –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£!
    try:
        scheduler.add_job(update_prices_cache, 'interval', hours=6)
        scheduler.add_job(update_news_cache, 'interval', hours=2)
        scheduler.add_job(auto_match_batches_and_pulls, 'interval', minutes=30)
        scheduler.add_job(send_daily_stats, 'cron', hour=9, minute=0)
        
        scheduler.start()
        logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

# ==================== –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –õ–û–ì–ò–°–¢–û–í ====================
class LogisticStatesGroup(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É –ª–æ–≥–∏—Å—Ç–æ–º"""
    route_from = State()
    route_to = State()
    volume = State()
    price = State()
    vehicle_type = State()
    notes = State()


class ExcavatorStatesGroup(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    service_type = State()
    price = State()
    terms = State()
    ports = State()
    notes = State()


# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –õ–û–ì–ò–°–¢–û–í ====================

@dp.message_handler(lambda m: m.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É", state='*')
async def create_shipping_request_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É"""
    user_id = message.from_user.id

    if user_id not in users or users[user_id].get('role') != 'logistic':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Å—Ç–∞–º")
        return

    await message.answer(
        "üöö <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É</b>\n\n"
        "–®–∞–≥ 1/6: –û—Ç–∫—É–¥–∞ (—Ä–µ–≥–∏–æ–Ω/–≥–æ—Ä–æ–¥)\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏:",
        parse_mode='HTML'
    )
    await LogisticStatesGroup.route_from.set()


@dp.message_handler(state=LogisticStatesGroup.route_from)
async def logistic_route_from(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏"""
    route_from = message.text.strip()

    await state.update_data(route_from=route_from)

    await message.answer(
        "üöö <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É</b>\n\n"
        "–®–∞–≥ 2/6: –ö—É–¥–∞ (—Ä–µ–≥–∏–æ–Ω/–≥–æ—Ä–æ–¥/–ø–æ—Ä—Ç)\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–∑–≥—Ä—É–∑–∫–∏:",
        parse_mode='HTML'
    )
    await LogisticStatesGroup.route_to.set()


@dp.message_handler(state=LogisticStatesGroup.route_to)
async def logistic_route_to(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Å—Ç–∞ —Ä–∞–∑–≥—Ä—É–∑–∫–∏"""
    route_to = message.text.strip()

    await state.update_data(route_to=route_to)

    await message.answer(
        "üöö <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É</b>\n\n"
        "–®–∞–≥ 3/6: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º –ø–µ—Ä–µ–≤–æ–∑–∫–∏ (—Ç–æ–Ω–Ω):",
        parse_mode='HTML'
    )
    await LogisticStatesGroup.volume.set()


@dp.message_handler(state=LogisticStatesGroup.volume)
async def logistic_volume(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ä–µ–º–∞"""
    try:
        volume = float(message.text.replace(',', '.'))
        if volume <= 0:
            raise ValueError

        await state.update_data(volume=volume)

        await message.answer(
            "üöö <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É</b>\n\n"
            "–®–∞–≥ 4/6: –¢–∞—Ä–∏—Ñ\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Ç–∞—Ä–∏—Ñ (‚ÇΩ –∑–∞ —Ç–æ–Ω–Ω—É):",
            parse_mode='HTML'
        )
        await LogisticStatesGroup.price.set()

    except Exception as e:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500)")


@dp.message_handler(state=LogisticStatesGroup.price)
async def logistic_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        price = float(message.text.replace(',', '.').replace(' ', ''))
        if price <= 0:
            raise ValueError

        await state.update_data(price=price)

        await message.answer(
            "üöö <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É</b>\n\n"
            "–®–∞–≥ 5/6: –¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§—É—Ä–∞ 20—Ç, –ó–µ—Ä–Ω–æ–≤–æ–∑):",
            parse_mode='HTML'
        )
        await LogisticStatesGroup.vehicle_type.set()

    except Exception as e:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 700)")


@dp.message_handler(state=LogisticStatesGroup.vehicle_type)
async def logistic_vehicle_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    vehicle_type = message.text.strip()

    await state.update_data(vehicle_type=vehicle_type)

    await message.answer(
        "üöö <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É</b>\n\n"
        "–®–∞–≥ 6/6: –ü—Ä–∏–º–µ—á–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
        parse_mode='HTML'
    )
    await LogisticStatesGroup.notes.set()


@dp.message_handler(lambda m: m.text == '/skip', state=LogisticStatesGroup.notes)
@dp.message_handler(state=LogisticStatesGroup.notes)
async def logistic_notes(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    user_id = message.from_user.id

    notes = "" if message.text == '/skip' else message.text.strip()
    await state.update_data(notes=notes)

    data = await state.get_data()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞—è–≤–∫–∏
    global shipping_requests
    request_id = len(shipping_requests) + 1

    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    request = {
        'id': request_id,
        'logist_id': user_id,
        'from': data['route_from'],
        'to': data['route_to'],
        'volume': data['volume'],
        'price': data['price'],
        'vehicle_type': data['vehicle_type'],
        'notes': notes,
        'status': 'active',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }

    shipping_requests[request_id] = request

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    logist_name = users[user_id].get('name', '–õ–æ–≥–∏—Å—Ç')

    text = f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É #{request_id} —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
    text += f"üìç –ú–∞—Ä—à—Ä—É—Ç: {data['route_from']} ‚Üí {data['route_to']}\n"
    text += f"üì¶ –û–±—ä–µ–º: {data['volume']} —Ç\n"
    text += f"üí∞ –¢–∞—Ä–∏—Ñ: {data['price']:,.0f} ‚ÇΩ/—Ç\n"
    text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {data['vehicle_type']}\n"
    if notes:
        text += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {notes}\n"
    text += f"\nüë§ –ö–æ–Ω—Ç–∞–∫—Ç: {logist_name}\n"
    text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {users[user_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}"

    await message.answer(text, parse_mode='HTML', reply_markup=logistic_keyboard())

    await state.finish()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    save_shipping_requests()

    logging.info(f"‚úÖ –õ–æ–≥–∏—Å—Ç {user_id} —Å–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É #{request_id}")

@dp.callback_query_handler(lambda c: c.data.startswith('view_shipping_request_'), state='*')
async def view_shipping_request_details(callback: types.CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –ª–æ–≥–∏—Å—Ç–∞"""
    await state.finish()
    
    try:
        request_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞—è–≤–∫–∏", show_alert=True)
        return
    
    if request_id not in shipping_requests:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    request = shipping_requests[request_id]
    user_id = callback.from_user.id
    
    exporter_id = request.get('exporter_id')
    exporter_info = users.get(exporter_id, {})
    exporter_company = exporter_info.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    pull_id = request.get('pull_id')
    pull_info = pulls.get(pull_id, {})
    
    offers_count = len([
        o for o in logistic_offers.values()
        if o.get('request_id') == request_id
    ])
    
    user_has_offer = any(
        o.get('request_id') == request_id and o.get('logist_id') == user_id
        for o in logistic_offers.values()
    )
    
    text = f"üì¶ <b>–ó–ê–Ø–í–ö–ê –ù–ê –î–û–°–¢–ê–í–ö–£ #{request_id}</b>\n\n"
    
    text += "üåæ <b>–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ì–†–£–ó–ï:</b>\n"
    text += f"   ‚Ä¢ –ö—É–ª—å—Ç—É—Ä–∞: <b>{pull_info.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
    text += f"   ‚Ä¢ –û–±—ä—ë–º: <b>{request.get('volume', 0):.1f} —Ç</b>\n"
    
    if request.get('weight'):
        text += f"   ‚Ä¢ –í–µ—Å: <b>{request.get('weight', 0):.1f} —Ç</b>\n"
    
    text += "\n"
    
    text += "üìç <b>–ú–ê–†–®–†–£–¢:</b>\n"
    text += f"   ‚Ä¢ –û—Ç–∫—É–¥–∞: <b>{request.get('route_from', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n"
    text += f"   ‚Ä¢ –ö—É–¥–∞: <b>{request.get('route_to', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n"
    
    if request.get('distance'):
        text += f"   ‚Ä¢ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: <b>{request.get('distance')} –∫–º</b>\n"
    
    text += "\n"
    
    text += "üìÖ <b>–°–†–û–ö–ò:</b>\n"
    if request.get('desired_date'):
        text += f"   ‚Ä¢ –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: <b>{request.get('desired_date')}</b>\n"
    else:
        text += f"   ‚Ä¢ –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: <i>–ù–µ —É–∫–∞–∑–∞–Ω–∞</i>\n"
    
    text += f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∞: <b>{request.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</b>\n\n"
    
    if request.get('budget'):
        text += "üí∞ <b>–ë–Æ–î–ñ–ï–¢:</b>\n"
        text += f"   ‚Ä¢ –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–π: <b>{request.get('budget'):,.0f} ‚ÇΩ</b>\n\n"
    
    if request.get('requirements'):
        text += "üìã <b>–¢–†–ï–ë–û–í–ê–ù–ò–Ø:</b>\n"
        text += f"   {request.get('requirements')}\n\n"
    
    if request.get('additional_info'):
        text += "‚ÑπÔ∏è <b>–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û:</b>\n"
        text += f"   {request.get('additional_info')}\n\n"
    
    text += "üë§ <b>–ó–ê–ö–ê–ó–ß–ò–ö:</b>\n"
    text += f"   ‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: <b>{exporter_company}</b>\n"
    
    if exporter_info.get('contact_person'):
        text += f"   ‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç: {exporter_info.get('contact_person')}\n"
    
    text += "\n"
    
    text += "üìä <b>–°–¢–ê–¢–£–°:</b>\n"
    text += f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: <b>{get_status_emoji(request.get('status', 'active'))} {get_status_name(request.get('status', 'active'))}</b>\n"
    text += f"   ‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: <b>{offers_count}</b>\n"
    
    if user_has_offer:
        text += f"\n<i>‚úÖ –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ</i>"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    if not user_has_offer and request.get('status') == 'active':
        keyboard.add(
            InlineKeyboardButton(
                "‚úÖ –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
                callback_data=f"make_offer_{request_id}"
            )
        )
    elif user_has_offer:
        user_offer_id = next(
            (o_id for o_id, o in logistic_offers.items() 
             if o.get('request_id') == request_id and o.get('logist_id') == user_id),
            None
        )
        if user_offer_id:
            keyboard.add(
                InlineKeyboardButton(
                    "üëÅ –ú–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ",
                    callback_data=f"view_my_offer_{user_offer_id}"
                )
            )
    
    keyboard.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="logistic_requests_list")
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()


def get_status_emoji(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞"""
    status_emojis = {
        'active': 'üü¢',
        'assigned': 'üü°',
        'in_progress': 'üîµ',
        'completed': '‚úÖ',
        'cancelled': '‚ùå',
        'pending': 'üïê',
        'accepted': '‚úÖ',
        'rejected': '‚ùå'
    }
    return status_emojis.get(status, '‚ö™')


def get_status_name(status: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
    status_names = {
        'active': '–ê–∫—Ç–∏–≤–Ω–∞',
        'assigned': '–ù–∞–∑–Ω–∞—á–µ–Ω–∞',
        'in_progress': '–í —Ä–∞–±–æ—Ç–µ',
        'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–∞',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–∞',
        'pending': '–û–∂–∏–¥–∞–µ—Ç',
        'accepted': '–ü—Ä–∏–Ω—è—Ç–æ',
        'rejected': '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
    }
    return status_names.get(status, status)


@dp.callback_query_handler(lambda c: c.data == 'logistic_requests_list', state='*')
async def show_logistic_requests_list(callback: types.CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è –ª–æ–≥–∏—Å—Ç–∞"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    available_requests = [
        (req_id, req) for req_id, req in shipping_requests.items()
        if req.get('status') == 'active' and not req.get('logist_id')
    ]
    
    if not available_requests:
        text = "üì¶ <b>–î–û–°–¢–£–ü–ù–´–ï –ó–ê–Ø–í–ö–ò –ù–ê –î–û–°–¢–ê–í–ö–£</b>\n\n"
        text += "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫\n\n"
        text += "<i>–ó–∞—è–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è, –∫–æ–≥–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—ã —Å–æ–∑–¥–∞–¥—É—Ç –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</i>"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="logistic_requests_list"))
        keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer()
        return
    
    available_requests.sort(key=lambda x: x[1].get('created_at', ''), reverse=True)
    
    text = f"üì¶ <b>–î–û–°–¢–£–ü–ù–´–ï –ó–ê–Ø–í–ö–ò –ù–ê –î–û–°–¢–ê–í–ö–£</b>\n\n"
    text += f"–ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: <b>{len(available_requests)}</b>\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for req_id, req in available_requests[:10]:
        pull_id = req.get('pull_id')
        pull_info = pulls.get(pull_id, {})
        culture = pull_info.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        volume = req.get('volume', 0)
        route_from = req.get('route_from', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        route_to = req.get('route_to', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        button_text = f"üì¶ {culture} {volume:.0f}—Ç | {route_from} ‚Üí {route_to}"
        
        keyboard.add(
            InlineKeyboardButton(
                button_text,
                callback_data=f"view_shipping_request_{req_id}"
            )
        )
    
    if len(available_requests) > 10:
        text += f"\n<i>... –∏ –µ—â—ë {len(available_requests) - 10} –∑–∞—è–≤–æ–∫</i>"
    
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="logistic_requests_list")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


# ============================================================================
# –õ–û–ì–ò–°–¢: FSM –°–û–ó–î–ê–ù–ò–Ø –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø
# ============================================================================

class LogisticOfferStatesGroup(StatesGroup):
    """FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    request_id = State()
    vehicle_type = State()
    price = State()
    delivery_date = State()
    additional_info = State()
    confirm = State()


@dp.callback_query_handler(lambda c: c.data.startswith('make_offer_'), state='*')
async def make_offer_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    await state.finish()
    
    try:
        request_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞—è–≤–∫–∏", show_alert=True)
        return
    
    if request_id not in shipping_requests:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    request = shipping_requests[request_id]
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    existing_offer = any(
        o.get('request_id') == request_id and o.get('logist_id') == user_id
        for o in logistic_offers.values()
    )
    
    if existing_offer:
        await callback.answer("‚ùå –í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏
    await state.update_data(request_id=request_id)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ
    pull_id = request.get('pull_id')
    pull_info = pulls.get(pull_id, {})
    
    text = f"‚úÖ <b>–°–û–ó–î–ê–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø</b>\n\n"
    text += f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
    text += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull_info.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üì¶ –û–±—ä—ë–º: {request.get('volume', 0):.1f} —Ç\n"
    text += f"üìç –ú–∞—Ä—à—Ä—É—Ç: {request.get('route_from', '')} ‚Üí {request.get('route_to', '')}\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "<b>–®–∞–≥ 1/4: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞</b>"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    vehicles = [
        ("üöõ –§—É—Ä–∞ 20—Ç", "vehicle_–§—É—Ä–∞ 20—Ç"),
        ("üöö –ï–≤—Ä–æ—Ñ—É—Ä–∞ 22—Ç", "vehicle_–ï–≤—Ä–æ—Ñ—É—Ä–∞ 22—Ç"),
        ("üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 20ft", "vehicle_–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 20ft"),
        ("üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 40ft", "vehicle_–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 40ft"),
        ("üöê –ì–∞–∑–µ–ª—å 3—Ç", "vehicle_–ì–∞–∑–µ–ª—å 3—Ç"),
        ("üöê –ì–∞–∑–µ–ª—å 5—Ç", "vehicle_–ì–∞–∑–µ–ª—å 5—Ç"),
        ("üöõ –¢–æ–Ω–∞—Ä 25—Ç", "vehicle_–¢–æ–Ω–∞—Ä 25—Ç"),
        ("üöú –ó–µ—Ä–Ω–æ–≤–æ–∑ 30—Ç", "vehicle_–ó–µ—Ä–Ω–æ–≤–æ–∑ 30—Ç"),
    ]
    
    for name, data in vehicles:
        keyboard.add(InlineKeyboardButton(name, callback_data=data))
    
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_offer"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await LogisticOfferStatesGroup.vehicle_type.set()
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('vehicle_'), state=LogisticOfferStatesGroup.vehicle_type)
async def offer_vehicle_selected(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    vehicle_type = callback.data.replace('vehicle_', '')
    
    await state.update_data(vehicle_type=vehicle_type)
    
    data = await state.get_data()
    request_id = data.get('request_id')
    request = shipping_requests.get(request_id, {})
    volume = request.get('volume', 0)
    
    text = f"‚úÖ <b>–°–û–ó–î–ê–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø</b>\n\n"
    text += f"‚úì –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>{vehicle_type}</b>\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += f"<b>–®–∞–≥ 2/4: –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
    text += f"–û–±—ä—ë–º –≥—Ä—É–∑–∞: <b>{volume:.1f} —Ç</b>\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ä—É–±–ª—è—Ö:\n"
    text += "<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000)</i>"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_offer"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await LogisticOfferStatesGroup.price.set()
    await callback.answer()


@dp.message_handler(state=LogisticOfferStatesGroup.price)
async def offer_price_entered(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ —Ü–µ–Ω—ã"""
    user_id = message.from_user.id
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
    try:
        price_str = message.text.strip().replace(' ', '').replace(',', '').replace('‚ÇΩ', '')
        price = float(price_str)
        
        if price <= 0:
            await message.answer(
                "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
        
        if price > 10000000:
            await message.answer(
                "‚ùå –¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (–º–∞–∫—Å–∏–º—É–º 10 –º–ª–Ω ‚ÇΩ)!\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50000):"
        )
        return
    
    await state.update_data(price=price)
    
    data = await state.get_data()
    vehicle_type = data.get('vehicle_type')
    
    text = f"‚úÖ <b>–°–û–ó–î–ê–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø</b>\n\n"
    text += f"‚úì –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>{vehicle_type}</b>\n"
    text += f"‚úì –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price:,.0f} ‚ÇΩ</b>\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "<b>–®–∞–≥ 3/4: –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n"
    text += "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
    text += "<i>(–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.11.2025)</i>"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_offer"))
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    await LogisticOfferStatesGroup.delivery_date.set()


@dp.message_handler(state=LogisticOfferStatesGroup.delivery_date)
async def offer_date_entered(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    date_str = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    try:
        delivery_date = datetime.strptime(date_str, '%d.%m.%Y')
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        if delivery_date < today:
            await message.answer(
                "‚ùå –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–µ —Ä–∞–Ω–µ–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è:"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ
        max_date = today + timedelta(days=365)
        if delivery_date > max_date:
            await message.answer(
                "‚ùå –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ (–º–∞–∫—Å–∏–º—É–º 1 –≥–æ–¥)!\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
            )
            return
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.11.2025):"
        )
        return
    
    await state.update_data(delivery_date=date_str)
    
    data = await state.get_data()
    vehicle_type = data.get('vehicle_type')
    price = data.get('price')
    
    text = f"‚úÖ <b>–°–û–ó–î–ê–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø</b>\n\n"
    text += f"‚úì –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>{vehicle_type}</b>\n"
    text += f"‚úì –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price:,.0f} ‚ÇΩ</b>\n"
    text += f"‚úì –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{date_str}</b>\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "<b>–®–∞–≥ 4/4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>\n\n"
    text += "–£–∫–∞–∂–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
    text += "‚Ä¢ –£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã\n"
    text += "‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∫–∞ –≥—Ä—É–∑–∞\n"
    text += "‚Ä¢ –û—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è\n\n"
    text += "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_additional_info"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_offer"))
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    await LogisticOfferStatesGroup.additional_info.set()


@dp.callback_query_handler(lambda c: c.data == 'skip_additional_info', state=LogisticOfferStatesGroup.additional_info)
async def offer_skip_additional_info(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    await state.update_data(additional_info="")
    await show_offer_confirmation(callback.message, state, user_id=callback.from_user.id, is_callback=True)
    await callback.answer()


@dp.message_handler(state=LogisticOfferStatesGroup.additional_info)
async def offer_additional_info_entered(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    additional_info = message.text.strip()
    
    if len(additional_info) > 500:
        await message.answer(
            "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)!\n\n"
            "–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç:"
        )
        return
    
    await state.update_data(additional_info=additional_info)
    await show_offer_confirmation(message, state, user_id=message.from_user.id)


async def show_offer_confirmation(message_or_callback, state: FSMContext, user_id: int, is_callback: bool = False):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    
    request_id = data.get('request_id')
    request = shipping_requests.get(request_id, {})
    pull_id = request.get('pull_id')
    pull_info = pulls.get(pull_id, {})
    
    vehicle_type = data.get('vehicle_type')
    price = data.get('price')
    delivery_date = data.get('delivery_date')
    additional_info = data.get('additional_info', '')
    
    text = f"üìã <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø</b>\n\n"
    text += f"üì¶ <b>–ó–ê–Ø–í–ö–ê #{request_id}</b>\n"
    text += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull_info.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üì¶ –û–±—ä—ë–º: {request.get('volume', 0):.1f} —Ç\n"
    text += f"üìç –ú–∞—Ä—à—Ä—É—Ç: {request.get('route_from', '')} ‚Üí {request.get('route_to', '')}\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += f"<b>–í–ê–®–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:</b>\n\n"
    text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>{vehicle_type}</b>\n"
    text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price:,.0f} ‚ÇΩ</b>\n"
    text += f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{delivery_date}</b>\n"
    
    if additional_info:
        text += f"\n‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n{additional_info}\n"
    
    text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_offer"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_offer")
    )
    
    if is_callback:
        await message_or_callback.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await message_or_callback.answer(text, reply_markup=keyboard, parse_mode='HTML')
    
    await LogisticOfferStatesGroup.confirm.set()


@dp.callback_query_handler(lambda c: c.data == 'confirm_offer', state=LogisticOfferStatesGroup.confirm)
async def offer_confirmed(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    user_id = callback.from_user.id
    data = await state.get_data()
    
    request_id = data.get('request_id')
    vehicle_type = data.get('vehicle_type')
    price = data.get('price')
    delivery_date = data.get('delivery_date')
    additional_info = data.get('additional_info', '')
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    global logistic_offers
    offer_id = len(logistic_offers) + 1
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    offer = {
        'id': offer_id,
        'request_id': request_id,
        'logist_id': user_id,
        'vehicle_type': vehicle_type,
        'price': price,
        'delivery_date': delivery_date,
        'additional_info': additional_info,
        'status': 'pending',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    logistic_offers[offer_id] = offer
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    request = shipping_requests.get(request_id, {})
    exporter_id = request.get('exporter_id')
    logist_name = users.get(user_id, {}).get('company_name', '–õ–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–æ–≥–∏—Å—Ç–∞
    text = f"‚úÖ <b>–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –û–¢–ü–†–ê–í–õ–ï–ù–û!</b>\n\n"
    text += f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
    text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle_type}\n"
    text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price:,.0f} ‚ÇΩ\n"
    text += f"üìÖ –î–∞—Ç–∞: {delivery_date}\n\n"
    text += f"–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É.\n"
    text += f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–Ω –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ."
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="my_offers"))
    keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞
    if exporter_id:
        try:
            exporter_text = f"üîî <b>–ù–û–í–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ü–û –í–ê–®–ï–ô –ó–ê–Ø–í–ö–ï!</b>\n\n"
            exporter_text += f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
            exporter_text += f"üë§ –û—Ç: {logist_name}\n"
            exporter_text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle_type}\n"
            exporter_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price:,.0f} ‚ÇΩ\n"
            exporter_text += f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_date}\n"
            
            if additional_info:
                exporter_text += f"\n‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n{additional_info}\n"
            
            exporter_keyboard = InlineKeyboardMarkup()
            exporter_keyboard.add(
                InlineKeyboardButton("üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"view_offer_{offer_id}")
            )
            
            await bot.send_message(
                exporter_id,
                exporter_text,
                reply_markup=exporter_keyboard,
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É: {e}")
    
    await state.finish()
    await callback.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    
    logging.info(f"‚úÖ –õ–æ–≥–∏—Å—Ç {user_id} —Å–æ–∑–¥–∞–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id} –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}")


@dp.callback_query_handler(lambda c: c.data == 'cancel_offer', state='*')
async def offer_cancelled(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    await state.finish()
    
    text = "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üì¶ –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="logistic_requests_list"))
    keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


# ============================================================================
# –õ–û–ì–ò–°–¢: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø–ú–ò
# ============================================================================

@dp.callback_query_handler(lambda c: c.data == 'my_offers', state='*')
async def show_my_offers(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞
    my_offers = [
        (offer_id, offer) for offer_id, offer in logistic_offers.items()
        if offer.get('logist_id') == user_id
    ]
    
    if not my_offers:
        text = "üìã <b>–ú–û–ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø</b>\n\n"
        text += "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n\n"
        text += "<i>–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω—É—é –∑–∞—è–≤–∫—É</i>"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üì¶ –ö —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫", callback_data="logistic_requests_list"))
        keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    by_status = {
        'pending': [],
        'accepted': [],
        'rejected': [],
        'cancelled': []
    }
    
    for offer_id, offer in my_offers:
        status = offer.get('status', 'pending')
        by_status[status].append((offer_id, offer))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    for status in by_status:
        by_status[status].sort(key=lambda x: x[1].get('created_at', ''), reverse=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"üìã <b>–ú–û–ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø</b>\n\n"
    text += f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <b>{len(my_offers)}</b>\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    pending_count = len(by_status['pending'])
    accepted_count = len(by_status['accepted'])
    rejected_count = len(by_status['rejected'])
    
    text += f"üïê –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: <b>{pending_count}</b>\n"
    text += f"‚úÖ –ü—Ä–∏–Ω—è—Ç—ã: <b>{accepted_count}</b>\n"
    text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: <b>{rejected_count}</b>\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    for status_key, status_name, emoji in [
        ('pending', '–û–∂–∏–¥–∞—é—Ç', 'üïê'),
        ('accepted', '–ü—Ä–∏–Ω—è—Ç—ã', '‚úÖ'),
        ('rejected', '–û—Ç–∫–ª–æ–Ω–µ–Ω—ã', '‚ùå')
    ]:
        offers = by_status[status_key]
        if offers:
            for offer_id, offer in offers[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 5 –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                request_id = offer.get('request_id')
                request = shipping_requests.get(request_id, {})
                pull_id = request.get('pull_id')
                pull_info = pulls.get(pull_id, {})
                
                culture = pull_info.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                price = offer.get('price', 0)
                
                button_text = f"{emoji} #{offer_id} | {culture} | {price:,.0f} ‚ÇΩ"
                
                keyboard.add(
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"view_my_offer_{offer_id}"
                    )
                )
    
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="my_offers")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('view_my_offer_'), state='*')
async def view_my_offer_details(callback: types.CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    await state.finish()
    
    try:
        offer_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True)
        return
    
    if offer_id not in logistic_offers:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    offer = logistic_offers[offer_id]
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if offer.get('logist_id') != user_id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    request_id = offer.get('request_id')
    request = shipping_requests.get(request_id, {})
    pull_id = request.get('pull_id')
    pull_info = pulls.get(pull_id, {})
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–µ
    exporter_id = request.get('exporter_id')
    exporter_info = users.get(exporter_id, {})
    exporter_company = exporter_info.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"üìã <b>–ú–û–Å –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï #{offer_id}</b>\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ
    text += f"üì¶ <b>–ó–ê–Ø–í–ö–ê #{request_id}</b>\n"
    text += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull_info.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üì¶ –û–±—ä—ë–º: {request.get('volume', 0):.1f} —Ç\n"
    text += f"üìç –ú–∞—Ä—à—Ä—É—Ç: {request.get('route_from', '')} ‚Üí {request.get('route_to', '')}\n"
    text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {exporter_company}\n\n"
    
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
    text += f"<b>–í–ê–®–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:</b>\n\n"
    text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>{offer.get('vehicle_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}</b>\n"
    text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{offer.get('price', 0):,.0f} ‚ÇΩ</b>\n"
    text += f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{offer.get('delivery_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
    
    if offer.get('additional_info'):
        text += f"\n‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n{offer.get('additional_info')}\n"
    
    text += f"\nüìÖ –°–æ–∑–¥–∞–Ω–æ: {offer.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    # –°—Ç–∞—Ç—É—Å
    status = offer.get('status', 'pending')
    status_emoji = get_status_emoji(status)
    status_name = get_status_name(status)
    
    text += f"üìä –°—Ç–∞—Ç—É—Å: <b>{status_emoji} {status_name}</b>\n"
    
    if status == 'accepted':
        text += f"\n‚úÖ <b>–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n"
        text += f"<i>–û–∂–∏–¥–∞–π—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞</i>"
    elif status == 'rejected':
        text += f"\n‚ùå <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n"
        if offer.get('rejection_reason'):
            text += f"<i>–ü—Ä–∏—á–∏–Ω–∞: {offer.get('rejection_reason')}</i>"
    elif status == 'cancelled':
        text += f"\n‚ùå <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –≤–∞–º–∏</b>"
    
    # –ö–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if status == 'pending':
        # –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å
        keyboard.add(
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_offer_{offer_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_my_offer_{offer_id}")
        )
    
    keyboard.add(
        InlineKeyboardButton("üîô –ö –º–æ–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º", callback_data="my_offers")
    )
    keyboard.add(
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('cancel_my_offer_'), state='*')
async def cancel_my_offer_confirm(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    await state.finish()
    
    try:
        offer_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID", show_alert=True)
        return
    
    if offer_id not in logistic_offers:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    offer = logistic_offers[offer_id]
    
    if offer.get('logist_id') != callback.from_user.id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", show_alert=True)
        return
    
    if offer.get('status') != 'pending':
        await callback.answer("‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True)
        return
    
    text = f"‚ùì <b>–û–¢–ú–ï–ù–ê –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø #{offer_id}</b>\n\n"
    text += f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?\n\n"
    text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {offer.get('vehicle_type')}\n"
    text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {offer.get('price', 0):,.0f} ‚ÇΩ\n\n"
    text += f"<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å</i>"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_offer_{offer_id}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"view_my_offer_{offer_id}")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('confirm_cancel_offer_'), state='*')
async def cancel_my_offer_confirmed(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"""
    await state.finish()
    
    try:
        offer_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID", show_alert=True)
        return
    
    if offer_id not in logistic_offers:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    offer = logistic_offers[offer_id]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    offer['status'] = 'cancelled'
    offer['cancelled_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞
    request_id = offer.get('request_id')
    request = shipping_requests.get(request_id, {})
    exporter_id = request.get('exporter_id')
    
    if exporter_id:
        try:
            await bot.send_message(
                exporter_id,
                f"üîî <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id} –æ—Ç–º–µ–Ω–µ–Ω–æ –ª–æ–≥–∏—Å—Ç–æ–º</b>\n\n"
                f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ª–æ–≥–∏—Å—Ç –æ—Ç–º–µ–Ω–∏–ª —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞: {e}")
    
    text = f"‚úÖ <b>–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï #{offer_id} –û–¢–ú–ï–ù–ï–ù–û</b>\n\n"
    text += f"–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n"
    text += f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º."
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="my_offers"))
    keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    logging.info(f"‚ùå –õ–æ–≥–∏—Å—Ç {callback.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id}")


@dp.callback_query_handler(lambda c: c.data.startswith('edit_offer_'), state='*')
async def edit_offer_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    await state.finish()
    
    try:
        offer_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID", show_alert=True)
        return
    
    if offer_id not in logistic_offers:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    offer = logistic_offers[offer_id]
    
    if offer.get('logist_id') != callback.from_user.id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", show_alert=True)
        return
    
    if offer.get('status') != 'pending':
        await callback.answer("‚ùå –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True)
        return
    
    text = f"‚úèÔ∏è <b>–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø #{offer_id}</b>\n\n"
    text += f"–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
    text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {offer.get('vehicle_type')}\n"
    text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {offer.get('price', 0):,.0f} ‚ÇΩ\n"
    text += f"üìÖ –î–∞—Ç–∞: {offer.get('delivery_date')}\n\n"
    text += f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üöõ –ò–∑–º–µ–Ω–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", callback_data=f"edit_vehicle_{offer_id}"),
        InlineKeyboardButton("üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"edit_price_{offer_id}"),
        InlineKeyboardButton("üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É", callback_data=f"edit_date_{offer_id}"),
        InlineKeyboardButton("‚ÑπÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data=f"edit_info_{offer_id}")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"view_my_offer_{offer_id}")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


# –î–æ–±–∞–≤–∏–º FSM states –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class EditOfferStatesGroup(StatesGroup):
    """FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    offer_id = State()
    field = State()
    value = State()


@dp.callback_query_handler(lambda c: c.data.startswith('edit_price_'), state='*')
async def edit_offer_price(callback: types.CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
    try:
        offer_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    offer = logistic_offers.get(offer_id)
    if not offer:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    await state.update_data(offer_id=offer_id, field='price')
    
    text = f"üí∞ <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –¶–ï–ù–´</b>\n\n"
    text += f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{offer.get('price', 0):,.0f} ‚ÇΩ</b>\n\n"
    text += f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö:"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_offer_{offer_id}"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await EditOfferStatesGroup.value.set()
    await callback.answer()


@dp.message_handler(state=EditOfferStatesGroup.value)
async def edit_offer_value_entered(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    data = await state.get_data()
    offer_id = data.get('offer_id')
    field = data.get('field')
    
    offer = logistic_offers.get(offer_id)
    if not offer:
        await message.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await state.finish()
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    if field == 'price':
        try:
            new_price = float(message.text.strip().replace(' ', '').replace(',', '').replace('‚ÇΩ', ''))
            if new_price <= 0 or new_price > 10000000:
                await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            
            old_price = offer.get('price')
            offer['price'] = new_price
            offer['updated_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            text = f"‚úÖ <b>–¶–ï–ù–ê –ò–ó–ú–ï–ù–ï–ù–ê!</b>\n\n"
            text += f"–ë—ã–ª–æ: {old_price:,.0f} ‚ÇΩ\n"
            text += f"–°—Ç–∞–ª–æ: <b>{new_price:,.0f} ‚ÇΩ</b>\n\n"
            text += f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞
            request_id = offer.get('request_id')
            request = shipping_requests.get(request_id, {})
            exporter_id = request.get('exporter_id')
            
            if exporter_id:
                try:
                    await bot.send_message(
                        exporter_id,
                        f"üîî <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id} –∏–∑–º–µ–Ω–µ–Ω–æ</b>\n\n"
                        f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
                        f"üí∞ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: <b>{new_price:,.0f} ‚ÇΩ</b>",
                        parse_mode='HTML'
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
        except ValueError:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
            return
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"view_my_offer_{offer_id}"))
    keyboard.add(InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="my_offers"))
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    await state.finish()
    
    logging.info(f"‚úèÔ∏è –õ–æ–≥–∏—Å—Ç {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id}")


# ============================================================================
# –õ–û–ì–ò–°–¢: –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
# ============================================================================

async def notify_logistic_offer_accepted(offer_id: int, exporter_id: int):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        if offer_id not in logistic_offers:
            return
        
        offer = logistic_offers[offer_id]
        logist_id = offer.get('logist_id')
        
        if not logist_id:
            return
        
        request_id = offer.get('request_id')
        request = shipping_requests.get(request_id, {})
        exporter_info = users.get(exporter_id, {})
        exporter_company = exporter_info.get('company_name', '–ö–æ–º–ø–∞–Ω–∏—è')
        
        text = f"üéâ <b>–í–ê–®–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ü–†–ò–ù–Ø–¢–û!</b>\n\n"
        text += f"üìã –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id}\n"
        text += f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
        text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {exporter_company}\n\n"
        text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {offer.get('vehicle_type')}\n"
        text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {offer.get('price', 0):,.0f} ‚ÇΩ\n"
        text += f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {offer.get('delivery_date')}\n\n"
        text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += f"‚úÖ <b>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>\n"
        text += f"1. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º\n"
        text += f"2. –£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –ø–æ–≥—Ä—É–∑–∫–∏\n"
        text += f"3. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç\n\n"
        
        if exporter_info.get('phone'):
            text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–∫–∞–∑—á–∏–∫–∞: {exporter_info.get('phone')}\n"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data=f"view_my_offer_{offer_id}")
        )
        keyboard.add(
            InlineKeyboardButton("üöö –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="my_deliveries")
        )
        
        await bot.send_message(
            logist_id,
            text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Å—Ç—É {logist_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏: {e}")


async def notify_logistic_offer_rejected(offer_id: int, exporter_id: int, reason: str = None):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        if offer_id not in logistic_offers:
            return
        
        offer = logistic_offers[offer_id]
        logist_id = offer.get('logist_id')
        
        if not logist_id:
            return
        
        request_id = offer.get('request_id')
        exporter_info = users.get(exporter_id, {})
        exporter_company = exporter_info.get('company_name', '–ö–æ–º–ø–∞–Ω–∏—è')
        
        text = f"‚ùå <b>–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –û–¢–ö–õ–û–ù–ï–ù–û</b>\n\n"
        text += f"üìã –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id}\n"
        text += f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
        text += f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {exporter_company}\n\n"
        text += f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –ø—Ä–∏–Ω—è—Ç–æ.\n\n"
        
        if reason:
            text += f"üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞:</b>\n{reason}\n\n"
        
        text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        text += f"‚Ä¢ –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ—é —Ü–µ–Ω–æ–≤—É—é –ø–æ–ª–∏—Ç–∏–∫—É\n"
        text += f"‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –±–æ–ª–µ–µ –≥–∏–±–∫–∏–µ —É—Å–ª–æ–≤–∏—è\n"
        text += f"‚Ä¢ –ò—â–∏—Ç–µ –¥—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏\n"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üì¶ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏", callback_data="logistic_requests_list")
        )
        keyboard.add(
            InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="my_offers")
        )
        
        await bot.send_message(
            logist_id,
            text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        logging.info(f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Å—Ç—É {logist_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")


async def notify_logistic_new_request(request_id: int):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö –ª–æ–≥–∏—Å—Ç–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    try:
        if request_id not in shipping_requests:
            return
        
        request = shipping_requests[request_id]
        pull_id = request.get('pull_id')
        pull_info = pulls.get(pull_id, {})
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ª–æ–≥–∏—Å—Ç–æ–≤
        logistics = [uid for uid, user in users.items() if user.get('role') == 'logistic']
        
        if not logistics:
            return
        
        text = f"üîî <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –î–û–°–¢–ê–í–ö–£!</b>\n\n"
        text += f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
        text += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull_info.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"üì¶ –û–±—ä—ë–º: {request.get('volume', 0):.1f} —Ç\n"
        text += f"üìç –ú–∞—Ä—à—Ä—É—Ç: {request.get('route_from', '')} ‚Üí {request.get('route_to', '')}\n"
        
        if request.get('desired_date'):
            text += f"üìÖ –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request.get('desired_date')}\n"
        
        if request.get('budget'):
            text += f"üí∞ –ë—é–¥–∂–µ—Ç: {request.get('budget'):,.0f} ‚ÇΩ\n"
        
        text += f"\n<i>–¢–æ—Ä–æ–ø–∏—Ç–µ—Å—å! –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã —É–∂–µ —Å–º–æ—Ç—Ä—è—Ç —ç—Ç—É –∑–∞—è–≤–∫—É</i>"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"view_shipping_request_{request_id}")
        )
        keyboard.add(
            InlineKeyboardButton("üì¶ –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="logistic_requests_list")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ª–æ–≥–∏—Å—Ç—É
        sent_count = 0
        for logist_id in logistics:
            try:
                await bot.send_message(
                    logist_id,
                    text,
                    reply_markup=keyboard,
                    parse_mode='HTML'
                )
                sent_count += 1
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–∏—Å—Ç—É {logist_id}: {e}")
        
        logging.info(f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ #{request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ª–æ–≥–∏—Å—Ç–∞–º")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–æ–≤: {e}")


async def notify_logistic_delivery_started(delivery_id: int):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∞ –æ –Ω–∞—á–∞–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        if delivery_id not in deliveries:
            return
        
        delivery = deliveries[delivery_id]
        logist_id = delivery.get('logist_id')
        
        if not logist_id:
            return
        
        request_id = delivery.get('request_id')
        
        text = f"üöö <b>–î–û–°–¢–ê–í–ö–ê –ù–ê–ß–ê–õ–ê–°–¨!</b>\n\n"
        text += f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id}\n"
        text += f"üìã –ó–∞—è–≤–∫–∞ #{request_id}\n\n"
        text += f"‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: <b>–í –ø—É—Ç–∏</b>\n\n"
        text += f"üìç –ú–∞—Ä—à—Ä—É—Ç: {delivery.get('route_from', '')} ‚Üí {delivery.get('route_to', '')}\n"
        text += f"üìÖ –ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞: {delivery.get('delivery_date', '')}\n\n"
        text += f"<i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏!</i>"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üìã –î–µ—Ç–∞–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data=f"view_delivery_{delivery_id}")
        )
        
        await bot.send_message(
            logist_id,
            text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        logging.info(f"üöö –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Å—Ç—É {logist_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")


async def notify_logistic_delivery_completed(delivery_id: int):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        if delivery_id not in deliveries:
            return
        
        delivery = deliveries[delivery_id]
        logist_id = delivery.get('logist_id')
        
        if not logist_id:
            return
        
        offer_id = delivery.get('offer_id')
        offer = logistic_offers.get(offer_id, {})
        price = offer.get('price', 0)
        
        text = f"‚úÖ <b>–î–û–°–¢–ê–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!</b>\n\n"
        text += f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id}\n"
        text += f"üí∞ –°—É–º–º–∞: <b>{price:,.0f} ‚ÇΩ</b>\n\n"
        text += f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞!\n\n"
        text += f"üìä <b>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>\n"
        text += f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –æ–ø–ª–∞—Ç—É –æ—Ç –∑–∞–∫–∞–∑—á–∏–∫–∞\n"
        text += f"‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
        text += f"‚Ä¢ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫", callback_data="delivery_history")
        )
        keyboard.add(
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="logistic_statistics")
        )
        
        await bot.send_message(
            logist_id,
            text,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
        logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Å—Ç—É {logist_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")


async def notify_logistic_request_cancelled(request_id: int, reason: str = None):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ª–æ–≥–∏—Å—Ç–æ–≤ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏"""
    try:
        if request_id not in shipping_requests:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ
        related_offers = [
            (offer_id, offer) for offer_id, offer in logistic_offers.items()
            if offer.get('request_id') == request_id and offer.get('status') == 'pending'
        ]
        
        if not related_offers:
            return
        
        text = f"‚ùå <b>–ó–ê–Ø–í–ö–ê –û–¢–ú–ï–ù–ï–ù–ê</b>\n\n"
        text += f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º.\n\n"
        
        if reason:
            text += f"üí¨ –ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
        
        text += f"–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ."
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üì¶ –î—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏", callback_data="logistic_requests_list")
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ª–æ–≥–∏—Å—Ç–∞
        for offer_id, offer in related_offers:
            logist_id = offer.get('logist_id')
            if logist_id:
                try:
                    await bot.send_message(
                        logist_id,
                        text,
                        reply_markup=keyboard,
                        parse_mode='HTML'
                    )
                    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
                    offer['status'] = 'cancelled'
                    await asyncio.sleep(0.1)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞ {logist_id}: {e}")
        
        logging.info(f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏ #{request_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏: {e}")


# ============================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –õ–û–ì–ò–°–¢–ê
# ============================================================================

@dp.callback_query_handler(lambda c: c.data == 'my_deliveries', state='*')
async def show_my_deliveries(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –ª–æ–≥–∏—Å—Ç–∞
    my_deliveries = [
        (deliv_id, deliv) for deliv_id, deliv in deliveries.items()
        if deliv.get('logist_id') == user_id
    ]
    
    if not my_deliveries:
        text = "üöö <b>–ú–û–ò –î–û–°–¢–ê–í–ö–ò</b>\n\n"
        text += "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫\n\n"
        text += "<i>–î–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</i>"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="my_offers"))
        keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    by_status = {
        'pending': [],
        'in_progress': [],
        'completed': [],
        'cancelled': []
    }
    
    for deliv_id, deliv in my_deliveries:
        status = deliv.get('status', 'pending')
        by_status[status].append((deliv_id, deliv))
    
    text = f"üöö <b>–ú–û–ò –î–û–°–¢–ê–í–ö–ò</b>\n\n"
    text += f"–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: <b>{len(my_deliveries)}</b>\n\n"
    
    active = len(by_status['pending']) + len(by_status['in_progress'])
    completed = len(by_status['completed'])
    
    text += f"üîµ –ê–∫—Ç–∏–≤–Ω—ã–µ: <b>{active}</b>\n"
    text += f"‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ: <b>{completed}</b>\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É:"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    for status_key, status_name, emoji in [
        ('pending', '–û–∂–∏–¥–∞—é—Ç', 'üïê'),
        ('in_progress', '–í –ø—É—Ç–∏', 'üöö'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω—ã', '‚úÖ')
    ]:
        delivs = by_status[status_key]
        if delivs:
            for deliv_id, deliv in delivs[:5]:
                request_id = deliv.get('request_id')
                request = shipping_requests.get(request_id, {})
                
                route = f"{request.get('route_from', '')} ‚Üí {request.get('route_to', '')}"
                
                button_text = f"{emoji} #{deliv_id} | {route}"
                
                keyboard.add(
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"view_delivery_{deliv_id}"
                    )
                )
    
    keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="my_deliveries"))
    keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == 'logistic_statistics', state='*')
async def show_logistic_statistics(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ª–æ–≥–∏—Å—Ç–∞"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    my_offers = [o for o in logistic_offers.values() if o.get('logist_id') == user_id]
    my_deliveries = [d for d in deliveries.values() if d.get('logist_id') == user_id]
    
    total_offers = len(my_offers)
    accepted_offers = len([o for o in my_offers if o.get('status') == 'accepted'])
    rejected_offers = len([o for o in my_offers if o.get('status') == 'rejected'])
    pending_offers = len([o for o in my_offers if o.get('status') == 'pending'])
    
    completed_deliveries = len([d for d in my_deliveries if d.get('status') == 'completed'])
    active_deliveries = len([d for d in my_deliveries if d.get('status') in ['pending', 'in_progress']])
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫
    total_earnings = sum(
        logistic_offers.get(d.get('offer_id'), {}).get('price', 0)
        for d in my_deliveries if d.get('status') == 'completed'
    )
    
    # –ö–æ–Ω–≤–µ—Ä—Å–∏—è
    conversion = (accepted_offers / total_offers * 100) if total_offers > 0 else 0
    
    text = f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´</b>\n\n"
    text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    text += f"<b>–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:</b>\n"
    text += f"üìã –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{total_offers}</b>\n"
    text += f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: <b>{accepted_offers}</b>\n"
    text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{rejected_offers}</b>\n"
    text += f"üïê –û–∂–∏–¥–∞—é—Ç –æ—Ç–≤–µ—Ç–∞: <b>{pending_offers}</b>\n"
    text += f"üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è: <b>{conversion:.1f}%</b>\n\n"
    
    text += f"<b>–î–û–°–¢–ê–í–ö–ò:</b>\n"
    text += f"üöö –ê–∫—Ç–∏–≤–Ω—ã–µ: <b>{active_deliveries}</b>\n"
    text += f"‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ: <b>{completed_deliveries}</b>\n\n"
    
    text += f"<b>–§–ò–ù–ê–ù–°–´:</b>\n"
    text += f"üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: <b>{total_earnings:,.0f} ‚ÇΩ</b>\n"
    if completed_deliveries > 0:
        avg_earning = total_earnings / completed_deliveries
        text += f"üìä –°—Ä–µ–¥–Ω—è—è –¥–æ—Å—Ç–∞–≤–∫–∞: <b>{avg_earning:,.0f} ‚ÇΩ</b>\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="my_offers"))
    keyboard.add(InlineKeyboardButton("üöö –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="my_deliveries"))
    keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –≠–ö–°–ü–ï–î–ò–¢–û–†–û–í ====================

@dp.message_handler(lambda m: m.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —É—Å–ª—É–≥", state='*')
async def create_expeditor_offer_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    user_id = message.from_user.id

    if user_id not in users or users[user_id].get('role') != 'expeditor':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞–º")
        return

    await message.answer(
        "üöõ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ª—É–≥</b>\n\n"
        "–®–∞–≥ 1/5: –¢–∏–ø —É—Å–ª—É–≥–∏\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –î–¢, –¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ):",
        parse_mode='HTML'
    )
    await ExcavatorStatesGroup.service_type.set()


@dp.message_handler(state=ExcavatorStatesGroup.service_type)
async def expeditor_service_type(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —É—Å–ª—É–≥–∏"""
    service_type = message.text.strip()

    await state.update_data(service_type=service_type)

    await message.answer(
        "üöõ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ª—É–≥</b>\n\n"
        "–®–∞–≥ 2/5: –°—Ç–æ–∏–º–æ—Å—Ç—å\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (‚ÇΩ):",
        parse_mode='HTML'
    )
    await ExcavatorStatesGroup.price.set()


@dp.message_handler(state=ExcavatorStatesGroup.price)
async def expeditor_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    try:
        price = float(message.text.replace(',', '.').replace(' ', ''))
        if price <= 0:
            raise ValueError

        await state.update_data(price=price)

        await message.answer(
            "üöõ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ª—É–≥</b>\n\n"
            "–®–∞–≥ 3/5: –°—Ä–æ–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3-5 –¥–Ω–µ–π):",
            parse_mode='HTML'
        )
        await ExcavatorStatesGroup.terms.set()

    except Exception as e:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000)")


@dp.message_handler(state=ExcavatorStatesGroup.terms)
async def expeditor_terms(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–æ–≤"""
    terms = message.text.strip()

    await state.update_data(terms=terms)

    await message.answer(
        "üöõ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ª—É–≥</b>\n\n"
        "–®–∞–≥ 4/5: –ü–æ—Ä—Ç—ã\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç–µ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
        parse_mode='HTML'
    )
    await ExcavatorStatesGroup.ports.set()


@dp.message_handler(state=ExcavatorStatesGroup.ports)
async def expeditor_ports(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ä—Ç–æ–≤"""
    ports = message.text.strip()

    await state.update_data(ports=ports)

    await message.answer(
        "üöõ <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ª—É–≥</b>\n\n"
        "–®–∞–≥ 5/5: –ü—Ä–∏–º–µ—á–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:",
        parse_mode='HTML'
    )
    await ExcavatorStatesGroup.notes.set()


@dp.message_handler(lambda m: m.text == '/skip', state=ExcavatorStatesGroup.notes)
@dp.message_handler(state=ExcavatorStatesGroup.notes)
async def expeditor_notes(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    user_id = message.from_user.id

    notes = "" if message.text == '/skip' else message.text.strip()
    await state.update_data(notes=notes)

    data = await state.get_data()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    global expeditor_offers
    offer_id = len(expeditor_offers) + 1

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    offer = {
        'id': offer_id,
        'expeditor_id': user_id,
        'service_type': data['service_type'],
        'price': data['price'],
        'terms': data['terms'],
        'ports': data['ports'],
        'notes': notes,
        'status': 'active',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }

    expeditor_offers[offer_id] = offer

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    expeditor_name = users[user_id].get('name', '–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä')

    text = f"‚úÖ <b>–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ª—É–≥ #{offer_id} —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
    text += f"üìã –£—Å–ª—É–≥–∞: {data['service_type']}\n"
    text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {data['price']:,.0f} ‚ÇΩ\n"
    text += f"‚è± –°—Ä–æ–∫–∏: {data['terms']}\n"
    text += f"üö¢ –ü–æ—Ä—Ç—ã: {data['ports']}\n"
    if notes:
        text += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {notes}\n"
    text += f"\nüë§ –ö–æ–Ω—Ç–∞–∫—Ç: {expeditor_name}\n"
    text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {users[user_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}"

    await message.answer(text, parse_mode='HTML', reply_markup=expeditor_keyboard())

    await state.finish()

    logging.info(f"‚úÖ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä {user_id} —Å–æ–∑–¥–∞–ª –∫–∞—Ä—Ç–æ—á–∫—É —É—Å–ª—É–≥ #{offer_id}")


# ==================== –§–£–ù–ö–¶–ò–ò –°–û–•–†–ê–ù–ï–ù–ò–Ø ====================

def save_shipping_requests():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É"""
    try:
        with open('data/shipping_requests.pkl', 'wb') as f:
            pickle.dump(shipping_requests, f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è shipping_requests: {e}")


def load_shipping_requests():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É"""
    global shipping_requests
    try:
        if False:  # Pickle disabled
            with open('data/shipping_requests.pkl', 'rb') as f:
                shipping_requests = pickle.load(f)
                logging.info(f"‚úÖ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(shipping_requests)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ shipping_requests: {e}")
        shipping_requests = {}

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò –ù–ê –õ–û–ì–ò–°–¢–ò–ö–£ (–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê


@dp.message_handler(state=ShippingRequestStatesGroup.route_from)
async def shipping_route_from(message: types.Message, state: FSMContext):
    """–®–∞–≥ 1: –ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    route_from = message.text.strip()
    
    await state.update_data(route_from=route_from)
    
    await message.answer(
        f"üìç –ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: <b>{route_from}</b>\n\n"
        "<b>–®–∞–≥ 2 –∏–∑ 5</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–≥–æ—Ä–æ–¥/–ø–æ—Ä—Ç):",
        parse_mode='HTML'
    )
    
    await ShippingRequestStatesGroup.route_to.set()


@dp.message_handler(state=ShippingRequestStatesGroup.route_to)
async def shipping_route_to(message: types.Message, state: FSMContext):
    """–®–∞–≥ 2: –ü—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    route_to = message.text.strip()
    
    await state.update_data(route_to=route_to)
    
    data = await state.get_data()
    pull = pulls[data['pull_id']]
    
    # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ë–µ—Ä—ë–º target_volume (–æ–±—â–∏–π –æ–±—ä—ë–º –ø—É–ª–∞)
    total_volume = pull.get('target_volume', 0)
    
    await message.answer(
        f"üìç –ú–∞—Ä—à—Ä—É—Ç: <b>{data['route_from']}</b> ‚Üí <b>{route_to}</b>\n\n"
        "<b>–®–∞–≥ 3 –∏–∑ 5</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥—Ä—É–∑–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏ (—Ç–æ–Ω–Ω)\n"
        f"–û–±—ä—ë–º –ø—É–ª–∞: {total_volume:.0f} —Ç",
        parse_mode='HTML'
    )
    
    await ShippingRequestStatesGroup.volume.set()


@dp.message_handler(state=ShippingRequestStatesGroup.volume)
async def shipping_volume(message: types.Message, state: FSMContext):
    """–®–∞–≥ 3: –û–±—ä—ë–º"""
    try:
        volume = float(message.text.replace(',', '.').replace(' ', ''))
        
        if volume <= 0:
            await message.answer("‚ùå –û–±—ä—ë–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è")
            return
        
        data = await state.get_data()
        pull = pulls[data['pull_id']]
        
        # ‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ target_volume (–æ–±—â–µ–≥–æ –æ–±—ä—ë–º–∞ –ø—É–ª–∞)
        target_volume = pull.get('target_volume', 0)
        
        if volume > target_volume:
            await message.answer(
                f"‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –æ–±—ä—ë–º –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–±—ä—ë–º –ø—É–ª–∞!\n"
                f"–û–±—ä—ë–º –ø—É–ª–∞: {target_volume:.0f} —Ç"
            )
            return
        
        await state.update_data(volume=volume)
        
        await message.answer(
            f"üì¶ –û–±—ä—ë–º –ø–µ—Ä–µ–≤–æ–∑–∫–∏: <b>{volume:.0f} —Ç</b>\n\n"
            "<b>–®–∞–≥ 4 –∏–∑ 5</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:",
            parse_mode='HTML'
        )
        
        await ShippingRequestStatesGroup.culture.set()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n–ü—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 150.5")


@dp.message_handler(state=ShippingRequestStatesGroup.culture)
async def shipping_culture(message: types.Message, state: FSMContext):
    """–®–∞–≥ 4: –ö—É–ª—å—Ç—É—Ä–∞"""
    culture = message.text.strip()
    
    await state.update_data(culture=culture)
    
    await message.answer(
        f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: <b>{culture}</b>\n\n"
        "<b>–®–∞–≥ 5 –∏–∑ 5</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì)\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:",
        parse_mode='HTML'
    )
    
    await ShippingRequestStatesGroup.desired_date.set()


@dp.message_handler(lambda m: m.text == '/skip', state=ShippingRequestStatesGroup.desired_date)
@dp.message_handler(state=ShippingRequestStatesGroup.desired_date)
async def shipping_desired_date(message: types.Message, state: FSMContext):
    """–®–∞–≥ 5: –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ (—Ñ–∏–Ω–∞–ª)"""
    
    if message.text != '/skip':
        desired_date = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        if not re.match(r'\d{2}\.\d{2}\.\d{4}', desired_date):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.11.2025)"
            )
            return
        
        await state.update_data(desired_date=desired_date)
    else:
        await state.update_data(desired_date='–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        desired_date = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    user_id = message.from_user.id
    pull = pulls[data['pull_id']]
    
    # –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
    request_id = len(shipping_requests) + 1
    
    request = {
        'id': request_id,
        'pull_id': data['pull_id'],
        'exporter_id': pull['exporter_id'],
        'route_from': data['route_from'],
        'route_to': data['route_to'],
        'volume': data['volume'],
        'culture': data['culture'],
        'desired_date': data.get('desired_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞'),
        'status': 'active',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'logist_id': None,
    }
    
    shipping_requests[request_id] = request
    save_shipping_requests()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = "‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
    text += f"üìã <b>–ó–∞—è–≤–∫–∞ #{request_id}</b>\n\n"
    text += f"üìç –ú–∞—Ä—à—Ä—É—Ç: {data['route_from']} ‚Üí {data['route_to']}\n"
    text += f"üì¶ –û–±—ä—ë–º: {data['volume']:.0f} —Ç\n"
    text += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {data['culture']}\n"
    text += f"üìÖ –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {data.get('desired_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
    text += "üîî –õ–æ–≥–∏—Å—Ç—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ"
    
    keyboard = exporter_keyboard()
    
    await message.answer(
        text,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–æ–≥–∏—Å—Ç–æ–≤
    logistics_users = [uid for uid, user in users.items() if user.get('role') == 'logistic']
    
    for logist_id in logistics_users:
        try:
            await bot.send_message(
                logist_id,
                f"üöö <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É!</b>\n\n"
                f"üìã –ó–∞—è–≤–∫–∞ #{request_id}\n"
                f"üìç {data['route_from']} ‚Üí {data['route_to']}\n"
                f"üì¶ {data['volume']:.0f} —Ç {data['culture']}\n"
                f"üìÖ {data.get('desired_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üöö –ú–æ–∏ –∑–∞—è–≤–∫–∏' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π",
                parse_mode='HTML'
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç—É {logist_id}: {e}")
    
    await state.finish()
    logging.info(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É #{request_id} —Å–æ–∑–¥–∞–Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–º {user_id}")



# ==================== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ü–†–ò–ö–†–ï–ü–õ–ï–ù–ò–ï –ü–û–î–†–Ø–î–ß–ò–ö–û–í ====================

async def attach_contractors_to_pull(pull_id):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–æ–≤ –∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤ –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É –ø—É–ª–ª—É
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø—É–ª–ª –¥–æ—Å—Ç–∏–≥–∞–µ—Ç –Ω—É–∂–Ω–æ–≥–æ —Ç–æ–Ω–Ω–∞–∂–∞
    """
    if pull_id not in pulls:
        return

    pull = pulls[pull_id]
    exporter_id = pull.get('exporter_id')
    pull_port = pull.get('port', '')
    pull_region = pull.get('region', '')

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ª–æ–≥–∏—Å—Ç–æ–≤
    suitable_logistics = []
    for req_id, request in shipping_requests.items():
        if request.get('status') != 'active':
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω—É/–ø–æ—Ä—Ç—É
        req_to = request.get('to', '').lower()
        if pull_port.lower() in req_to or pull_region.lower() in req_to:
            logist_id = request.get('logist_id')
            if logist_id in users:
                suitable_logistics.append({
                    'request_id': req_id,
                    'logist_id': logist_id,
                    'logist_name': users[logist_id].get('name', '–õ–æ–≥–∏—Å—Ç'),
                    'phone': users[logist_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    'route': f"{request['from']} ‚Üí {request['to']}",
                    'price': request['price'],
                    'volume': request['volume'],
                    'vehicle': request.get('vehicle_type', '–ù–µ —É–∫–∞–∑–∞–Ω')
                })

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤
    suitable_expeditors = []
    for offer_id, offer in expeditor_offers.items():
        if offer.get('status') != 'active':
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –ø–æ—Ä—Ç—É
        offer_ports = offer.get('ports', '').lower()
        if pull_port.lower() in offer_ports:
            expeditor_id = offer.get('expeditor_id')
            if expeditor_id in users:
                suitable_expeditors.append({
                    'offer_id': offer_id,
                    'expeditor_id': expeditor_id,
                    'expeditor_name': users[expeditor_id].get('name', '–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä'),
                    'phone': users[expeditor_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                    'service': offer['service_type'],
                    'price': offer['price'],
                    'terms': offer['terms'],
                    'ports': offer['ports']
                })

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä—É –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤
    if exporter_id and (suitable_logistics or suitable_expeditors):
        text = f"üéâ <b>–ü—É–ª–ª #{pull_id} —Å–æ–±—Ä–∞–Ω!</b>\n\n"
        text += f"üì¶ {pull['culture']}, {pull['volume']} —Ç\n"
        text += f"üö¢ –ü–æ—Ä—Ç: {pull_port}\n\n"

        if suitable_logistics:
            text += f"üöö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–æ–≥–∏—Å—Ç—ã ({len(suitable_logistics)}):</b>\n\n"
            for idx, logist in enumerate(suitable_logistics[:5], 1):
                text += f"{idx}. {logist['logist_name']}\n"
                text += f"   ‚Ä¢ {logist['route']}\n"
                text += f"   ‚Ä¢ {logist['price']:,.0f} ‚ÇΩ/—Ç, –¥–æ {logist['volume']} —Ç\n"
                text += f"   ‚Ä¢ {logist['vehicle']}\n"
                text += f"   ‚Ä¢ üìû {logist['phone']}\n\n"

            if len(suitable_logistics) > 5:
                text += f"<i>... –∏ –µ—â—ë {len(suitable_logistics) - 5} –ª–æ–≥–∏—Å—Ç–æ–≤</i>\n\n"

        if suitable_expeditors:
            text += f"üöõ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—ã ({len(suitable_expeditors)}):</b>\n\n"
            for idx, exp in enumerate(suitable_expeditors[:5], 1):
                text += f"{idx}. {exp['expeditor_name']}\n"
                text += f"   ‚Ä¢ {exp['service']}\n"
                text += f"   ‚Ä¢ {exp['price']:,.0f} ‚ÇΩ, —Å—Ä–æ–∫: {exp['terms']}\n"
                text += f"   ‚Ä¢ –ü–æ—Ä—Ç—ã: {exp['ports']}\n"
                text += f"   ‚Ä¢ üìû {exp['phone']}\n\n"

            if len(suitable_expeditors) > 5:
                text += f"<i>... –∏ –µ—â—ë {len(suitable_expeditors) - 5} —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤</i>\n\n"

        text += "üí° <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π.</b>"

        try:
            await bot.send_message(exporter_id, text, parse_mode='HTML')
            logging.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä—É {exporter_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤ –¥–ª—è –ø—É–ª–ª–∞ #{pull_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤: {e}")

    # ‚Üê –î–û–ë–ê–í–ò–¢–¨: –£–≤–µ–¥–æ–º–∏—Ç—å —Ñ–µ—Ä–º–µ—Ä–æ–≤ –∏–∑ –ø—É–ª–ª–∞
    if pull_id in pullparticipants:
        participants = pullparticipants[pull_id]
        for participant in participants:
            farmer_id = participant.get('farmer_id')
            if farmer_id and farmer_id in users:
                try:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–∞
                    farmer_text = f"üéâ <b>–ü—É–ª–ª #{pull_id} —Å–æ–±—Ä–∞–Ω!</b>\n\n"
                    farmer_text += f"üì¶ {pull['culture']}, {pull.get('target_volume', 0)} —Ç\n"
                    farmer_text += f"üö¢ –ü–æ—Ä—Ç: {pull_port}\n\n"
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ –ª–æ–≥–∏—Å—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if suitable_logistics:
                        logist = suitable_logistics[0]
                        farmer_text += "üöö <b>–î–æ—Å—Ç—É–ø–Ω—ã–π –ª–æ–≥–∏—Å—Ç:</b>\n"
                        farmer_text += f"‚Ä¢ {logist['logist_name']}\n"
                        farmer_text += f"‚Ä¢ {logist['route']}\n"
                        farmer_text += f"‚Ä¢ {logist['price']:,.0f} ‚ÇΩ/—Ç\n"
                        farmer_text += f"‚Ä¢ üìû {logist['phone']}\n\n"
                        
                        if len(suitable_logistics) > 1:
                            farmer_text += f"<i>...–∏ –µ—â—ë {len(suitable_logistics) - 1} –ª–æ–≥–∏—Å—Ç–æ–≤</i>\n\n"
                    
                    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤–æ–≥–æ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if suitable_expeditors:
                        exp = suitable_expeditors[0]
                        farmer_text += "üöõ <b>–î–æ—Å—Ç—É–ø–Ω—ã–π —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä:</b>\n"
                        farmer_text += f"‚Ä¢ {exp['expeditor_name']}\n"
                        farmer_text += f"‚Ä¢ {exp['service']}\n"
                        farmer_text += f"‚Ä¢ üìû {exp['phone']}\n\n"
                        
                        if len(suitable_expeditors) > 1:
                            farmer_text += f"<i>...–∏ –µ—â—ë {len(suitable_expeditors) - 1} —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤</i>\n\n"
                    
                    farmer_text += "üí° <b>–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥—Ä—è–¥—á–∏–∫–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–ª–∏ —á–µ—Ä–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞.</b>"
                    
                    await bot.send_message(farmer_id, 
                        f"‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –ø—É–ª–ª–µ –Ω–∞ {target_volume:.1f} —Ç!\n"
                        f"–í–∞—à–∞ –ø–∞—Ä—Ç–∏—è {batch['volume']:.1f} —Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—É–ª–ª #{pull_id}")
                    logging.info(f"‚úÖ –§–µ—Ä–º–µ—Ä—É {farmer_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–±–æ—Ä–µ –ø—É–ª–ª–∞ #{pull_id}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–µ—Ä–º–µ—Ä–∞ {farmer_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–æ–≥–∏—Å—Ç–æ–≤
    for logist in suitable_logistics:
        try:
            text = "üì¢ <b>–í–∞—à —Ç–∞—Ä–∏—Ñ –ø–µ—Ä–µ–¥–∞–Ω —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä—É!</b>\n\n"
            text += f"–ü—É–ª–ª #{pull_id}\n"
            text += f"üì¶ {pull['culture']}, {pull['volume']} —Ç\n"
            text += f"üö¢ –ü–æ—Ä—Ç: {pull_port}\n\n"
            text += "–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –ø–µ—Ä–µ–≤–æ–∑–∫–∏."

            await bot.send_message(logist['logist_id'], text, parse_mode='HTML')
            logging.info(f"‚úÖ –õ–æ–≥–∏—Å—Ç—É {logist['logist_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–ª–ª–µ #{pull_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤
    for exp in suitable_expeditors:
        try:
            text = "üì¢ <b>–í–∞—à–∏ —É—Å–ª—É–≥–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä—É!</b>\n\n"
            text += f"–ü—É–ª–ª #{pull_id}\n"
            text += f"üì¶ {pull['culture']}, {pull['volume']} —Ç\n"
            text += f"üö¢ –ü–æ—Ä—Ç: {pull_port}\n\n"
            text += "–≠–∫—Å–ø–æ—Ä—Ç–µ—Ä –º–æ–∂–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."

            await bot.send_message(exp['expeditor_id'], text, parse_mode='HTML')
            logging.info(f"‚úÖ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—É {exp['expeditor_id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—É–ª–ª–µ #{pull_id}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞: {e}")

async def on_startup(dp):
    logging.info("üöÄ –ë–æ—Ç Exportum –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
    load_users_from_json()
    load_users_from_pickle()
    load_pulls_from_pickle()
    load_batches_from_pickle()
    load_logistic_offers()
    load_deliveries()
    load_expeditor_offers()
    load_logistic_ratings()    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    os.makedirs(LOGS_DIR, exist_ok=True)
    os.makedirs(DATA_DIR, exist_ok=True)
    
    # ‚úÖ –ú–ò–ì–†–ê–¶–ò–Ø –°–¢–ê–†–´–• –ü–£–õ–û–í (–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö)
    logging.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –ø—É–ª–æ–≤...")
    try:
        migrate_old_pulls()
        logging.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø—É–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—É–ª–æ–≤: {e}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–π
    await setup_scheduler()
    
    try:
        await update_prices_cache()
        await update_news_cache()
        await schedule_weekly_reports()
        logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # –ê–≤—Ç–æ–ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    try:
        matches_found = await auto_match_batches_and_pulls()
        logging.info(f"‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: –Ω–∞–π–¥–µ–Ω–æ {matches_found} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞: {e}")

def validate_integration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    required_functions = [
        'load_users_from_json', 'save_users_to_json',
        'load_batches_from_pickle', 'save_batches_to_pickle', 
        'load_pulls_from_pickle', 'save_pulls_to_pickle',
        'update_prices_cache', 'update_news_cache',
        'auto_match_batches_and_pulls', 'find_matching_batches',
        'find_matching_exporters', 'notify_match'
    ]
    
    missing = []
    for func in required_functions:
        if not globals().get(func):
            missing.append(func)
    
    if missing:
        logging.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(missing)}")
    else:
        logging.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
validate_integration()

logging.info("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Exportum –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
logging.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
logging.info("   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –ò–ù–ù –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏")
logging.info("   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º") 
logging.info("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç—á–∏–Ω–≥ –ø–∞—Ä—Ç–∏–π –∏ –ø—É–ª–æ–≤")
logging.info("   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö")
logging.info("   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
logging.info("   ‚úÖ –ó–∞—è–≤–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É")
logging.info("   ‚úÖ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
logging.info("   ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏")
logging.info("   ‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ")
logging.info("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets")
logging.info("   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á")

@dp.message_handler(lambda m: m.text == 'üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏', state='*')
async def show_available_batches_exporter(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    
    logging.info(f"üì¶ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ '–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏' –≤—ã–∑–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")

    if user_id not in users or users[user_id].get('role') != 'exporter':
        logging.warning(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–º")
        await message.answer('‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º.')
        return

    available = []
    for farmer_id, batches in batches.items():
        for batch in user_batches:
            if batch.get('status') in ['active', '–ê–∫—Ç–∏–≤–Ω–∞', 'available', '–¥–æ—Å—Ç—É–ø–Ω–∞']:
                farmer_name = users.get(farmer_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                available.append({
                    'batch': batch,
                    'farmer_id': farmer_id,
                    'farmer_name': farmer_name
                })
    
    logging.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π: {len(available)}")

    if not available:
        await message.answer(
            "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
            "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π –æ—Ç —Ñ–µ—Ä–º–µ—Ä–æ–≤.\n\n"
            "üí° –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —Ñ–µ—Ä–º–µ—Ä—ã –¥–æ–±–∞–≤—è—Ç —Å–≤–æ–∏ –ø–∞—Ä—Ç–∏–∏.",
            parse_mode='HTML'
        )
        return

    text = "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ –æ—Ç —Ñ–µ—Ä–º–µ—Ä–æ–≤</b>\n\n"
    text += f"–í—Å–µ–≥–æ: {len(available)} –ø–∞—Ä—Ç–∏–π\n\n"

    keyboard = InlineKeyboardMarkup(row_width=1)

    for i, item in enumerate(available[:10], 1):
        batch = item['batch']
        farmer_name = item['farmer_name']

        text += f"{i}. <b>{batch['culture']}</b> - {batch['volume']} —Ç\n"
        text += f"   üí∞ {batch['price']:,.0f} ‚ÇΩ/—Ç | üìç {batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"   üë§ {farmer_name}\n\n"

        keyboard.add(InlineKeyboardButton(
            f"üåæ {batch['culture']} - {batch['volume']} —Ç",
            callback_data=f"viewbatch_{batch['id']}"
        ))

    if len(available) > 10:
        text += f"... –∏ –µ—â—ë {len(available) - 10} –ø–∞—Ä—Ç–∏–π\n\n"
        text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫' –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"

    keyboard.add(InlineKeyboardButton("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="advanced_batch_search"))
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ú–µ–Ω—é", callback_data="back_to_exporter_menu"))

    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')

@dp.message_handler(state='*')
async def handle_unexpected_messages(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"""
    
    # ‚úÖ –î–û–ë–ê–í–¨–¢–ï: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text and message.text.startswith('/'):
        return
    
    # ‚úÖ –î–û–ë–ê–í–¨–¢–ï: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    menu_buttons = [
        '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—É–ª', 'üì¶ –ú–æ–∏ –ø—É–ª—ã', 'üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–∏–∏', 'üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏',
        'üöö –ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É', 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', 'üìà –¶–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ', 'üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞',
        'üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏', 'üì¶ –ú–æ–∏ –ø–∞—Ä—Ç–∏–∏', 'üîç –ù–∞–π—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤', 'üìä –ú–æ–∏ —Å–¥–µ–ª–∫–∏',
        'üöö –ú–æ–∏ –∑–∞—è–≤–∫–∏', 'üöõ –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏',
    ]
    
    if message.text in menu_buttons:
        return
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞...
    current_state = await state.get_state()
    if current_state is not None:
        await message.answer("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel")
    else:
        user_id = message.from_user.id
        if user_id in users:
            role = users[user_id].get('role')
            keyboard = get_role_keyboard(role)
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=keyboard)
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
    current_state = await state.get_state()
    if current_state is not None:
        await message.answer("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel")
    else:
        user_id = message.from_user.id
        if user_id in users:
            role = users[user_id].get('role')
            keyboard = get_role_keyboard(role)
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=keyboard)
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")



async def on_shutdown(dp):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logging.info("‚èπ –ë–æ—Ç Exportum –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    save_users_to_json()
    save_users_to_pickle()
    save_pulls_to_pickle()
    save_shipping_requests()
    save_batches_to_pickle()
    save_logistic_offers()
    save_deliveries()
    save_expeditor_offers()
    savepullstopickle()
    logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    await bot.close()
    await dp.storage.close()
    await dp.storage.wait_closed()


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –õ–û–ì–ò–°–¢–ò–ö–ò - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

@dp.message_handler(lambda m: m.text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", state='*')
async def logistics_active_requests_handler(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id

    if user_id not in users or users[user_id].get('role') != 'logistic':
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Å—Ç–æ–≤")
        return

    await message.answer(
        "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n"
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "‚Ä¢ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 0\n"
        "‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: 0\n"
        "‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: 0",
        parse_mode='HTML'
    )

@dp.message_handler(lambda m: m.text == "üíº –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", state='*')
async def logistics_my_offers_handler(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id

    if user_id not in users or users[user_id].get('role') != 'logistic':
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Å—Ç–æ–≤")
        return

    await message.answer(
        "üíº <b>–ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: 0\n"
        "‚Ä¢ –ü—Ä–∏–Ω—è—Ç–æ: 0\n"
        "‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: 0",
        parse_mode='HTML'
    )

@dp.message_handler(lambda m: m.text == "üöõ –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏", state='*')
async def logistics_my_deliveries_handler(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id

    if user_id not in users or users[user_id].get('role') != 'logistic':
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Å—Ç–æ–≤")
        return

    await message.answer(
        "üöõ <b>–ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏</b>\n\n"
        "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Ä–µ–≤–æ–∑–æ–∫.\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: 0\n"
        "‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: 0\n"
        "‚Ä¢ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 0 ‚ÇΩ",
        parse_mode='HTML'
    )

@dp.message_handler(lambda m: m.text in ["üíº –ú–æ–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥–∏", "üíº –ú–æ–∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥"], state='*')
async def logistics_services_stats_handler(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id

    if user_id not in users or users[user_id].get('role') != 'logistic':
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–≥–∏—Å—Ç–æ–≤")
        return

    await message.answer(
        "üíº <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ª—É–≥</b>\n\n"
        "üìä <b>–ü–µ—Ä–µ–≤–æ–∑–∫–∏:</b> 0\n"
        "üí∞ <b>–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> 0 ‚ÇΩ\n"
        "‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n\n"
        "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        parse_mode='HTML'
    )

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò: –ù–û–í–û–°–¢–ò, –¶–ï–ù–´ –ò –ü–û–ò–°–ö
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

@dp.message_handler(lambda message: message.text == 'üìä –ù–æ–≤–æ—Å—Ç–∏ –∏ —Ü–µ–Ω—ã', state='*')
async def show_news_and_prices(message: types.Message, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Ü–µ–Ω"""
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.')
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton('üìà –¶–µ–Ω—ã', callback_data='show_prices'),
        InlineKeyboardButton('üì∞ –ù–æ–≤–æ—Å—Ç–∏', callback_data='show_news')
    )
    keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu'))

    await message.answer(
        'üìä <b>–ù–æ–≤–æ—Å—Ç–∏ –∏ —Ü–µ–Ω—ã –∑–µ—Ä–Ω–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@dp.callback_query_handler(lambda c: c.data == 'show_prices', state='*')
async def callback_show_prices(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã"""
    await bot.answer_callback_query(callback_query.id)
    try:
        regional_prices = parse_russia_regional_prices()
        fob_prices = parse_fob_black_sea()
        cbot_prices = parse_cbot_futures()
        message_text = format_prices_message(regional_prices, fob_prices, cbot_prices)

        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='show_prices'))
        keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_news_menu'))

        await bot.edit_message_text(
            message_text,
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    except MessageNotModified:
        pass
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ü–µ–Ω: {e}')


@dp.callback_query_handler(lambda c: c.data == 'show_news', state='*')
async def callback_show_news(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"""
    await bot.answer_callback_query(callback_query.id)
    try:
        news_list = parse_grain_news()
        message_text = format_news_message(news_list)

        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton('üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data='show_news'))
        keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_news_menu'))

        await bot.edit_message_text(
            message_text,
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    except MessageNotModified:
        pass
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}')


@dp.callback_query_handler(lambda c: c.data == 'back_to_news_menu', state='*')
async def callback_back_to_news_menu(callback_query: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π"""
    await bot.answer_callback_query(callback_query.id)

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton('üìà –¶–µ–Ω—ã', callback_data='show_prices'),
        InlineKeyboardButton('üì∞ –ù–æ–≤–æ—Å—Ç–∏', callback_data='show_news')
    )
    keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu'))

    try:
        await bot.edit_message_text(
            'üìä <b>–ù–æ–≤–æ—Å—Ç–∏ –∏ —Ü–µ–Ω—ã –∑–µ—Ä–Ω–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:',
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    except MessageNotModified:
        pass

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –ü–†–û–°–ú–û–¢–† –î–ï–¢–ê–õ–ï–ô –ü–ê–†–¢–ò–ò (CALLBACK)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

@dp.callback_query_handler(lambda c: c.data.startswith('batch:'), state='*')
async def view_batch_details_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø–∞—Ä—Ç–∏–∏"""
    await state.finish()
    
    try:
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: ':' –≤–º–µ—Å—Ç–æ '_'
        batch_id = parse_callback_id(callback.data)
    except (IndexError, ValueError) as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ batch_id –∏–∑ {callback.data}: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    user_id = callback.from_user.id
    
    # –ò—â–µ–º –ø–∞—Ä—Ç–∏—é
    batch = None
    farmer_id = None
    
    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—â–µ–º –ø–∞—Ä—Ç–∏—é —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for uid, user_batches in batches.items():
        for b in user_batches:
            if b['id'] == batch_id:
                batch = b
                farmer_id = uid
                break
        if batch:
            break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
    msg = f"üì¶ <b>–ü–∞—Ä—Ç–∏—è #{batch_id}</b>\n\n"
    msg += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {batch['culture']}\n"
    msg += f"üìä –û–±—ä—ë–º: {batch['volume']} —Ç\n"
    msg += f"üí∞ –¶–µ–Ω–∞: {batch['price']:,.0f} ‚ÇΩ/—Ç\n"
    msg += f"üìç –†–µ–≥–∏–æ–Ω: {batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    msg += f"üìã –°—Ç–∞—Ç—É—Å: {batch.get('status', '–ê–∫—Ç–∏–≤–Ω–∞')}\n"
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if 'nature' in batch or 'moisture' in batch:
        msg += "\n<b>üî¨ –ö–∞—á–µ—Å—Ç–≤–æ:</b>\n"
        if 'nature' in batch:
            msg += f"   üåæ –ù–∞—Ç—É—Ä–∞: {batch.get('nature', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –≥/–ª\n"
        if 'moisture' in batch:
            msg += f"   üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {batch['moisture']}%\n"
        if 'impurity' in batch:
            msg += f"   üåø –°–æ—Ä–Ω–æ—Å—Ç—å: {batch.get('impurity', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}%\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="view_my_batches")
    )
    
    await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == 'back_to_available_batches', state='*')
async def back_to_available_batches_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    if user_id not in users or users[user_id].get('role') != 'exporter':
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º", show_alert=True)
        return
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏
    available = []
    for farmer_id, batches in batches.items():
        for batch in user_batches:
            if batch.get('status') in ['active', '–ê–∫—Ç–∏–≤–Ω–∞', 'available', '–¥–æ—Å—Ç—É–ø–Ω–∞']:
                farmer_name = users.get(farmer_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                available.append({
                    'batch': batch,
                    'farmer_id': farmer_id,
                    'farmer_name': farmer_name
                })
    
    if not available:
        await callback.message.edit_text(
            "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
            "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π –æ—Ç —Ñ–µ—Ä–º–µ—Ä–æ–≤.",
            parse_mode='HTML'
        )
        await callback.answer()
        return
    
    text = "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ –æ—Ç —Ñ–µ—Ä–º–µ—Ä–æ–≤</b>\n\n"
    text += f"–í—Å–µ–≥–æ: {len(available)} –ø–∞—Ä—Ç–∏–π\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for i, item in enumerate(available[:10], 1):
        batch = item['batch']
        farmer_name = item['farmer_name']
        
        text += f"{i}. <b>{batch['culture']}</b> - {batch['volume']} —Ç\n"
        text += f"   üí∞ {batch['price']:,.0f} ‚ÇΩ/—Ç | üìç {batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"   üë§ {farmer_name}\n\n"
        
        keyboard.add(InlineKeyboardButton(
            f"üåæ {batch['culture']} - {batch['volume']} —Ç",
            callback_data=f"viewbatch_{batch['id']}"
        ))
    
    if len(available) > 10:
        text += f"... –∏ –µ—â—ë {len(available) - 10} –ø–∞—Ä—Ç–∏–π"
    
    keyboard.add(InlineKeyboardButton("üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="advanced_batch_search"))
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ú–µ–Ω—é", callback_data="back_to_exporter_menu"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == 'back_to_exporter_menu', state='*')
async def back_to_exporter_menu(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    user = users[user_id]
    name = user.get('name', '–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä')
    
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        pass
    
    keyboard = exporter_keyboard()
    
    await callback.message.answer(
        f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!\n\nüì¶ <b>–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞</b>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == 'advanced_batch_search', state='*')
async def advanced_batch_search_handler(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π"""
    await callback.message.edit_text(
        "üîç <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:",
        reply_markup=search_criteria_keyboard(),
        parse_mode='HTML'
    )
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('contact_farmer_'), state='*')
async def contact_farmer_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ö–æ–Ω—Ç–∞–∫—Ç —Å —Ñ–µ—Ä–º–µ—Ä–æ–º"""
    try:
        parts = callback.data.split('_')
        farmer_id = int(parts[2])
        batch_id = int(parts[3])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    farmer = users.get(farmer_id)
    if not farmer:
        await callback.answer("‚ùå –§–µ—Ä–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    farmer_name = farmer.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    farmer_phone = farmer.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    await callback.answer(
        f"üë§ –§–µ—Ä–º–µ—Ä: {farmer_name}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {farmer_phone}",
        show_alert=True
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ–µ—Ä–º–µ—Ä–∞ –æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
    try:
        exporter_name = users[callback.from_user.id].get('name', '–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä')
        await bot.send_message(
            farmer_id,
            f"‚úÖ <b>–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä –ø—Ä–æ—è–≤–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å!</b>\n\n"
            f"üë§ {exporter_name} –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª—Å—è –≤–∞—à–µ–π –ø–∞—Ä—Ç–∏–µ–π #{batch_id}\n\n"
            f"–û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞!",
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–µ—Ä–º–µ—Ä–∞: {e}")

@dp.message_handler(lambda message: message.text == 'üîç –ü–æ–∏—Å–∫', state='*')
async def start_search(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π"""
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer('‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.')
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton('üåæ –ü–æ –∫—É–ª—å—Ç—É—Ä–µ', callback_data='search_by_culture'),
        InlineKeyboardButton('üìç –ü–æ —Ä–µ–≥–∏–æ–Ω—É', callback_data='search_by_region')
    )
    keyboard.add(
        InlineKeyboardButton('üí∞ –ü–æ —Ü–µ–Ω–µ', callback_data='search_by_price'),
        InlineKeyboardButton('üì¶ –ü–æ –æ–±—ä–µ–º—É', callback_data='search_by_volume')
    )
    keyboard.add(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_to_menu'))

    await message.answer(
        'üîç <b>–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π –∑–µ—Ä–Ω–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:',
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@dp.callback_query_handler(lambda c: c.data == 'search_by_culture', state='*')
async def callback_search_by_culture(callback_query: types.CallbackQuery, state: FSMContext):
    await SearchByCulture.waiting_culture.set()
    """–ü–æ–∏—Å–∫ –ø–æ –∫—É–ª—å—Ç—É—Ä–µ"""
    await bot.answer_callback_query(callback_query.id)
    await SearchByCulture.waiting_culture.set()
    keyboard = culture_keyboard()
    try:
        await bot.edit_message_text(
            'üåæ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:</b>',
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    except MessageNotModified:
        pass


@dp.callback_query_handler(lambda c: c.data == 'search_by_region', state='*')
async def callback_search_by_region(callback_query: types.CallbackQuery):
    """–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É"""
    await bot.answer_callback_query(callback_query.id)
    await SearchBatchesStatesGroup.region.set()
    keyboard = region_keyboard()
    try:
        await bot.edit_message_text(
            'üìç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:</b>',
            callback_query.from_user.id,
            callback_query.message.message_id,
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    except MessageNotModified:
        pass

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –§–£–ù–ö–¶–ò–ò –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –í –ö–ê–ù–ê–õ –ò –û–¢–ß–ï–¢–´
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

async def publish_pull_to_channel(pull_data):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—É–ª–ª–∞ –≤ Telegram –∫–∞–Ω–∞–ª"""
    try:
        message_text = f"""üåê <b>–ù–û–í–´–ô –ü–£–õ–õ</b>

üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull_data.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì¶ –û–±—ä–µ–º: {pull_data.get('target_volume', 0):,.0f} —Ç–æ–Ω–Ω
üí∞ –¶–µ–Ω–∞: {pull_data.get('price', 0):,.0f} ‚ÇΩ/—Ç
üö¢ –ü–æ—Ä—Ç: {pull_data.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìä –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É:
‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: –¥–æ {pull_data.get('moisture', 0)}%
‚Ä¢ –ù–∞—Ç—É—Ä–∞: –æ—Ç {pull_data.get('nature', 0)} –≥/–ª
‚Ä¢ –ü—Ä–∏–º–µ—Å—å: –¥–æ {pull_data.get('impurity', 0)}%

üÜî ID –ø—É–ª–ª–∞: {pull_data.get('id', 'N/A')}
üìÖ –°–æ–∑–¥–∞–Ω: {pull_data.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üí¨ –î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É
"""
        await bot.send_message(CHANNEL_ID, message_text, parse_mode='HTML')
        logging.info(f'‚úÖ –ü—É–ª–ª {pull_data.get("id")} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª')
    except Exception as e:
        logging.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø—É–ª–ª–∞ –≤ –∫–∞–Ω–∞–ª: {e}')


async def publish_batch_to_channel(batch_data, farmer_name):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–∞—Ä—Ç–∏–∏ –≤ Telegram –∫–∞–Ω–∞–ª"""
    try:
        message_text = f"""üì¶ <b>–ù–û–í–ê–Ø –ü–ê–†–¢–ò–Ø</b>

üë§ –§–µ—Ä–º–µ—Ä: {farmer_name}
üåæ –ö—É–ª—å—Ç—É—Ä–∞: {batch_data.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì¶ –û–±—ä–µ–º: {batch_data.get('volume', 0):,.0f} —Ç–æ–Ω–Ω
üí∞ –¶–µ–Ω–∞: {batch_data.get('price', 0):,.0f} ‚ÇΩ/—Ç
üìç –†–µ–≥–∏–æ–Ω: {batch_data.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìä –ö–∞—á–µ—Å—Ç–≤–æ:
‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {batch_data.get('humidity', 0)}%
‚Ä¢ –ü—Ä–∏–º–µ—Å—å: {batch_data.get('impurity', 0)}%
‚Ä¢ –ö–ª–∞—Å—Å: {batch_data.get('quality_class', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üÜî ID –ø–∞—Ä—Ç–∏–∏: {batch_data.get('id', 'N/A')}

üí¨ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É
"""
        await bot.send_message(CHANNEL_ID, message_text, parse_mode='HTML')
        logging.info(f'‚úÖ –ü–∞—Ä—Ç–∏—è {batch_data.get("id")} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª')
    except Exception as e:
        logging.error(f'‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä—Ç–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}')


async def generate_weekly_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    try:
        farmers_count = len([u for u in users.values() if u.get('role') == 'farmer'])
        exporters_count = len([u for u in users.values() if u.get('role') == 'exporter'])
        logistics_count = len([u for u in users.values() if u.get('role') == 'logistic'])
        expeditors_count = len([u for u in users.values() if u.get('role') == 'expeditor'])

        total_batches = sum(len(batches) for user_batches in batches.values())
        total_pulls = len(pulls)
        total_deals = len(deals)

        total_batch_volume = 0
        for farmer_id, batches in batches.items():
            for batch in user_batches:
                total_batch_volume += batch.get('volume', 0)

        prices = []
        for farmer_id, batches in batches.items():
            for batch in user_batches:
                if batch.get('price'):
                    prices.append(batch['price'])

        avg_price = sum(prices) / len(prices) if prices else 0

        report_text = f"""üìä <b>–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢</b>
{'='*40}

üë• <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:</b>
‚Ä¢ –§–µ—Ä–º–µ—Ä—ã: {farmers_count}
‚Ä¢ –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä—ã: {exporters_count}
‚Ä¢ –õ–æ–≥–∏—Å—Ç—ã: {logistics_count}
‚Ä¢ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—ã: {expeditors_count}
‚Ä¢ <b>–í—Å–µ–≥–æ: {len(users)}</b>

üì¶ <b>–ü–ê–†–¢–ò–ò:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Ä—Ç–∏–π: {total_batches}
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: {total_batch_volume:,.0f} —Ç–æ–Ω–Ω
‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,.0f} ‚ÇΩ/—Ç

üåê <b>–ü–£–õ–õ–´:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø—É–ª–ª–æ–≤: {total_pulls}

ü§ù <b>–°–î–ï–õ–ö–ò:</b>
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {total_deals}

üìÖ –î–∞—Ç–∞ –æ—Ç—á–µ—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}
"""

        admin_id = 1481790360  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –∞–¥–º–∏–Ω–∞
        await bot.send_message(admin_id, report_text, parse_mode='HTML')

        try:
            await bot.send_message(CHANNEL_ID, report_text, parse_mode='HTML')
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            pass

        logging.info('‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    except Exception as e:
        logging.error(f'‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}')


async def schedule_weekly_reports():
    """–ó–∞–ø—É—Å–∫ scheduler –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    global scheduler
    try:
        scheduler.add_job(
            generate_weekly_report,
            'cron',
            day_of_week='mon',
            hour=9,
            minute=0
        )
        logging.info('‚úÖ Scheduler –∑–∞–ø—É—â–µ–Ω: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã')
    except Exception as e:
        logging.error(f'‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ scheduler: {e}')

# ============================================================================
# CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò
# ============================================================================

@dp.callback_query_handler(lambda c: c.data == "admin_refresh_stats", state='*')
async def admin_refresh_statistics(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await state.finish()

    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    stats_message = format_admin_statistics()

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh_stats"),
        InlineKeyboardButton("üìä –î–µ—Ç–∞–ª–∏", callback_data="admin_detailed_stats")
    )

    try:
        await callback.message.edit_text(stats_message, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")
    except MessageNotModified:
        await callback.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@dp.callback_query_handler(lambda c: c.data == "admin_refresh_analytics", state='*')
async def admin_refresh_analytics_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    await state.finish()

    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    analytics_message = format_admin_analytics()

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh_analytics"),
        InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export_analytics")
    )

    try:
        await callback.message.edit_text(analytics_message, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ")
    except MessageNotModified:
        await callback.answer("–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@dp.callback_query_handler(lambda c: c.data == "export_users", state='*')
async def export_users_callback(callback: CallbackQuery, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ CSV"""
    await state.finish()
    
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        output = StringIO()
        writer = csv.writer(output)
        writer.writerow(['ID', '–†–æ–ª—å', '–¢–µ–ª–µ—Ñ–æ–Ω', 'Email', '–†–µ–≥–∏–æ–Ω', '–ò–ù–ù', '–ö–æ–º–ø–∞–Ω–∏—è'])
        
        for user_id_data, user_data in users.items():
            writer.writerow([
                user_id_data,
                user_data.get('role', ''),
                user_data.get('phone', ''),
                user_data.get('email', ''),
                user_data.get('region', ''),
                user_data.get('inn', ''),
                user_data.get('company_name', '')
            ])
        
        output.seek(0)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        await bot.send_document(
            callback.from_user.id,
            ('users_' + timestamp + '.csv', output.getvalue().encode('utf-8-sig')),
            caption=f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n–í—Å–µ–≥–æ: {len(users)}"
        )
        
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        logging.info(f"–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(users)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@dp.callback_query_handler(lambda c: c.data == "export_pools", state='*')
async def export_pools_callback(callback: CallbackQuery, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø—É–ª–æ–≤ –≤ CSV"""
    await state.finish()
    
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        output = StringIO()
        writer = csv.writer(output)
        writer.writerow(['ID', '–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä', '–°—Ç–∞—Ç—É—Å', '–ö—É–ª—å—Ç—É—Ä–∞', '–û–±—ä—ë–º', '–¶–µ–Ω–∞', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'])
        
        for pool_id, pool_data in pools.items():
            exporter = users.get(pool_data.get('exporter_id'), {})
            writer.writerow([
                pool_id,
                exporter.get('company_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
                pool_data.get('status', ''),
                pool_data.get('culture', ''),
                pool_data.get('volume', 0),
                pool_data.get('price', 0),
                pool_data.get('created_at', '')
            ])
        
        output.seek(0)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        await bot.send_document(
            callback.from_user.id,
            ('pools_' + timestamp + '.csv', output.getvalue().encode('utf-8-sig')),
            caption=f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø—É–ª–æ–≤\n–í—Å–µ–≥–æ: {len(pulls)}"
        )
        
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        logging.info(f"–≠–∫—Å–ø–æ—Ä—Ç –ø—É–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω: {len(pulls)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—É–ª–æ–≤: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@dp.callback_query_handler(lambda c: c.data == "export_batches", state='*')
async def export_batches_callback(callback: CallbackQuery, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ä—Ç–∏–π –≤ CSV"""
    await state.finish()
    
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        output = StringIO()
        writer = csv.writer(output)
        writer.writerow(['–§–µ—Ä–º–µ—Ä ID', '–§–µ—Ä–º–µ—Ä', 'Batch ID', '–ö—É–ª—å—Ç—É—Ä–∞', '–û–±—ä—ë–º', '–¶–µ–Ω–∞', '–†–µ–≥–∏–æ–Ω'])
        
        for farmer_id, batches in batches.items():
            farmer = users.get(farmer_id, {})
            farmer_name = farmer.get('company_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            for batch in user_batches:
                writer.writerow([
                    farmer_id,
                    farmer_name,
                    batch.get('id', ''),
                    batch.get('culture', ''),
                    batch.get('volume', 0),
                    batch.get('price', 0),
                    batch.get('region', '')
                ])
        
        output.seek(0)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        total_batches = sum(len(batches) for user_batches in batches.values())
        
        await bot.send_document(
            callback.from_user.id,
            ('batches_' + timestamp + '.csv', output.getvalue().encode('utf-8-sig')),
            caption=f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ä—Ç–∏–π\n–í—Å–µ–≥–æ: {total_batches}"
        )
        
        await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        logging.info(f"–≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ä—Ç–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω: {total_batches} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞—Ä—Ç–∏–π: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@dp.callback_query_handler(lambda c: c.data == "export_full", state='*')
async def export_full_backup_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
    await state.finish()
    
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    try:
        save_data()
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_dir = f"backup_{timestamp}"
        
        os.makedirs(backup_dir, exist_ok=True)
        
        for filename in ['users.pkl', 'pools.pkl', 'batches.pkl', 'shipping_requests.pkl']:
            if os.path.exists(filename):
                shutil.copy(filename, os.path.join(backup_dir, filename))
        
        archive_name = f"backup_{timestamp}"
        shutil.make_archive(archive_name, 'zip', backup_dir)
        shutil.rmtree(backup_dir)
        
        with open(f"{archive_name}.zip", 'rb') as backup_file:
            await bot.send_document(
                callback.from_user.id,
                backup_file,
                caption=f"üíæ –ü–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è\n–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            )
        
        os.remove(f"{archive_name}.zip")
        
        await callback.answer("‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        logging.info(f"–°–æ–∑–¥–∞–Ω –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø: {archive_name}.zip")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


@dp.callback_query_handler(lambda c: c.data == "reload_data", state='*')
async def reload_data_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤"""
    await state.finish()

    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        load_data()
        await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã", show_alert=True)
        logging.info("–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")




# ============================================================================
# CALLBACK –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò
# ============================================================================

@dp.callback_query_handler(lambda c: c.data == "adminstat", state='*')
async def admin_statistics_callback(callback: types.CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ callback"""
    await state.finish()

    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        msg = format_admin_statistics()

        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="adminstat"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backtoadmin")
        )

        await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@dp.callback_query_handler(lambda c: c.data == "adminanalytics", state='*')
async def admin_analytics_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ callback"""
    await state.finish()

    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        msg = format_admin_analytics()

        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="adminanalytics"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backtoadmin")
        )

        await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@dp.callback_query_handler(lambda c: c.data == "adminexport", state='*')
async def admin_export_callback(callback: types.CallbackQuery, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ callback"""
    await state.finish()

    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="exportusers"),
        InlineKeyboardButton("üì¶ –ü—É–ª–ª—ã", callback_data="exportpulls"),
        InlineKeyboardButton("üåæ –ü–∞—Ä—Ç–∏–∏", callback_data="exportbatches"),
        InlineKeyboardButton("üìã –ó–∞—è–≤–∫–∏", callback_data="exportrequests"),
        InlineKeyboardButton("üíº –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø", callback_data="exportfull"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backtoadmin")
    )

    await callback.message.edit_text(
        "üì§ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == "adminusers", state='*')
async def admin_users_callback(callback: types.CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ callback"""
    await state.finish()

    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        msg = format_admin_users()

        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="adminusers"),
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backtoadmin")
        )

        await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer("‚úÖ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}", show_alert=True)


@dp.callback_query_handler(lambda c: c.data == "adminbroadcast", state='*')
async def admin_broadcast_callback(callback: types.CallbackQuery, state: FSMContext):
    """–†–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑ callback"""
    await state.finish()

    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backtoadmin")
    )

    await callback.message.edit_text(
        "üìß <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–î–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/broadcast <—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == "adminprices", state='*')
async def admin_prices_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω —á–µ—Ä–µ–∑ callback"""
    await state.finish()

    user_id = callback.from_user.id
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.answer("‚è≥ –û–±–Ω–æ–≤–ª—è—é —Ü–µ–Ω—ã...", show_alert=True)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
        await update_grain_prices()

        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backtoadmin")
        )

        await callback.message.edit_text(
            "‚úÖ <b>–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n"
            f"–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω: {e}")

        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(
            InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backtoadmin")
        )

        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω</b>\n\n{e}",
            reply_markup=keyboard,
            parse_mode='HTML'
        )


    await callback.message.edit_text(
        "üîê <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()





# === HANDLER: –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–π –∫ –ø—É–ª–ª—É ===

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('selectbatch_'), state='*')
async def process_batch_selection_for_pull(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø—É–ª–ª"""
    try:
        batch_id = callback_query.data.split('_')[1]
        user_id = callback_query.from_user.id

        logging.info(f"–í—ã–±–æ—Ä –ø–∞—Ä—Ç–∏–∏ {batch_id}")

        data = await state.get_data()
        pull_id = data.get('pull_id')

        if not pull_id:
            await callback_query.answer("‚ùå –ü—É–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        load_batches_from_pickle()
        pulls = load_pulls()

        batch = next((b for b in batches if b.get('id') == batch_id), None)
        if not batch:
            await callback_query.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        if str(batch.get('farmer_id')) != str(user_id):
            await callback_query.answer("‚ùå –ù–µ –≤–∞—à–∞ –ø–∞—Ä—Ç–∏—è", show_alert=True)
            return

        pull = next((p for p in pulls if p.get('id') == pull_id), None)
        if not pull:
            await callback_query.answer("‚ùå –ü—É–ª–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        if 'batches' not in pull:
            pull['batches'] = []

        if batch_id in pull['batches']:
            await callback_query.answer("‚ö†Ô∏è –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞", show_alert=True)
            return

        pull['batches'].append(batch_id)
        current_volume = pull.get('current_volume', 0)
        pull['current_volume'] = current_volume + batch.get('volume', 0)

        save_pulls(pulls)

        await callback_query.answer("‚úÖ –ü–∞—Ä—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!", show_alert=True)

        logging.info(f"‚úÖ –ü–∞—Ä—Ç–∏—è {batch_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—É–ª–ª {pull_id}")

        try:
            if hasattr(gs, 'sync_pull_to_sheets'):
                gs.sync_pull_to_sheets(pull_id, pull)
        except Exception as e:
            logging.debug(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {e}")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)




# === –ë–ï–ó–û–ü–ê–°–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

async def safe_notify_exporter(pull, batch):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞ –æ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏"""
    try:
        if not pull or not isinstance(pull, dict):
            logging.debug("–ü—É–ª–ª –Ω–µ —É–∫–∞–∑–∞–Ω")
            return

        exporter_id = pull.get('exporter_id')
        if not exporter_id:
            logging.debug("–£ –ø—É–ª–ª–∞ –Ω–µ—Ç exporter_id")
            return

        users = load_users()
        if exporter_id not in users:
            logging.debug(f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä {exporter_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        message = f"üîî –ù–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è!\n{batch.get('culture')} - {batch.get('volume')} —Ç"
        await bot.send_message(exporter_id, message)
        logging.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä {exporter_id} —É–≤–µ–¥–æ–º–ª—ë–Ω")

    except Exception as e:
        logging.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}")


async def safe_publish_to_channel(batch):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª"""
    try:
        channel_id = os.getenv('CHANNEL_ID')
        if not channel_id:
            logging.debug("CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return

        message = f"üåæ –ù–æ–≤–∞—è –ø–∞—Ä—Ç–∏—è!\n{batch.get('culture')} - {batch.get('volume')} —Ç"
        await bot.send_message(channel_id, message)
        logging.info("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ")

    except Exception as e:
        if 'Chat not found' in str(e):
            logging.debug("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–æ—Ä–º–∞)")
        else:
            logging.debug(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è: {e}")


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–°–ù–û–í–ù–´–• –ö–ù–û–ü–û–ö –ú–ï–ù–Æ (–î–û–ë–ê–í–õ–ï–ù–´)
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
@dp.message_handler(lambda m: m.text == "üìã –ú–æ–∏ –ø—É–ª–ª—ã", state="*")
async def show_my_pulls_farmer(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—É–ª–ª—ã –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É–µ—Ç —Ñ–µ—Ä–º–µ—Ä"""
    user_id = message.from_user.id

    if user_id not in users:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –ù–∞—Ö–æ–¥–∏–º –ø—É–ª–ª—ã –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É–µ—Ç —Ñ–µ—Ä–º–µ—Ä
    my_pulls = []

    for exporter_id, pulls in exporter_pulls.items():
        for pull in pulls:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–µ—Ä–º–µ—Ä –≤ —ç—Ç–æ–º –ø—É–ª–ª–µ
            for batch_id in pull.get('batches', []):
                if user_id in batches:
                    for batch in batches[user_id]:
                        if batch.get('id') == batch_id:
                            my_pulls.append({
                                'pull': pull,
                                'exporter_id': exporter_id,
                                'batch': batch
                            })

    if not my_pulls:
        await message.answer(
            "üìã –í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –ø—É–ª–ª–µ\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üîç –ù–∞–π—Ç–∏ –ø—É–ª–ª' —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—É–ª–ª—ã",
            parse_mode="Markdown"
        )
        return

    msg = "üìã *–ü—É–ª–ª—ã –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ:*\n\n"

    for i, item in enumerate(my_pulls, 1):
        pull = item['pull']
        batch = item['batch']

        status_emoji = {"open": "üü¢", "filling": "üü°", "closed": "üî¥"}.get(pull.get('status', 'open'), "‚ùì")
        msg += f"{i}. {status_emoji} {pull['culture']}\n"
        msg += f"   –í–∞—à–∞ –ø–∞—Ä—Ç–∏—è: {batch['volume']} —Ç\n"
        msg += f"   –ü–æ—Ä—Ç: {pull.get('port', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        msg += f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {pull.get('current_volume', 0)}/{pull['target_volume']} —Ç\n\n"

    await message.answer(msg, parse_mode="Markdown")


@dp.message_handler(lambda m: m.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–∏—é", state="*")
async def create_batch_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏"""
    user_id = message.from_user.id

    if user_id not in users or users[user_id].get('role') != 'farmer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä–∞–º")
        return

    await message.answer(
        "üåæ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏*\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:",
        reply_markup=culture_keyboard(),
        parse_mode="Markdown"
    )
    await CreateBatchStates.culture.set()

# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: /debug –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

@dp.message_handler(commands=['debug'], state='*')
async def debug_account(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ—ë–º –∞–∫–∫–∞—É–Ω—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    user_id = message.from_user.id

    info = []
    info.append("üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ*\n")
    info.append(f"User ID: `{user_id}`\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º users
    if user_id in users:
        user_data = users[user_id]
        info.append("‚úÖ –ù–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏ (users)")
        info.append(f"   –†–æ–ª—å: {user_data.get('role', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
        info.append(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        info.append(f"   –†–µ–≥–∏–æ–Ω: {user_data.get('region', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n")
    else:
        info.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–º—è—Ç–∏ (users)\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º batches
    if user_id in batches:
        batch_count = len(batches[user_id])
        info.append(f"üì¶ –ü–∞—Ä—Ç–∏–π —Ñ–µ—Ä–º–µ—Ä–∞: {batch_count}\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º exporter_pulls
    if user_id in exporter_pulls:
        pull_count = len(exporter_pulls[user_id])
        info.append(f"üéØ –ü—É–ª–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞: {pull_count}\n")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Google Sheets
    try:
        worksheet = spreadsheet.worksheet('Users')
        cell = worksheet.find(str(user_id))
        if cell:
            info.append(f"‚úÖ –ù–∞–π–¥–µ–Ω –≤ Google Sheets (—Å—Ç—Ä–æ–∫–∞ {cell.row})")
        else:
            info.append("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ Google Sheets")
    except Exception as e:
        info.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Google Sheets: {e}")

    await message.answer("".join(info), parse_mode="Markdown")

# ============================================================================
# –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–°–¢–ò–ß–ï–°–ö–ò–• –ó–ê–Ø–í–û–ö
# ============================================================================

# -------------------- –≠–ö–°–ü–û–†–¢–Å–†: –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò --------------------

@dp.message_handler(lambda m: m.text == "üöö –ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É", state='*')
async def create_logistics_request_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É"""
    await state.finish()
    user_id = message.from_user.id
    
    if user_id not in users or users[user_id].get('role') != 'exporter':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—É–ª—ã —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞
    exporter_pulls = {pid: p for pid, p in pulls.items() 
                      if p.get('exporter_id') == user_id and p.get('status') in ['–û—Ç–∫—Ä—ã—Ç', '–ó–∞–ø–æ–ª–Ω–µ–Ω']}
    
    if not exporter_pulls:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—É–ª–æ–≤.\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø—É–ª, —á—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∏–∫—É.",
            reply_markup=exporter_keyboard()
        )
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for pull_id, pull in list(exporter_pulls.items())[:10]:
        keyboard.add(
            InlineKeyboardButton(
                f"#{pull_id} ‚Ä¢ {pull['culture']} ‚Ä¢ {pull.get('current_volume', 0):.0f} —Ç",
                callback_data=f"create_logistic_req:{pull_id}"
            )
        )
    
    await message.answer(
        "üöö <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@dp.callback_query_handler(lambda c: c.data.startswith("create_logistic_req:"), state='*')
async def select_pull_for_logistics(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—É–ª–∞ –¥–ª—è –∑–∞—è–≤–∫–∏"""
    try:
        pull_id = parse_callback_id(callback.data)
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    
    await state.update_data(
        pull_id=pull_id,
        culture=pull['culture'],
        volume=pull.get('current_volume', 0),
        port=pull.get('port', '')
    )
    
    await callback.message.edit_text(
        f"üöö <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É</b>\n\n"
        f"<b>–®–∞–≥ 1 –∏–∑ 3</b>\n\n"
        f"–ü—É–ª: #{pull_id} ‚Ä¢ {pull['culture']} ‚Ä¢ {pull.get('current_volume', 0):.0f} —Ç\n"
        f"–ü–æ—Ä—Ç: {pull.get('port', '')}\n\n"
        f"–û—Ç–∫—É–¥–∞ (—Ä–µ–≥–∏–æ–Ω/–≥–æ—Ä–æ–¥ –ø–æ–≥—Ä—É–∑–∫–∏):",
        parse_mode='HTML'
    )
    
    await CreateLogisticRequestStatesGroup.route_from.set()
    await callback.answer()


@dp.message_handler(state=CreateLogisticRequestStatesGroup.route_from)
async def logistics_request_from(message: types.Message, state: FSMContext):
    """–ú–µ—Å—Ç–æ –ø–æ–≥—Ä—É–∑–∫–∏"""
    route_from = message.text.strip()
    await state.update_data(route_from=route_from)
    
    data = await state.get_data()
    
    await message.answer(
        f"üöö <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É</b>\n\n"
        f"<b>–®–∞–≥ 2 –∏–∑ 3</b>\n\n"
        f"–û—Ç–∫—É–¥–∞: <b>{route_from}</b>\n"
        f"–ö—É–¥–∞: <b>{data.get('port', '')}</b>\n\n"
        f"–ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):",
        parse_mode='HTML'
    )
    
    await CreateLogisticRequestStatesGroup.loading_date.set()


@dp.message_handler(state=CreateLogisticRequestStatesGroup.loading_date)
async def logistics_request_date(message: types.Message, state: FSMContext):
    """–î–∞—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏"""
    loading_date = message.text.strip()
    
    if not validate_date(loading_date):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.12.2025)")
        return
    
    await state.update_data(loading_date=loading_date)
    
    await message.answer(
        "üöö <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É</b>\n\n"
        "<b>–®–∞–≥ 3 –∏–∑ 3</b>\n\n"
        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–∏–ª–∏ /skip):",
        parse_mode='HTML'
    )
    
    await CreateLogisticRequestStatesGroup.notes.set()


@dp.message_handler(lambda m: m.text == '/skip', state=CreateLogisticRequestStatesGroup.notes)
@dp.message_handler(state=CreateLogisticRequestStatesGroup.notes)
async def logistics_request_finish(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    global logistics_request_counter
    
    notes = "" if message.text == '/skip' else message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id
    
    pull_id = data['pull_id']
    pull = pulls[pull_id]
    
    logistics_request_counter += 1
    
    request = {
        'id': logistics_request_counter,
        'exporter_id': user_id,
        'exporter_name': users[user_id].get('name', ''),
        'pull_id': pull_id,
        'culture': data['culture'],
        'volume': data['volume'],
        'route_from': data['route_from'],
        'route_to': data.get('port', ''),
        'loading_date': data['loading_date'],
        'notes': notes,
        'status': 'active',
        'offers_count': 0,
        'selected_offer_id': None,
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    logistics_requests[logistics_request_counter] = request
    save_logistics_requests_to_pickle()
    
    await state.finish()
    
    summary = (
        f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É #{logistics_request_counter} —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        f"üì¶ –ü—É–ª: #{pull_id}\n"
        f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {data['culture']}\n"
        f"üì¶ –û–±—ä–µ–º: {data['volume']:.0f} —Ç\n"
        f"üìç –ú–∞—Ä—à—Ä—É—Ç: {data['route_from']} ‚Üí {request['route_to']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['loading_date']}\n"
    )
    
    if notes:
        summary += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {notes}\n"
    
    summary += "\n–õ–æ–≥–∏—Å—Ç—ã —Å–º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É."
    
    await message.answer(summary, parse_mode='HTML', reply_markup=exporter_keyboard())
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–æ–≥–∏—Å—Ç–æ–≤
    await notify_logistics_about_new_request(request)
    
    logging.info(f"Logistics request {logistics_request_counter} created by exporter {user_id}")


# -------------------- –õ–û–ì–ò–°–¢: –ü–†–û–°–ú–û–¢–† –ò –û–¢–ö–õ–ò–ö --------------------

@dp.message_handler(lambda m: m.text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", state='*')
async def view_active_logistics_requests(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É"""
    await state.finish()
    user_id = message.from_user.id
    
    if user_id not in users or users[user_id].get('role') != 'logistic':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Å—Ç–∞–º")
        return
    
    active_requests = {rid: r for rid, r in logistics_requests.items() 
                       if r.get('status') in ['active', 'has_offers']}
    
    if not active_requests:
        await message.answer(
            "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É.",
            parse_mode='HTML'
        )
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for req_id, req in list(active_requests.items())[:10]:
        status_emoji = "üÜï" if req['status'] == 'active' else "üíº"
        offers_text = f" ‚Ä¢ {req['offers_count']} –æ—Ç–∫–ª–∏–∫–æ–≤" if req['offers_count'] > 0 else ""
        
        keyboard.add(
            InlineKeyboardButton(
                f"{status_emoji} #{req_id} ‚Ä¢ {req['culture']} ‚Ä¢ {req['volume']:.0f} —Ç{offers_text}",
                callback_data=f"view_logistics_req:{req_id}"
            )
        )
    
    await message.answer(
        f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ ({len(active_requests)})</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )


@dp.callback_query_handler(lambda c: c.data.startswith("view_logistics_req:"), state='*')
async def view_logistics_request_details(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏"""
    await state.finish()
    
    try:
        req_id = parse_callback_id(callback.data)
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if req_id not in logistics_requests:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    req = logistics_requests[req_id]
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª–∏–∫–∞–ª—Å—è –ª–∏ —É–∂–µ
    already_offered = any(
        o.get('logist_id') == user_id 
        for o in logistics_offers.values() 
        if o.get('request_id') == req_id
    )
    
    msg = f"üìã <b>–ó–∞—è–≤–∫–∞ #{req_id}</b>\n\n"
    msg += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {req['culture']}\n"
    msg += f"üì¶ –û–±—ä–µ–º: {req['volume']:.0f} —Ç\n"
    msg += f"üìç –ú–∞—Ä—à—Ä—É—Ç: {req['route_from']} ‚Üí {req['route_to']}\n"
    msg += f"üìÖ –î–∞—Ç–∞: {req['loading_date']}\n"
    
    if req.get('notes'):
        msg += f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {req['notes']}\n"
    
    msg += f"\nüíº –û—Ç–∫–ª–∏–∫–æ–≤: {req['offers_count']}\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    if not already_offered and req['status'] in ['active', 'has_offers']:
        keyboard.add(
            InlineKeyboardButton("‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è", callback_data=f"respond_logistics:{req_id}")
        )
    elif already_offered:
        keyboard.add(
            InlineKeyboardButton("üìù –í–∞—à –æ—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", callback_data="noop")
        )
    
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_logistics_requests")
    )
    
    await callback.message.edit_text(msg, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith("respond_logistics:"), state='*')
async def respond_to_logistics_request(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –∑–∞—è–≤–∫—É"""
    try:
        req_id = parse_callback_id(callback.data)
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if req_id not in logistics_requests:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    await state.update_data(request_id=req_id)
    
    await callback.message.edit_text(
        f"üíº <b>–û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞—è–≤–∫—É #{req_id}</b>\n\n"
        f"<b>–®–∞–≥ 1 –∏–∑ 4</b>\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É (‚ÇΩ –∑–∞ —Ç–æ–Ω–Ω—É):",
        parse_mode='HTML'
    )
    
    await LogisticOfferStatesGroup.price.set()
    await callback.answer()


@dp.message_handler(state=LogisticOfferStatesGroup.price)
async def logistics_offer_price(message: types.Message, state: FSMContext):
    """–¶–µ–Ω–∞ –∑–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É"""
    try:
        price = float(message.text.strip().replace(",", ".").replace(" ", ""))
        if price <= 0:
            raise ValueError
        
        await state.update_data(price=price)
        
        await message.answer(
            f"üíº <b>–û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞—è–≤–∫—É</b>\n\n"
            f"<b>–®–∞–≥ 2 –∏–∑ 4</b>\n\n"
            f"–¶–µ–Ω–∞: <b>{price:,.0f} ‚ÇΩ/—Ç</b>\n\n"
            f"–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§—É—Ä–∞ 20—Ç, –ó–µ—Ä–Ω–æ–≤–æ–∑):",
            parse_mode='HTML'
        )
        
        await LogisticOfferStatesGroup.vehicle_type.set()
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")


@dp.message_handler(state=LogisticOfferStatesGroup.vehicle_type)
async def logistics_offer_vehicle(message: types.Message, state: FSMContext):
    """–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    vehicle_type = message.text.strip()
    await state.update_data(vehicle_type=vehicle_type)
    
    await message.answer(
        f"üíº <b>–û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞—è–≤–∫—É</b>\n\n"
        f"<b>–®–∞–≥ 3 –∏–∑ 4</b>\n\n"
        f"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>{vehicle_type}</b>\n\n"
        f"–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–Ω–µ–π):",
        parse_mode='HTML'
    )
    
    await LogisticOfferStatesGroup.delivery_date.set()


@dp.message_handler(state=LogisticOfferStatesGroup.delivery_date)
async def logistics_offer_days(message: types.Message, state: FSMContext):
    """–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    try:
        delivery_days = int(message.text.strip())
        if delivery_days <= 0:
            raise ValueError
        
        await state.update_data(delivery_days=delivery_days)
        
        await message.answer(
            f"üíº <b>–û—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞—è–≤–∫—É</b>\n\n"
            f"<b>–®–∞–≥ 4 –∏–∑ 4</b>\n\n"
            f"–°—Ä–æ–∫: <b>{delivery_days} –¥–Ω–µ–π</b>\n\n"
            f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∏–ª–∏ /skip):",
            parse_mode='HTML'
        )
        
        await LogisticOfferStatesGroup.additional_info.set()
    
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ä–æ–∫. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")


@dp.message_handler(lambda m: m.text == '/skip', state=LogisticOfferStatesGroup.additional_info)
@dp.message_handler(state=LogisticOfferStatesGroup.additional_info)
async def logistics_offer_finish(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∞"""
    global logistics_offer_counter
    
    notes = "" if message.text == '/skip' else message.text.strip()
    data = await state.get_data()
    user_id = message.from_user.id
    
    req_id = data['request_id']
    req = logistics_requests[req_id]
    
    logistics_offer_counter += 1
    
    offer = {
        'id': logistics_offer_counter,
        'request_id': req_id,
        'logist_id': user_id,
        'logist_name': users[user_id].get('name', ''),
        'logist_phone': users[user_id].get('phone', ''),
        'price': data['price'],
        'vehicle_type': data['vehicle_type'],
        'delivery_days': data['delivery_days'],
        'notes': notes,
        'status': 'pending',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    logistics_offers[logistics_offer_counter] = offer
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤
    req['offers_count'] = req.get('offers_count', 0) + 1
    if req['status'] == 'active':
        req['status'] = 'has_offers'
    
    save_logistics_requests_to_pickle()
    save_logistics_offers_to_pickle()
    
    await state.finish()
    
    total_price = data['price'] * req['volume']
    
    summary = (
        f"‚úÖ <b>–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üìã –ó–∞—è–≤–∫–∞: #{req_id}\n"
        f"üåæ {req['culture']} ‚Ä¢ {req['volume']:.0f} —Ç\n"
        f"üìç {req['route_from']} ‚Üí {req['route_to']}\n\n"
        f"üí∞ –í–∞—à–∞ —Ü–µ–Ω–∞: {data['price']:,.0f} ‚ÇΩ/—Ç\n"
        f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_price:,.0f} ‚ÇΩ\n"
        f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {data['vehicle_type']}\n"
        f"‚è± –°—Ä–æ–∫: {data['delivery_days']} –¥–Ω–µ–π\n\n"
        f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –æ—Ç–∫–ª–∏–∫–µ."
    )
    
    await message.answer(summary, parse_mode='HTML', reply_markup=logistic_keyboard())
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞
    await notify_exporter_about_offer(req, offer)
    
    logging.info(f"Logistics offer {logistics_offer_counter} created by logist {user_id}")


# -------------------- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò --------------------

async def notify_logistics_about_new_request(request):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    logistics_users = [uid for uid, u in users.items() if u.get('role') == 'logistic']
    
    msg = (
        f"üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É!</b>\n\n"
        f"üìã –ó–∞—è–≤–∫–∞ #{request['id']}\n"
        f"üåæ {request['culture']} ‚Ä¢ {request['volume']:.0f} —Ç\n"
        f"üìç {request['route_from']} ‚Üí {request['route_to']}\n"
        f"üìÖ –î–∞—Ç–∞: {request['loading_date']}\n\n"
        f"–û—Ç–∫–ª–∏–∫–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏'"
    )
    
    for logist_id in logistics_users:
        try:
            await bot.send_message(logist_id, msg, parse_mode='HTML')
        except Exception as e:
            logging.error(f"Error notifying logist {logist_id}: {e}")


async def notify_exporter_about_offer(request, offer):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞ –æ–± –æ—Ç–∫–ª–∏–∫–µ"""
    exporter_id = request['exporter_id']
    
    total_price = offer['price'] * request['volume']
    
    msg = (
        f"üíº <b>–ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –∑–∞—è–≤–∫—É #{request['id']}</b>\n\n"
        f"üë§ –õ–æ–≥–∏—Å—Ç: {offer['logist_name']}\n"
        f"üí∞ –¶–µ–Ω–∞: {offer['price']:,.0f} ‚ÇΩ/—Ç\n"
        f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {total_price:,.0f} ‚ÇΩ\n"
        f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {offer['vehicle_type']}\n"
        f"‚è± –°—Ä–æ–∫: {offer['delivery_days']} –¥–Ω–µ–π"
    )
    
    try:
        await bot.send_message(exporter_id, msg, parse_mode='HTML')
    except Exception as e:
        logging.error(f"Error notifying exporter {exporter_id}: {e}")


@dp.callback_query_handler(lambda c: c.data == "back_to_logistics_requests", state='*')
async def back_to_logistics_requests_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫"""
    await view_active_logistics_requests(callback.message, state)
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == "noop", state='*')
async def noop_handler(callback: types.CallbackQuery):
    """–ü—É—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    await callback.answer()

#===============================================================================


# ====================================================================
# –ü–û–ò–°–ö –ü–û –ö–£–õ–¨–¢–£–†–ï
# ====================================================================

@dp.message_handler(Text(equals="üîç –ü–æ–∏—Å–∫ –ø–æ –∫—É–ª—å—Ç—É—Ä–µ"), state='*')
async def start_search_by_culture(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–∏–π –ø–æ –∫—É–ª—å—Ç—É—Ä–µ"""
    await state.finish()

    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –∫—É–ª—å—Ç—É—Ä–µ</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–∏–π:",
        reply_markup=culture_keyboard(),
        parse_mode='HTML'
    )
    await SearchByCulture.waiting_culture.set()


if 'logistics_cards' not in globals():
    logistics_cards = {}
if 'expeditor_cards' not in globals():
    expeditor_cards = {}


@dp.message_handler(Text(equals="üìã –ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞"), state='*')
async def show_my_card_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–≥–∏—Å—Ç–∞/—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.finish()

    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    user = users[user_id]
    role = user.get('role')

    if role == 'logistic':
        if user_id in logistics_cards:
            card = logistics_cards[user_id]
            text = f"""
üìã <b>–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –ª–æ–≥–∏—Å—Ç–∞</b>

üöö <b>–ú–∞—Ä—à—Ä—É—Ç—ã:</b> {card.get('routes', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üí∞ <b>–¶–µ–Ω–∞ –∑–∞ –∫–º:</b> {card.get('price_per_km', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ‚ÇΩ/–∫–º
üí∞ <b>–¶–µ–Ω–∞ –∑–∞ —Ç–æ–Ω–Ω—É:</b> {card.get('price_per_ton', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ‚ÇΩ/—Ç
üì¶ <b>–ú–∏–Ω. –æ–±—ä—ë–º:</b> {card.get('min_volume', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} —Ç
üöõ <b>–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:</b> {card.get('transport_type', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üè¢ <b>–ü–æ—Ä—Ç—ã:</b> {card.get('ports', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
"""
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_logistic_card"),
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete_logistic_card")
            )
        else:
            text = "üìã –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã!"
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="create_logistic_card"))

    elif role == 'expeditor':
        if user_id in expeditor_cards:
            card = expeditor_cards[user_id]
            text = f"""
üìã <b>–í–∞—à–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞</b>

üìú <b>–£—Å–ª—É–≥–∏:</b> {card.get('services', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å –î–¢:</b> {card.get('dt_price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} ‚ÇΩ
üè¢ <b>–ü–æ—Ä—Ç—ã:</b> {card.get('ports', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
‚≠ê <b>–û–ø—ã—Ç:</b> {card.get('experience', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
"""
            keyboard = InlineKeyboardMarkup(row_width=1)
            keyboard.add(
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_expeditor_card"),
                InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data="delete_expeditor_card")
            )
        else:
            text = "üìã –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã!"
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="create_expeditor_card"))
    else:
        await message.answer("‚ùå –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Å—Ç–∞–º –∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞–º")
        return

    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')


# ====================================================================
# –°–û–ó–î–ê–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ò –õ–û–ì–ò–°–¢–ê
# ====================================================================

@dp.callback_query_handler(lambda c: c.data == 'create_logistic_card', state='*')
async def start_create_logistic_card(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text(
        "üöö <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–≥–∏—Å—Ç–∞</b>\n\n"
        "–®–∞–≥ 1/7\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –º–∞—Ä—à—Ä—É—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä-–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫, –†–æ—Å—Ç–æ–≤-–ê–∑–æ–≤):",
        parse_mode='HTML'
    )
    await CreateLogisticCardStates.routes.set()
    await callback.answer()


@dp.message_handler(state=CreateLogisticCardStates.routes)
async def process_logistic_routes(message: types.Message, state: FSMContext):
    await state.update_data(routes=message.text)
    await message.answer("üí∞ –®–∞–≥ 2/7\n\n–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∫–∏–ª–æ–º–µ—Ç—Ä (—Ä—É–±.):", parse_mode='HTML')
    await CreateLogisticCardStates.price_per_km.set()


@dp.message_handler(state=CreateLogisticCardStates.price_per_km)
async def process_price_per_km(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.replace(',', '.'))
        await state.update_data(price_per_km=price)
        await message.answer("üí∞ –®–∞–≥ 3/7\n\n–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —Ç–æ–Ω–Ω—É (—Ä—É–±.):", parse_mode='HTML')
        await CreateLogisticCardStates.price_per_ton.set()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")


@dp.message_handler(state=CreateLogisticCardStates.price_per_ton)
async def process_price_per_ton(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.replace(',', '.'))
        await state.update_data(price_per_ton=price)
        await message.answer("üì¶ –®–∞–≥ 4/7\n\n–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –ø–µ—Ä–µ–≤–æ–∑–∫–∏ (—Ç–æ–Ω–Ω):", parse_mode='HTML')
        await CreateLogisticCardStates.min_volume.set()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")


@dp.message_handler(state=CreateLogisticCardStates.min_volume)
async def process_min_volume(message: types.Message, state: FSMContext):
    try:
        volume = float(message.text.replace(',', '.'))
        await state.update_data(min_volume=volume)
        await message.answer("üöõ –®–∞–≥ 5/7\n\n–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§—É—Ä–∞ 20—Ç):", parse_mode='HTML')
        await CreateLogisticCardStates.transport_type.set()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")


@dp.message_handler(state=CreateLogisticCardStates.transport_type)
async def process_transport_type(message: types.Message, state: FSMContext):
    await state.update_data(transport_type=message.text)

    keyboard = InlineKeyboardMarkup(row_width=2)
    ports = [
        "–ê—Ä–∏–±",
        "–ê—Ä–∏–±-–°–Ω–∞–±",
        "–ö–ó–ö",
        "–ü–ö–§ –Æ–¢",
        "–ü–ö–§ –í–ü",
        "–ê—Å—Ç—Ä –ü–æ—Ä—Ç",
        "–ê—Å—Ç—Ä –£–Ω–∏–≤",
        "–ê—Å—Ç—Ä –Æ–∂–Ω",
        "–ó–Æ–ô–î-–í–ï–°–¢",
        "–ê–≥—Ä–æ–§—É–¥",
        "–ü–æ—Ä—Ç 83",
        "–ü–ö–§ –¶–ì–ü",
        "–ê—Å—Ç—Ä –∑–µ—Ä–Ω",
        "–ê—Å—Ç—Ä –º–æ—Ä—Å–∫"
    ]

    for port in ports:
        keyboard.insert(InlineKeyboardButton(port, callback_data=f"selectport_{port}"))
    keyboard.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="ports_selected"))

    await message.answer(
        "üè¢ –®–∞–≥ 6/7\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await CreateLogisticCardStates.ports.set()


@dp.callback_query_handler(lambda c: c.data.startswith('selectport_'), state=CreateLogisticCardStates.ports)
async def toggle_port_selection(callback: types.CallbackQuery, state: FSMContext):
    port = callback.data.replace('selectport_', '')

    data = await state.get_data()
    selected_ports = data.get('selected_ports', [])

    if port in selected_ports:
        selected_ports.remove(port)
    else:
        selected_ports.append(port)

    await state.update_data(selected_ports=selected_ports)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=2)
    ports = [
        "–ê—Ä–∏–±",
        "–ê—Ä–∏–±-–°–Ω–∞–±",
        "–ö–ó–ö",
        "–ü–ö–§ –Æ–¢",
        "–ü–ö–§ –í–ü",
        "–ê—Å—Ç—Ä –ü–æ—Ä—Ç",
        "–ê—Å—Ç—Ä –£–Ω–∏–≤",
        "–ê—Å—Ç—Ä –Æ–∂–Ω",
        "–ó–Æ–ô–î-–í–ï–°–¢",
        "–ê–≥—Ä–æ–§—É–¥",
        "–ü–æ—Ä—Ç 83",
        "–ü–ö–§ –¶–ì–ü",
        "–ê—Å—Ç—Ä –∑–µ—Ä–Ω",
        "–ê—Å—Ç—Ä –º–æ—Ä—Å–∫"
    ]
    for p in ports:
        mark = "‚úÖ " if p in selected_ports else ""
        keyboard.insert(InlineKeyboardButton(f"{mark}{p}", callback_data=f"selectport_{p}"))
    keyboard.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="ports_selected"))

    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == 'ports_selected', state=CreateLogisticCardStates.ports)
async def ports_selected(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_ports = data.get('selected_ports', [])

    if not selected_ports:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Ä—Ç", show_alert=True)
        return

    await state.update_data(ports=', '.join(selected_ports))
    await callback.message.edit_text(
        "üìù –®–∞–≥ 7/7\n\n–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'):",
        parse_mode='HTML'
    )
    await CreateLogisticCardStates.additional_info.set()
    await callback.answer()


@dp.message_handler(state=CreateLogisticCardStates.additional_info)
async def save_logistic_card(message: types.Message, state: FSMContext):
    additional = message.text if message.text.lower() != '–Ω–µ—Ç' else ''
    await state.update_data(additional_info=additional)

    data = await state.get_data()
    user_id = message.from_user.id

    logistics_cards[user_id] = {
        'routes': data.get('routes'),
        'price_per_km': data.get('price_per_km'),
        'price_per_ton': data.get('price_per_ton'),
        'min_volume': data.get('min_volume'),
        'transport_type': data.get('transport_type'),
        'ports': data.get('ports'),
        'additional_info': additional,
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }

    save_logistics_cards_to_pickle()

    await state.finish()
    await message.answer(
        "‚úÖ <b>–ö–∞—Ä—Ç–æ—á–∫–∞ –ª–æ–≥–∏—Å—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—ã –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –≤–∞—à—É –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–æ–≤.",
        parse_mode='HTML'
    )

    logging.info(f"‚úÖ Logistic card created for user {user_id}")


# ====================================================================
# –°–û–ó–î–ê–ù–ò–ï –ö–ê–†–¢–û–ß–ö–ò –≠–ö–°–ü–ï–î–ò–¢–û–†–ê (–ê–ù–ê–õ–û–ì–ò–ß–ù–û)
# ====================================================================

@dp.callback_query_handler(lambda c: c.data == 'create_expeditor_card', state='*')
async def start_create_expeditor_card(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback.message.edit_text(
        "üìú <b>–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞</b>\n\n–®–∞–≥ 1/5\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ —É—Å–ª—É–≥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –î–¢, —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ):",
        parse_mode='HTML'
    )
    await CreateExpeditorCardStates.services.set()
    await callback.answer()


@dp.message_handler(state=CreateExpeditorCardStates.services)
async def process_expeditor_services(message: types.Message, state: FSMContext):
    await state.update_data(services=message.text)
    await message.answer("üí∞ –®–∞–≥ 2/5\n\n–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –î–¢ (—Ä—É–±.):", parse_mode='HTML')
    await CreateExpeditorCardStates.dt_price.set()


@dp.message_handler(state=CreateExpeditorCardStates.dt_price)
async def process_dt_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.replace(',', '.').replace(' ', ''))
        await state.update_data(dt_price=price)

        keyboard = InlineKeyboardMarkup(row_width=2)
        ports = [
            "–ê—Ä–∏–±",
            "–ê—Ä–∏–±-–°–Ω–∞–±",
            "–ö–ó–ö",
            "–ü–ö–§ –Æ–¢",
            "–ü–ö–§ –í–ü",
            "–ê—Å—Ç—Ä –ü–æ—Ä—Ç",
            "–ê—Å—Ç—Ä –£–Ω–∏–≤",
            "–ê—Å—Ç—Ä –Æ–∂–Ω",
            "–ó–Æ–ô–î-–í–ï–°–¢",
            "–ê–≥—Ä–æ–§—É–¥",
            "–ü–æ—Ä—Ç 83",
            "–ü–ö–§ –¶–ì–ü",
            "–ê—Å—Ç—Ä –∑–µ—Ä–Ω",
            "–ê—Å—Ç—Ä –º–æ—Ä—Å–∫"
        ]

        for port in ports:
            keyboard.insert(InlineKeyboardButton(port, callback_data=f"selectexpport_{port}"))
        keyboard.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="expeditor_ports_selected"))

        await message.answer(
            "üè¢ –®–∞–≥ 3/5\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await CreateExpeditorCardStates.ports.set()
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")


@dp.callback_query_handler(lambda c: c.data.startswith('selectexpport_'), state=CreateExpeditorCardStates.ports)
async def toggle_expeditor_port(callback: types.CallbackQuery, state: FSMContext):
    port = callback.data.replace('selectexpport_', '')

    data = await state.get_data()
    selected_ports = data.get('selected_ports', [])

    if port in selected_ports:
        selected_ports.remove(port)
    else:
        selected_ports.append(port)

    await state.update_data(selected_ports=selected_ports)

    keyboard = InlineKeyboardMarkup(row_width=2)
    ports = [
        "–ê—Ä–∏–±",
        "–ê—Ä–∏–±-–°–Ω–∞–±",
        "–ö–ó–ö",
        "–ü–ö–§ –Æ–¢",
        "–ü–ö–§ –í–ü",
        "–ê—Å—Ç—Ä –ü–æ—Ä—Ç",
        "–ê—Å—Ç—Ä –£–Ω–∏–≤",
        "–ê—Å—Ç—Ä –Æ–∂–Ω",
        "–ó–Æ–ô–î-–í–ï–°–¢",
        "–ê–≥—Ä–æ–§—É–¥",
        "–ü–æ—Ä—Ç 83",
        "–ü–ö–§ –¶–ì–ü",
        "–ê—Å—Ç—Ä –∑–µ—Ä–Ω",
        "–ê—Å—Ç—Ä –º–æ—Ä—Å–∫"
    ]
    for p in ports:
        mark = "‚úÖ " if p in selected_ports else ""
        keyboard.insert(InlineKeyboardButton(f"{mark}{p}", callback_data=f"selectexpport_{p}"))
    keyboard.add(InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="expeditor_ports_selected"))

    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == 'expeditor_ports_selected', state=CreateExpeditorCardStates.ports)
async def expeditor_ports_selected(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_ports = data.get('selected_ports', [])

    if not selected_ports:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Ä—Ç", show_alert=True)
        return

    await state.update_data(ports=', '.join(selected_ports))
    await callback.message.edit_text("‚≠ê –®–∞–≥ 4/5\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–ª–µ—Ç):", parse_mode='HTML')
    await CreateExpeditorCardStates.experience.set()
    await callback.answer()


@dp.message_handler(state=CreateExpeditorCardStates.experience)
async def process_expeditor_experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    await message.answer("üìù –®–∞–≥ 5/5\n\n–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–∏–ª–∏ '–Ω–µ—Ç'):", parse_mode='HTML')
    await CreateExpeditorCardStates.additional_info.set()


@dp.message_handler(state=CreateExpeditorCardStates.additional_info)
async def save_expeditor_card(message: types.Message, state: FSMContext):
    additional = message.text if message.text.lower() != '–Ω–µ—Ç' else ''
    await state.update_data(additional_info=additional)

    data = await state.get_data()
    user_id = message.from_user.id

    expeditor_cards[user_id] = {
        'services': data.get('services'),
        'dt_price': data.get('dt_price'),
        'ports': data.get('ports'),
        'experience': data.get('experience'),
        'additional_info': additional,
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }

    save_expeditor_cards_to_pickle()

    await state.finish()
    await message.answer(
        "‚úÖ <b>–ö–∞—Ä—Ç–æ—á–∫–∞ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
        "–¢–µ–ø–µ—Ä—å —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—ã –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –≤–∞—à—É –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—É–ª–æ–≤.",
        parse_mode='HTML'
    )

    logging.info(f"‚úÖ Expeditor card created for user {user_id}")


# ====================================================================
# –í–´–ë–û–† –õ–û–ì–ò–°–¢–ê –≠–ö–°–ü–û–†–¢–Å–†–û–ú
# ====================================================================

@dp.callback_query_handler(lambda c: c.data.startswith('select_logistic_'))
async def select_logistic_handler(callback: types.CallbackQuery):
    try:
        parts = callback.data.split('_')
        logistic_id = int(parts[2])
        deal_id = int(parts[3])

        if deal_id not in deals:
            await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        deals[deal_id]['logistic_id'] = logistic_id
        deals[deal_id]['logistic_selected_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        save_deals_to_pickle()

        logistic = users.get(logistic_id, {})
        await callback.message.edit_text(
            f"‚úÖ <b>–õ–æ–≥–∏—Å—Ç –≤—ã–±—Ä–∞–Ω!</b>\n\n"
            f"üöö –ö–æ–º–ø–∞–Ω–∏—è: {logistic.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {logistic.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {logistic.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
            parse_mode='HTML'
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç—É
        deal = deals[deal_id]
        pull_id = deal.get('pull_id')
        pull = pulls.get(pull_id, {})

        try:
            await bot.send_message(
                logistic_id,
                f"üéâ <b>–í–´ –í–´–ë–†–ê–ù–´!</b>\n\n"
                f"üì¶ –°–¥–µ–ª–∫–∞ #{deal_id}\n"
                f"üéØ –û–±—ä—ë–º: {pull.get('current_volume', 0)} —Ç\n"
                f"üè¢ –ü–æ—Ä—Ç: {pull.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–º!",
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            pass

        logging.info(f"‚úÖ Logistic {logistic_id} selected for deal {deal_id}")

    except Exception as e:
        logging.error(f"Error selecting logistic: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


# ====================================================================
# –í–´–ë–û–† –≠–ö–°–ü–ï–î–ò–¢–û–†–ê –≠–ö–°–ü–û–†–¢–Å–†–û–ú
# ====================================================================

@dp.callback_query_handler(lambda c: c.data.startswith('select_expeditor_'))
async def select_expeditor_handler(callback: types.CallbackQuery):
    try:
        parts = callback.data.split('_')
        expeditor_id = int(parts[2])
        deal_id = int(parts[3])

        if deal_id not in deals:
            await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        deals[deal_id]['expeditor_id'] = expeditor_id
        deals[deal_id]['expeditor_selected_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        save_deals_to_pickle()

        expeditor = users.get(expeditor_id, {})
        await callback.message.edit_text(
            f"‚úÖ <b>–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω!</b>\n\n"
            f"üìú –ö–æ–º–ø–∞–Ω–∏—è: {expeditor.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç: {expeditor.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {expeditor.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
            parse_mode='HTML'
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—É
        deal = deals[deal_id]
        pull_id = deal.get('pull_id')
        pull = pulls.get(pull_id, {})

        try:
            await bot.send_message(
                expeditor_id,
                f"üéâ <b>–í–´ –í–´–ë–†–ê–ù–´!</b>\n\n"
                f"üì¶ –°–¥–µ–ª–∫–∞ #{deal_id}\n"
                f"üéØ –û–±—ä—ë–º: {pull.get('current_volume', 0)} —Ç\n"
                f"üè¢ –ü–æ—Ä—Ç: {pull.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–º!",
                parse_mode='HTML'
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            pass

        logging.info(f"‚úÖ Expeditor {expeditor_id} selected for deal {deal_id}")

    except Exception as e:
        logging.error(f"Error selecting expeditor: {e}")

# ============================================================================
# –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–¥–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏)
# ============================================================================

@dp.callback_query_handler(lambda c: c.data == 'back_to_menu', state='*')
async def back_to_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.finish()
    user_id = callback.from_user.id
    role = users.get(user_id, {}).get('role', '')

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º get_role_keyboard
    if role == 'farmer':
        await callback.message.answer(
            "üåæ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ñ–µ—Ä–º–µ—Ä–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_role_keyboard('farmer'),
            parse_mode='HTML'
        )
    elif role == 'exporter':
        await callback.message.answer(
            "üö¢ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_role_keyboard('exporter'),
            parse_mode='HTML'
        )
    elif role == 'logistics':
        await callback.message.answer(
            "üöö <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ª–æ–≥–∏—Å—Ç–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_role_keyboard('logistics'),
            parse_mode='HTML'
        )
    elif role == 'expeditor':
        await callback.message.answer(
            "üìã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_role_keyboard('expeditor'),
            parse_mode='HTML'
        )
    else:
        await callback.message.answer(
            "‚ö†Ô∏è –†–æ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )

    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == 'cancel', state='*')
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.finish()
    await callback.message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await back_to_menu_handler(callback, state)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == 'cancel_action', state='*')
async def cancel_action_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
    await cancel_handler(callback, state)

@dp.callback_query_handler(lambda c: c.data == 'transport_type', state='*')
async def transport_type_handler(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π", callback_data="transport:auto"),
        InlineKeyboardButton("üöÇ –ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π", callback_data="transport:rail"),
        InlineKeyboardButton("üö¢ –ú–æ—Ä—Å–∫–æ–π", callback_data="transport:sea"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    await callback.message.edit_text("üöö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == 'view_my_batches', state='*')
async def view_my_batches_handler(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ–∏—Ö –ø–∞—Ä—Ç–∏–π"""
    user_id = callback.from_user.id
    user_batches = batches.get(user_id, [])

    if not user_batches:
        await callback.message.answer("üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π")
        await callback.answer()
        return

    text = "<b>üì¶ –í–∞—à–∏ –ø–∞—Ä—Ç–∏–∏:</b>\n\n"
    keyboard = InlineKeyboardMarkup(row_width=1)

    for i, batch in enumerate(user_batches[:10], 1):
        crop = batch.get('culture', '–ù/–î')
        volume = batch.get('volume', 0)
        text += f"{i}. {crop} - {volume} —Ç–æ–Ω–Ω\n"
        keyboard.add(InlineKeyboardButton(f"üì¶ {crop} ({volume}—Ç)", callback_data=f"viewbatch_{batch.get('id')}"))

    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == 'startsearch', state='*')
async def startsearch_handler(callback: types.CallbackQuery):
    """–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üåæ –ü–æ –∫—É–ª—å—Ç—É—Ä–µ", callback_data="search_by_culture"),
        InlineKeyboardButton("üìç –ü–æ —Ä–µ–≥–∏–æ–Ω—É", callback_data="search_by_region"),
        InlineKeyboardButton("üí∞ –ü–æ —Ü–µ–Ω–µ", callback_data="search_by:price"),
        InlineKeyboardButton("üìä –ü–æ –æ–±—ä—ë–º—É", callback_data="search_by:volume"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    await callback.message.edit_text("üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == 'broadcast_confirm', state='*')
async def broadcast_confirm_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    data = await state.get_data()
    message_text = data.get('broadcast_message')

    if not message_text:
        await callback.message.answer("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await callback.answer()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    sent = 0
    failed = 0

    for user_id in users.keys():
        try:
            await bot.send_message(user_id, f"üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞:</b>\n\n{message_text}", parse_mode="HTML")
            sent += 1
        except Exception as e:
            failed += 1
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ {user_id}: {e}")

    await callback.message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n‚ùå –û—à–∏–±–æ–∫: {failed}")
    await state.finish()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data in ['exportusers', 'export_users'], state='*')
async def export_users_unified_handler(callback: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"""
    await export_users_handler(callback)

@dp.callback_query_handler(lambda c: c.data in ['exportbatches', 'export_batches'], state='*')
async def export_batches_unified_handler(callback: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ä—Ç–∏–π (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"""
    await export_batches_handler(callback)

@dp.callback_query_handler(lambda c: c.data in ['exportpulls', 'export_pools'], state='*')
async def export_pulls_unified_handler(callback: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø—É–ª–æ–≤ (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"""
    await export_pools_handler(callback)

@dp.callback_query_handler(lambda c: c.data in ['exportfull', 'export_full'], state='*')
async def export_full_unified_handler(callback: types.CallbackQuery):
    """–ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç (—É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)"""
    await export_full_handler(callback)

@dp.callback_query_handler(lambda c: c.data == 'back_to_pools', state='*')
async def back_to_pools_handler(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—É–ª–æ–≤"""
    await show_pools_list(callback.message)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == 'backtomainmenu', state='*')
async def backtomainmenu_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)"""
    await back_to_menu_handler(callback, state)

@dp.callback_query_handler(lambda c: c.data == 'expeditor_available_deals', state='*')
async def expeditor_available_deals_handler(callback: types.CallbackQuery):
    """–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –¥–ª—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    available_deals = [d for d in deals.values() if d.get('status') == 'need_expeditor']

    if not available_deals:
        await callback.message.answer("üìã –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")
        await callback.answer()
        return

    text = "<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏:</b>\n\n"
    keyboard = InlineKeyboardMarkup(row_width=1)

    for i, deal in enumerate(available_deals[:10], 1):
        deal_id = deal.get('id')
        port = deal.get('port', '–ù/–î')
        volume = deal.get('volume', 0)
        text += f"{i}. –ü–æ—Ä—Ç: {port}, –û–±—ä—ë–º: {volume}—Ç\n"
        keyboard.add(InlineKeyboardButton(f"üìã –°–¥–µ–ª–∫–∞ #{deal_id}", callback_data=f"expeditor_view_deal:{deal_id}"))


# ============================================================================
# –§–ò–ù–ê–õ–¨–ù–´–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ============================================================================

@dp.callback_query_handler(lambda c: c.data == 'admin_detailed_stats', state='*')
async def admin_detailed_stats_handler(callback: types.CallbackQuery):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    # –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_users = len(users)
    roles_count = {}
    for user in users.values():
        role = user.get('role', 'unknown')
        roles_count[role] = roles_count.get(role, 0) + 1

    total_batches = sum(len(b) for b in batches.values())
    active_batches = sum(1 for b_list in batches.values() for b in b_list if b.get('status') == 'active')

    total_pulls = len(pulls)
    active_pulls = sum(1 for p in pulls.values() if p.get('status') == 'active')

    text = "<b>üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
    text += f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {total_users}\n"
    for role, count in roles_count.items():
        text += f"   ‚Ä¢ {role}: {count}\n"

    text += f"\nüì¶ <b>–ü–∞—Ä—Ç–∏–∏:</b>\n"
    text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_batches}\n"
    text += f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_batches}\n"

    text += f"\nüåæ <b>–ü—É–ª—ã:</b>\n"
    text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_pulls}\n"
    text += f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_pulls}\n"

    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export_analytics"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin")
    )

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == 'admin_export_analytics', state='*')
async def admin_export_analytics_handler(callback: types.CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    try:
        from io import StringIO
        import csv

        output = StringIO()
        writer = csv.writer(output)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        writer.writerow(['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'])

        # –î–∞–Ω–Ω—ã–µ
        writer.writerow(['–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', len(users)])
        writer.writerow(['–í—Å–µ–≥–æ –ø–∞—Ä—Ç–∏–π', sum(len(b) for b in batches.values())])
        writer.writerow(['–í—Å–µ–≥–æ –ø—É–ª–æ–≤', len(pulls)])

        roles_count = {}
        for user in users.values():
            role = user.get('role', 'unknown')
            roles_count[role] = roles_count.get(role, 0) + 1

        for role, count in roles_count.items():
            writer.writerow([f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {role}', count])

        output.seek(0)

        from aiogram.types import BufferedInputFile
        file = BufferedInputFile(output.getvalue().encode('utf-8-sig'), filename='analytics.csv')

        await callback.message.answer_document(file, caption="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'admin_search_user', state='*')
async def admin_search_user_handler(callback: types.CallbackQuery):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º"""
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    await callback.message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n"
        "‚Ä¢ Telegram ID\n"
        "‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "‚Ä¢ Email\n"
        "‚Ä¢ –ò–ù–ù",
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('doctype_'), state='*')
async def doctype_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (CPT, FOB, CIF, EXW)"""
    doctype = callback.data.split('_', 1)[1] if '_' in callback.data else 'CPT'

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await state.update_data(doctype=doctype)

    await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∏–ø: {doctype}")

    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ª–æ–≥–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    data = await state.get_data()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_shipping"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )

    await callback.message.edit_text(
        f"‚úÖ <b>–¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:</b> {doctype}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data == 'continue_shipping', state='*')
async def continue_shipping_handler(callback: types.CallbackQuery):
    """–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    await callback.answer("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    # –î–∞–ª—å–Ω–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞

    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu"))

    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()
# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –õ–û–ì–ò–°–¢–ê ==========

@dp.message_handler(lambda m: m.text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", state='*')
async def logistic_active_requests_handler(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"""
    await state.finish()

    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'logistic':
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    active_requests = {req_id: req for req_id, req in shipping_requests.items() if req.get('status') == 'active'}

    if not active_requests:
        await message.answer("<b>üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.", parse_mode='HTML')
        return

    text = f"<b>üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É</b>\n\n–í—Å–µ–≥–æ: <b>{len(active_requests)}</b>\n\n"
    keyboard = InlineKeyboardMarkup(row_width=1)

    for idx, (req_id, request) in enumerate(list(active_requests.items())[:10], 1):
        text += f"{idx}. <b>–ó–∞—è–≤–∫–∞ #{req_id}</b>\n"
        text += f"   üìç {request.get('route_from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} ‚Üí {request.get('route_to', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"   üì¶ {request.get('volume', 0):.0f} —Ç ({request.get('culture', '')})\n"
        text += f"   üìÖ {request.get('desired_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
        keyboard.add(InlineKeyboardButton(f"üîç –ó–∞—è–≤–∫–∞ #{req_id}", callback_data=f"viewrequest:{req_id}"))

    if len(active_requests) > 10:
        text += f"\n...–∏ –µ—â—ë {len(active_requests) - 10}\n"

    keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_requests"))
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')


@dp.callback_query_handler(lambda c: c.data.startswith('viewrequest:'), state='*')
async def view_request_details(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏"""
    await state.finish()

    try:
        req_id = int(callback.data.split(':')[1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    if req_id not in shipping_requests:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    request = shipping_requests[req_id]
    exporter = users.get(request.get('exporter_id'), {})

    text = f"<b>üìã –ó–∞—è–≤–∫–∞ #{req_id}</b>\n\n"
    text += f"<b>üì¶ –î–µ—Ç–∞–ª–∏ –≥—Ä—É–∑–∞:</b>\n"
    text += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {request.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üìä –û–±—ä—ë–º: {request.get('volume', 0):.0f} —Ç\n\n"
    text += f"<b>üöõ –ú–∞—Ä—à—Ä—É—Ç:</b>\n"
    text += f"üìç –û—Ç–∫—É–¥–∞: {request.get('route_from', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üìç –ö—É–¥–∞: {request.get('route_to', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    text += f"<b>üìÖ –°—Ä–æ–∫–∏:</b>\n{request.get('desired_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
    text += f"<b>üë§ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä:</b>\n{exporter.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n<code>{exporter.get('phone', '')}</code>\n\n"

    existing_offer = None
    for offer_id, offer in logistic_offers.items():
        if offer.get('request_id') == req_id and offer.get('logist_id') == callback.from_user.id:
            existing_offer = offer
            break

    keyboard = InlineKeyboardMarkup(row_width=1)

    if existing_offer:
        text += f"<b>‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
        text += f"üöõ {existing_offer.get('vehicle_type', '')}\n"
        text += f"üí∞ {existing_offer.get('price', 0):,.0f} ‚ÇΩ\n"
        text += f"üìÖ {existing_offer.get('delivery_date', '')}\n"
        keyboard.add(InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"editoffer:{offer_id}"))
    else:
        keyboard.add(InlineKeyboardButton("‚úÖ –°–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data=f"makeoffer:{req_id}"))

    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_requests"))
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('makeoffer:'), state='*')
async def make_offer_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        req_id = int(callback.data.split(':')[1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return

    if req_id not in shipping_requests:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    await state.update_data(request_id=req_id)
    await LogisticOfferStates.vehicle_type.set()

    await callback.message.edit_text("<b>üöõ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:</b>", reply_markup=vehicle_type_keyboard(), parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('vehicle:'), state=LogisticOfferStates.vehicle_type)
async def set_vehicle_type(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    vehicle_type = callback.data.split(':')[1]
    vehicle_names = {'truck': 'üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª—å', 'train': 'üöÇ –ñ/–¥', 'ship': 'üö¢ –°—É–¥–Ω–æ'}

    await state.update_data(vehicle_type=vehicle_names.get(vehicle_type, vehicle_type))
    await LogisticOfferStates.price.set()

    await callback.message.edit_text(
        f"<b>üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (‚ÇΩ/—Ç):</b>\n\n–í—ã–±—Ä–∞–Ω: {vehicle_names.get(vehicle_type, vehicle_type)}\n\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —á–∏—Å–ª–æ–º: <code>1500</code>",
        parse_mode='HTML'
    )
    await callback.answer()


@dp.message_handler(state=LogisticOfferStates.price)
async def set_offer_price(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    try:
        price = float(message.text.replace(',', '.').replace(' ', ''))
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: <code>1500</code>", parse_mode='HTML')
        return

    await state.update_data(price=price)
    await LogisticOfferStates.delivery_date.set()
    await message.answer("<b>üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:</b>\n\n–§–æ—Ä–º–∞—Ç: <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>15.11.2025</code>", parse_mode='HTML')


@dp.message_handler(state=LogisticOfferStates.delivery_date)
async def set_delivery_date(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏"""
    delivery_date = message.text.strip()

    if not re.match(r'\d{2}\.\d{2}\.\d{4}', delivery_date):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–î–î.–ú–ú.–ì–ì–ì–ì</code>", parse_mode='HTML')
        return

    await state.update_data(delivery_date=delivery_date)
    await LogisticOfferStates.confirm.set()

    data = await state.get_data()
    text = f"<b>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
    text += f"üöõ {data['vehicle_type']}\nüí∞ {data['price']:,.0f} ‚ÇΩ/—Ç\nüìÖ {delivery_date}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?"

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_offer"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')


@dp.callback_query_handler(lambda c: c.data == 'confirm_offer', state=LogisticOfferStates.confirm)
async def confirm_logistic_offer(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    data = await state.get_data()
    user_id = callback.from_user.id

    offer_id = len(logistic_offers) + 1
    offer = {
        'id': offer_id,
        'request_id': data['request_id'],
        'logist_id': user_id,
        'vehicle_type': data['vehicle_type'],
        'price': data['price'],
        'delivery_date': data['delivery_date'],
        'status': 'active',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }

    logistic_offers[offer_id] = offer
    save_logistic_offers()

    request = shipping_requests.get(data['request_id'])
    if request:
        exporter_id = request.get('exporter_id')
        if exporter_id:
            try:
                logist_name = users[user_id].get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                logist_phone = users[user_id].get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')

                await bot.send_message(
                    exporter_id,
                    f"<b>üì¶ –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É!</b>\n\n"
                    f"<b>–ó–∞—è–≤–∫–∞ #{request['id']}</b>\n"
                    f"üìç {request.get('route_from', '')} ‚Üí {request.get('route_to', '')}\n\n"
                    f"<b>üë§ –õ–æ–≥–∏—Å—Ç:</b> {logist_name}\n"
                    f"üì± <code>{logist_phone}</code>\n\n"
                    f"<b>üíº –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>\n"
                    f"üöõ {data['vehicle_type']}\n"
                    f"üí∞ {data['price']:,.0f} ‚ÇΩ/—Ç\n"
                    f"üìÖ {data['delivery_date']}",
                    parse_mode='HTML'
                )
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    await callback.message.edit_text(
        f"<b>‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id}\n"
        f"üöõ {data['vehicle_type']}\nüí∞ {data['price']:,.0f} ‚ÇΩ/—Ç\nüìÖ {data['delivery_date']}\n\n"
        f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.",
        parse_mode='HTML'
    )
    await state.finish()
    await callback.answer()


@dp.message_handler(lambda m: m.text == "üíº –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", state='*')
async def logistic_my_offers_handler(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    await state.finish()
    user_id = message.from_user.id

    if user_id not in users or users[user_id].get('role') != 'logistic':
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    my_offers = {oid: o for oid, o in logistic_offers.items() if o.get('logist_id') == user_id}

    if not my_offers:
        await message.answer("<b>üíº –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.", parse_mode='HTML')
        return

    active = sum(1 for o in my_offers.values() if o.get('status') == 'active')
    accepted = sum(1 for o in my_offers.values() if o.get('status') == 'accepted')

    text = f"<b>üíº –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n–í—Å–µ–≥–æ: <b>{len(my_offers)}</b>\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{active}</b>\n–ü—Ä–∏–Ω—è—Ç—ã—Ö: <b>{accepted}</b>\n\n"
    keyboard = InlineKeyboardMarkup(row_width=1)

    for idx, (offer_id, offer) in enumerate(list(my_offers.items())[:10], 1):
        req_id = offer.get('request_id')
        status_emoji = "‚úÖ" if offer.get('status') == 'accepted' else "üü°"

        text += f"{idx}. {status_emoji} <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id}</b>\n"
        text += f"   –ó–∞—è–≤–∫–∞: #{req_id}\n"
        text += f"   üöõ {offer.get('vehicle_type', '')}\n"
        text += f"   üí∞ {offer.get('price', 0):,.0f} ‚ÇΩ/—Ç\n\n"

        keyboard.add(InlineKeyboardButton(f"üîç #{offer_id}", callback_data=f"viewoffer:{offer_id}"))

    if len(my_offers) > 10:
        text += f"\n...–∏ –µ—â—ë {len(my_offers) - 10}\n"

    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')


@dp.message_handler(lambda m: m.text == "üöö –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", state='*')
async def logistic_my_deliveries_handler(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ª–æ–≥–∏—Å—Ç–∞"""
    await state.finish()
    user_id = message.from_user.id

    if user_id not in users or users[user_id].get('role') != 'logistic':
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    my_deliveries = {did: d for did, d in deliveries.items() if d.get('logist_id') == user_id}

    if not my_deliveries:
        await message.answer("<b>üöö –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫.", parse_mode='HTML')
        return

    active = sum(1 for d in my_deliveries.values() if d.get('status') == 'in_progress')
    completed = sum(1 for d in my_deliveries.values() if d.get('status') == 'completed')

    text = f"<b>üöö –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n<b>–í—Å–µ–≥–æ:</b> {len(my_deliveries)}\n<b>–í –ø—Ä–æ—Ü–µ—Å—Å–µ:</b> {active}\n<b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> {completed}\n\n"

    for idx, (del_id, delivery) in enumerate(list(my_deliveries.items())[:5], 1):
        req_id = delivery.get('request_id')
        request = shipping_requests.get(req_id, {})
        status = delivery.get('status', 'unknown')
        status_emoji = "üöö" if status == 'in_progress' else "‚úÖ"

        text += f"{idx}. {status_emoji} <b>–î–æ—Å—Ç–∞–≤–∫–∞ #{del_id}</b>\n"
        text += f"   –ó–∞—è–≤–∫–∞: #{req_id}\n"
        text += f"   üìç {request.get('route_from', '')} ‚Üí {request.get('route_to', '')}\n"
        text += f"   –°—Ç–∞—Ç—É—Å: {status}\n\n"

    await message.answer(text, parse_mode='HTML')


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –≠–ö–°–ü–ï–î–ò–¢–û–†–ê ==========

@dp.message_handler(lambda m: m.text == "üìã –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", state='*')
async def expeditor_create_offer_handler(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.finish()
    user_id = message.from_user.id

    if user_id not in users or users[user_id].get('role') != 'expeditor':
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω.")
        return

    await ExpeditorOfferStates.service_type.set()
    await message.answer("<b>üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:</b>", reply_markup=expeditor_service_keyboard(), parse_mode='HTML')


@dp.callback_query_handler(lambda c: c.data.startswith('service:'), state=ExpeditorOfferStates.service_type)
async def set_service_type(callback: types.CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏–ø —É—Å–ª—É–≥–∏"""
    service_type = callback.data.split(':')[1]
    service_names = {
        'docs': 'üìÑ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤',
        'customs': 'üè¢ –¢–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ',
        'freight': 'üö¢ –§—Ä–∞—Ö—Ç–æ–≤–∞–Ω–∏–µ',
        'full': 'üì¶ –ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å —É—Å–ª—É–≥'
    }

    await state.update_data(service_type=service_names.get(service_type, service_type))
    await ExpeditorOfferStates.ports.set()

    await callback.message.edit_text(
        f"<b>üè¢ –£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:</b>\n\n"
        f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {service_names.get(service_type, service_type)}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n<code>–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫, –†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É</code>",
        parse_mode='HTML'
    )
    await callback.answer()


@dp.message_handler(state=ExpeditorOfferStates.ports)
async def set_expeditor_ports(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä—Ç—ã –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    ports = message.text.strip()

    if len(ports) < 3:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤")
        return

    await state.update_data(ports=ports)
    await ExpeditorOfferStates.price.set()
    await message.answer("<b>üí∞ –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ (‚ÇΩ):</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É: <code>50000</code>", parse_mode='HTML')


@dp.message_handler(state=ExpeditorOfferStates.price)
async def set_expeditor_price(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —É—Å–ª—É–≥–∏"""
    try:
        price = float(message.text.replace(',', '.').replace(' ', ''))
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: <code>50000</code>", parse_mode='HTML')
        return

    await state.update_data(price=price)
    await ExpeditorOfferStates.terms.set()
    await message.answer("<b>üìù –£–∫–∞–∂–∏—Ç–µ —É—Å–ª–æ–≤–∏—è:</b>\n\n–û–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã, —Å—Ä–æ–∫–∏, –≥–∞—Ä–∞–Ω—Ç–∏–∏:\n<code>–°—Ä–æ–∫: 3-5 –¥–Ω–µ–π. –ì–∞—Ä–∞–Ω—Ç–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞.</code>", parse_mode='HTML')


@dp.message_handler(state=ExpeditorOfferStates.terms)
async def set_expeditor_terms(message: types.Message, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Å–ª–æ–≤–∏—è"""
    terms = message.text.strip()

    if len(terms) < 10:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π.")
        return

    await state.update_data(terms=terms)
    await ExpeditorOfferStates.confirm.set()

    data = await state.get_data()
    text = f"<b>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n\n"
    text += f"üìã {data['service_type']}\n"
    text += f"üè¢ {data['ports']}\n"
    text += f"üí∞ {data['price']:,.0f} ‚ÇΩ\n"
    text += f"üìù {data['terms']}\n\n–í—Å—ë –≤–µ—Ä–Ω–æ?"

    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_expeditor_offer"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')


@dp.callback_query_handler(lambda c: c.data == 'confirm_expeditor_offer', state=ExpeditorOfferStates.confirm)
async def confirm_expeditor_offer(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    data = await state.get_data()
    user_id = callback.from_user.id

    offer_id = len(expeditor_offers) + 1
    offer = {
        'id': offer_id,
        'expeditor_id': user_id,
        'service_type': data['service_type'],
        'ports': data['ports'],
        'price': data['price'],
        'terms': data['terms'],
        'status': 'active',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }

    expeditor_offers[offer_id] = offer
    save_expeditor_offers()

    await callback.message.edit_text(
        f"<b>‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id}\n"
        f"üìã {data['service_type']}\n"
        f"üè¢ {data['ports']}\n"
        f"üí∞ {data['price']:,.0f} ‚ÇΩ\n\n"
        f"–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º.",
        parse_mode='HTML'
    )
    await state.finish()
    await callback.answer()


@dp.message_handler(lambda m: m.text == "üíº –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" and users.get(m.from_user.id, {}).get('role') == 'expeditor', state='*')
async def expeditor_my_offers_handler(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.finish()
    user_id = message.from_user.id

    my_offers = {oid: o for oid, o in expeditor_offers.items() if o.get('expeditor_id') == user_id}

    if not my_offers:
        await message.answer("<b>üíº –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n\n–°–æ–∑–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ <b>üìã –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</b>", parse_mode='HTML')
        return

    active = sum(1 for o in my_offers.values() if o.get('status') == 'active')
    text = f"<b>üíº –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n–í—Å–µ–≥–æ: <b>{len(my_offers)}</b>\n–ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{active}</b>\n\n"

    for idx, (offer_id, offer) in enumerate(list(my_offers.items())[:10], 1):
        text += f"{idx}. <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id}</b>\n"
        text += f"   üìã {offer.get('service_type', '')}\n"
        text += f"   üè¢ {offer.get('ports', '')}\n"
        text += f"   üí∞ {offer.get('price', 0):,.0f} ‚ÇΩ\n"
        text += f"   –°—Ç–∞—Ç—É—Å: {offer.get('status', 'active')}\n\n"

    if len(my_offers) > 10:
        text += f"\n...–∏ –µ—â—ë {len(my_offers) - 10}\n"

    await message.answer(text, parse_mode='HTML')


# ========== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ==========

@dp.callback_query_handler(lambda c: c.data == 'refresh_requests', state='*')
async def refresh_requests(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
    await logistic_active_requests_handler(callback.message, FSMContext())
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ")


@dp.callback_query_handler(lambda c: c.data == 'back_to_requests', state='*')
async def back_to_requests(callback: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞—è–≤–æ–∫"""
    await logistic_active_requests_handler(callback.message, FSMContext())
    await callback.answer()


# ============================================================================
# –≠–ö–°–ü–û–†–¢–Å–†: –ü–†–û–°–ú–û–¢–† –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô –õ–û–ì–ò–°–¢–û–í
# ============================================================================

@dp.callback_query_handler(lambda c: c.data.startswith('view_request_offers_'), state='*')
async def view_request_offers(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ª–æ–≥–∏—Å—Ç–æ–≤ –ø–æ –∑–∞—è–≤–∫–µ"""
    await state.finish()
    
    try:
        request_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞—è–≤–∫–∏", show_alert=True)
        return
    
    if request_id not in shipping_requests:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    request = shipping_requests[request_id]
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if request.get('exporter_id') != user_id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∑–∞—è–≤–∫–µ
    offers = [
        (offer_id, offer) for offer_id, offer in logistic_offers.items()
        if offer.get('request_id') == request_id
    ]
    
    if not offers:
        text = f"üì¶ <b>–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –ó–ê–Ø–í–ö–ï #{request_id}</b>\n\n"
        text += "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç –ª–æ–≥–∏—Å—Ç–æ–≤\n\n"
        text += "<i>–õ–æ–≥–∏—Å—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ.\n"
        text += "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</i>"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üîô –ö –∑–∞—è–≤–∫–∞–º", callback_data="my_shipping_requests"))
        keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    by_status = {
        'pending': [],
        'accepted': [],
        'rejected': []
    }
    
    for offer_id, offer in offers:
        status = offer.get('status', 'pending')
        if status in by_status:
            by_status[status].append((offer_id, offer))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ (–Ω–∏–∑–∫–∏–µ –ø–µ—Ä–≤—ã–µ)
    for status in by_status:
        by_status[status].sort(key=lambda x: x[1].get('price', 999999))
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ
    pull_id = request.get('pull_id')
    pull_info = pulls.get(pull_id, {})
    
    text = f"üì¶ <b>–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –ó–ê–Ø–í–ö–ï #{request_id}</b>\n\n"
    text += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull_info.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üì¶ –û–±—ä—ë–º: {request.get('volume', 0):.1f} —Ç\n"
    text += f"üìç –ú–∞—Ä—à—Ä—É—Ç: {request.get('route_from', '')} ‚Üí {request.get('route_to', '')}\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total = len(offers)
    pending = len(by_status['pending'])
    accepted = len(by_status['accepted'])
    rejected = len(by_status['rejected'])
    
    text += f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
    text += f"üìã –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <b>{total}</b>\n"
    text += f"üïê –û–∂–∏–¥–∞—é—Ç —Ä–µ—à–µ–Ω–∏—è: <b>{pending}</b>\n"
    text += f"‚úÖ –ü—Ä–∏–Ω—è—Ç–æ: <b>{accepted}</b>\n"
    text += f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: <b>{rejected}</b>\n\n"
    
    if pending > 0:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        best_offer_id, best_offer = by_status['pending'][0]
        text += f"üí∞ <b>–õ–£–ß–®–ï–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:</b>\n"
        text += f"üíµ –¶–µ–Ω–∞: <b>{best_offer.get('price', 0):,.0f} ‚ÇΩ</b>\n"
        text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {best_offer.get('vehicle_type')}\n"
        text += f"üìÖ –î–∞—Ç–∞: {best_offer.get('delivery_date')}\n\n"
    
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    for offer_id, offer in by_status['pending'][:5]:
        logist_id = offer.get('logist_id')
        logist_info = users.get(logist_id, {})
        logist_name = logist_info.get('company_name', f'–õ–æ–≥–∏—Å—Ç #{logist_id}')
        
        price = offer.get('price', 0)
        vehicle = offer.get('vehicle_type', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        button_text = f"üí∞ {price:,.0f} ‚ÇΩ | {vehicle[:15]} | {logist_name[:20]}"
        
        keyboard.add(
            InlineKeyboardButton(
                button_text,
                callback_data=f"view_offer_details_{offer_id}"
            )
        )
    
    if len(by_status['pending']) > 5:
        keyboard.add(
            InlineKeyboardButton(
                f"‚ûï –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë {len(by_status['pending']) - 5}",
                callback_data=f"show_all_offers_{request_id}"
            )
        )
    
    # –ö–Ω–æ–ø–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    if pending >= 2:
        keyboard.add(
            InlineKeyboardButton(
                "‚öñÔ∏è –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                callback_data=f"compare_offers_{request_id}"
            )
        )
    
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"view_request_offers_{request_id}")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ö –∑–∞—è–≤–∫–∞–º", callback_data="my_shipping_requests")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('view_offer_details_'), state='*')
async def view_offer_details(callback: types.CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    await state.finish()
    
    try:
        offer_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID", show_alert=True)
        return
    
    if offer_id not in logistic_offers:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    offer = logistic_offers[offer_id]
    request_id = offer.get('request_id')
    request = shipping_requests.get(request_id, {})
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if request.get('exporter_id') != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∏—Å—Ç–µ
    logist_id = offer.get('logist_id')
    logist_info = users.get(logist_id, {})
    logist_name = logist_info.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    logist_phone = logist_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∏—Å—Ç–∞
    logist_offers = [o for o in logistic_offers.values() if o.get('logist_id') == logist_id]
    logist_deliveries = [d for d in deliveries.values() if d.get('logist_id') == logist_id]
    completed = len([d for d in logist_deliveries if d.get('status') == 'completed'])
    total_offers = len(logist_offers)
    
    text = f"üìã <b>–î–ï–¢–ê–õ–ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø #{offer_id}</b>\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
    text += f"<b>üí∞ –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:</b>\n"
    text += f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{offer.get('price', 0):,.0f} ‚ÇΩ</b>\n"
    text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: <b>{offer.get('vehicle_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}</b>\n"
    text += f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: <b>{offer.get('delivery_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
    
    if offer.get('additional_info'):
        text += f"\n‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:\n<i>{offer.get('additional_info')}</i>\n"
    
    text += f"\nüìÖ –°–æ–∑–¥–∞–Ω–æ: {offer.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∏—Å—Ç–µ
    text += f"<b>üöö –õ–û–ì–ò–°–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–ú–ü–ê–ù–ò–Ø:</b>\n"
    text += f"üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{logist_name}</b>\n"
    text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {logist_phone}\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    text += f"<b>üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
    text += f"‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∞–≤–æ–∫: <b>{completed}</b>\n"
    text += f"üìã –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <b>{total_offers}</b>\n"
    
    if completed > 0:
        # –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        completed_deliveries = [
            logistic_offers.get(d.get('offer_id'), {}).get('price', 0)
            for d in logist_deliveries if d.get('status') == 'completed'
        ]
        if completed_deliveries:
            avg_price = sum(completed_deliveries) / len(completed_deliveries)
            text += f"üí∞ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{avg_price:,.0f} ‚ÇΩ</b>\n"
    
    text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –°—Ç–∞—Ç—É—Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    status = offer.get('status', 'pending')
    
    if status == 'pending':
        text += "‚è≥ <b>–û–∂–∏–¥–∞–µ—Ç –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è</b>"
    elif status == 'accepted':
        text += "‚úÖ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ</b>"
    elif status == 'rejected':
        text += "‚ùå <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>"
        if offer.get('rejection_reason'):
            text += f"\n<i>–ü—Ä–∏—á–∏–Ω–∞: {offer.get('rejection_reason')}</i>"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if status == 'pending':
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_offer_{offer_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_offer_{offer_id}")
        )
    
    keyboard.add(
        InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º", callback_data=f"view_request_offers_{request_id}")
    )
    keyboard.add(
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('compare_offers_'), state='*')
async def compare_offers(callback: types.CallbackQuery, state: FSMContext):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    await state.finish()
    
    try:
        request_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if request_id not in shipping_requests:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    request = shipping_requests[request_id]
    user_id = callback.from_user.id
    
    if request.get('exporter_id') != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    offers = [
        (offer_id, offer) for offer_id, offer in logistic_offers.items()
        if offer.get('request_id') == request_id and offer.get('status') == 'pending'
    ]
    
    if len(offers) < 2:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", show_alert=True)
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ
    offers.sort(key=lambda x: x[1].get('price', 999999))
    
    text = f"‚öñÔ∏è <b>–°–†–ê–í–ù–ï–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô</b>\n\n"
    text += f"üì¶ –ó–∞—è–≤–∫–∞ #{request_id}\n"
    text += f"üìä –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º {len(offers)} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
    for i, (offer_id, offer) in enumerate(offers[:3], 1):
        logist_id = offer.get('logist_id')
        logist_info = users.get(logist_id, {})
        logist_name = logist_info.get('company_name', f'–õ–æ–≥–∏—Å—Ç #{logist_id}')
        
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
        
        text += f"{medal} <b>#{i} - {logist_name}</b>\n"
        text += f"üí∞ –¶–µ–Ω–∞: <b>{offer.get('price', 0):,.0f} ‚ÇΩ</b>\n"
        text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {offer.get('vehicle_type')}\n"
        text += f"üìÖ –î–∞—Ç–∞: {offer.get('delivery_date')}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–æ–≥–∏—Å—Ç–∞
        logist_deliveries = [
            d for d in deliveries.values() 
            if d.get('logist_id') == logist_id and d.get('status') == 'completed'
        ]
        completed = len(logist_deliveries)
        
        text += f"‚úÖ –î–æ—Å—Ç–∞–≤–æ–∫: {completed}\n"
        text += f"\n"
    
    if len(offers) > 3:
        text += f"<i>... –∏ –µ—â—ë {len(offers) - 3} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</i>\n\n"
    
    # –ê–Ω–∞–ª–∏–∑
    prices = [o[1].get('price', 0) for o in offers]
    min_price = min(prices)
    max_price = max(prices)
    avg_price = sum(prices) / len(prices)
    
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += f"üìä <b>–ê–ù–ê–õ–ò–ó –¶–ï–ù:</b>\n"
    text += f"üíµ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: <b>{min_price:,.0f} ‚ÇΩ</b>\n"
    text += f"üí∞ –°—Ä–µ–¥–Ω—è—è: <b>{avg_price:,.0f} ‚ÇΩ</b>\n"
    text += f"üí∏ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: <b>{max_price:,.0f} ‚ÇΩ</b>\n"
    text += f"üìà –†–∞–∑–±—Ä–æ—Å: <b>{max_price - min_price:,.0f} ‚ÇΩ</b>\n\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    best_offer_id, best_offer = offers[0]
    text += f"üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:</b>\n"
    text += f"–°–∞–º–æ–µ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{best_offer_id}\n"
    text += f"–≠–∫–æ–Ω–æ–º–∏—è: <b>{avg_price - min_price:,.0f} ‚ÇΩ</b>"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–ø-3
    for i, (offer_id, offer) in enumerate(offers[:3], 1):
        medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â"
        price = offer.get('price', 0)
        
        keyboard.add(
            InlineKeyboardButton(
                f"{medal} –í—ã–±—Ä–∞—Ç—å #{i} ({price:,.0f} ‚ÇΩ)",
                callback_data=f"view_offer_details_{offer_id}"
            )
        )
    
    keyboard.add(
        InlineKeyboardButton("üìã –í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data=f"view_request_offers_{request_id}")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"view_request_offers_{request_id}")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


# ============================================================================
# –≠–ö–°–ü–û–†–¢–Å–†: –ü–†–ò–ù–Ø–¢–ò–ï –ò –û–¢–ö–õ–û–ù–ï–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ô
# ============================================================================

class AcceptOfferStatesGroup(StatesGroup):
    """FSM –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    offer_id = State()
    confirm = State()


class RejectOfferStatesGroup(StatesGroup):
    """FSM –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    offer_id = State()
    reason = State()


@dp.callback_query_handler(lambda c: c.data.startswith('accept_offer_'), state='*')
async def accept_offer_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    await state.finish()
    
    try:
        offer_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID", show_alert=True)
        return
    
    if offer_id not in logistic_offers:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    offer = logistic_offers[offer_id]
    request_id = offer.get('request_id')
    request = shipping_requests.get(request_id, {})
    
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if request.get('exporter_id') != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    if offer.get('status') != 'pending':
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    accepted_offers = [
        o for o in logistic_offers.values()
        if o.get('request_id') == request_id and o.get('status') == 'accepted'
    ]
    
    if accepted_offers:
        await callback.answer("‚ùå –ü–æ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ –¥—Ä—É–≥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", show_alert=True)
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏
    logist_id = offer.get('logist_id')
    logist_info = users.get(logist_id, {})
    logist_name = logist_info.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    pull_id = request.get('pull_id')
    pull_info = pulls.get(pull_id, {})
    
    text = f"‚úÖ <b>–ü–†–ò–ù–Ø–¢–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø #{offer_id}</b>\n\n"
    text += f"üì¶ <b>–ó–ê–Ø–í–ö–ê #{request_id}</b>\n"
    text += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull_info.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üì¶ –û–±—ä—ë–º: {request.get('volume', 0):.1f} —Ç\n"
    text += f"üìç –ú–∞—Ä—à—Ä—É—Ç: {request.get('route_from', '')} ‚Üí {request.get('route_to', '')}\n\n"
    
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    text += f"<b>–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï:</b>\n"
    text += f"üöö –õ–æ–≥–∏—Å—Ç: <b>{logist_name}</b>\n"
    text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{offer.get('price', 0):,.0f} ‚ÇΩ</b>\n"
    text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {offer.get('vehicle_type')}\n"
    text += f"üìÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {offer.get('delivery_date')}\n\n"
    
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    text += "‚ö†Ô∏è <b>–í–ê–ñ–ù–û:</b>\n"
    text += "‚Ä¢ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞\n"
    text += "‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã\n"
    text += "‚Ä¢ –õ–æ–≥–∏—Å—Ç –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
    text += "‚Ä¢ –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ\n\n"
    
    text += "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", callback_data=f"confirm_accept_{offer_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_offer_details_{offer_id}")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('confirm_accept_'), state='*')
async def accept_offer_confirmed(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    await state.finish()
    
    try:
        offer_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if offer_id not in logistic_offers:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    offer = logistic_offers[offer_id]
    request_id = offer.get('request_id')
    request = shipping_requests.get(request_id, {})
    
    user_id = callback.from_user.id
    
    if request.get('exporter_id') != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    offer['status'] = 'accepted'
    offer['accepted_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    offer['accepted_by'] = user_id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    request['status'] = 'assigned'
    request['assigned_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    request['logist_id'] = offer.get('logist_id')
    
    # –°–æ–∑–¥–∞—ë–º –¥–æ—Å—Ç–∞–≤–∫—É
    delivery_id = len(deliveries) + 1
    delivery = {
        'id': delivery_id,
        'request_id': request_id,
        'offer_id': offer_id,
        'exporter_id': user_id,
        'logist_id': offer.get('logist_id'),
        'pull_id': request.get('pull_id'),
        'route_from': request.get('route_from'),
        'route_to': request.get('route_to'),
        'volume': request.get('volume'),
        'price': offer.get('price'),
        'vehicle_type': offer.get('vehicle_type'),
        'delivery_date': offer.get('delivery_date'),
        'status': 'pending',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    deliveries[delivery_id] = delivery
    
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    rejected_count = 0
    for other_offer_id, other_offer in logistic_offers.items():
        if (other_offer.get('request_id') == request_id and 
            other_offer_id != offer_id and 
            other_offer.get('status') == 'pending'):
            
            other_offer['status'] = 'rejected'
            other_offer['rejected_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            other_offer['rejection_reason'] = '–ü—Ä–∏–Ω—è—Ç–æ –¥—Ä—É–≥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
            rejected_count += 1
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–æ–≥–∏—Å—Ç–æ–≤
            other_logist_id = other_offer.get('logist_id')
            if other_logist_id:
                asyncio.create_task(
                    notify_logistic_offer_rejected(
                        other_offer_id, 
                        user_id, 
                        '–ü—Ä–∏–Ω—è—Ç–æ –¥—Ä—É–≥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
                    )
                )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    save_shipping_requests()
    save_logistic_offers()
    save_deliveries()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–Ω—è—Ç–æ–≥–æ –ª–æ–≥–∏—Å—Ç–∞
    logist_id = offer.get('logist_id')
    if logist_id:
        asyncio.create_task(notify_logistic_offer_accepted(offer_id, user_id))
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    logist_info = users.get(logist_id, {})
    logist_name = logist_info.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    text = f"üéâ <b>–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –ü–†–ò–ù–Ø–¢–û!</b>\n\n"
    text += f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ\n"
    text += f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id} —Å–æ–∑–¥–∞–Ω–∞\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += f"<b>–î–ï–¢–ê–õ–ò –î–û–°–¢–ê–í–ö–ò:</b>\n"
    text += f"üöö –õ–æ–≥–∏—Å—Ç: {logist_name}\n"
    text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {offer.get('price', 0):,.0f} ‚ÇΩ\n"
    text += f"üöõ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {offer.get('vehicle_type')}\n"
    text += f"üìÖ –î–∞—Ç–∞: {offer.get('delivery_date')}\n\n"
    
    if rejected_count > 0:
        text += f"‚ÑπÔ∏è –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {rejected_count}\n\n"
    
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += f"<b>–°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:</b>\n"
    text += f"1. –õ–æ–≥–∏—Å—Ç –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
    text += f"2. –°–≤—è–∂–∏—Ç–µ—Å—å –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n"
    text += f"3. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏'"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #" + str(delivery_id), callback_data=f"view_delivery_{delivery_id}")
    )
    keyboard.add(
        InlineKeyboardButton("üìã –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="exporter_deliveries")
    )
    keyboard.add(
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")
    
    logging.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä {user_id} –ø—Ä–∏–Ω—è–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id}, —Å–æ–∑–¥–∞–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id}")


@dp.callback_query_handler(lambda c: c.data.startswith('reject_offer_'), state='*')
async def reject_offer_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    await state.finish()
    
    try:
        offer_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID", show_alert=True)
        return
    
    if offer_id not in logistic_offers:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    offer = logistic_offers[offer_id]
    request_id = offer.get('request_id')
    request = shipping_requests.get(request_id, {})
    
    user_id = callback.from_user.id
    
    if request.get('exporter_id') != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    if offer.get('status') != 'pending':
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", show_alert=True)
        return
    
    await state.update_data(offer_id=offer_id)
    
    logist_id = offer.get('logist_id')
    logist_info = users.get(logist_id, {})
    logist_name = logist_info.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    text = f"‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø #{offer_id}</b>\n\n"
    text += f"üöö –õ–æ–≥–∏—Å—Ç: {logist_name}\n"
    text += f"üí∞ –¶–µ–Ω–∞: {offer.get('price', 0):,.0f} ‚ÇΩ\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "<b>–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è</b>\n"
    text += "<i>(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)</i>\n\n"
    text += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
    text += "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞\n"
    text += "‚Ä¢ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞\n"
    text += "‚Ä¢ –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ä–æ–∫–∏\n"
    text += "‚Ä¢ –ü—Ä–∏–Ω—è—Ç–æ –¥—Ä—É–≥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n\n"
    text += "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    reasons = [
        ("–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞", "reject_reason_–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞"),
        ("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞", "reject_reason_–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"),
        ("–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ä–æ–∫–∏", "reject_reason_–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ä–æ–∫–∏"),
        ("–ü—Ä–∏–Ω—è—Ç–æ –¥—Ä—É–≥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "reject_reason_–ü—Ä–∏–Ω—è—Ç–æ –¥—Ä—É–≥–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
    ]
    
    for reason_text, callback_data in reasons:
        keyboard.add(InlineKeyboardButton(reason_text, callback_data=callback_data))
    
    keyboard.add(InlineKeyboardButton("‚úçÔ∏è –£–∫–∞–∑–∞—Ç—å —Å–≤–æ—é –ø—Ä–∏—á–∏–Ω—É", callback_data="reject_reason_custom"))
    keyboard.add(InlineKeyboardButton("‚û°Ô∏è –ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", callback_data="reject_reason_none"))
    keyboard.add(InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data=f"view_offer_details_{offer_id}"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await RejectOfferStatesGroup.reason.set()
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('reject_reason_'), state=RejectOfferStatesGroup.reason)
async def reject_offer_reason_selected(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    reason_key = callback.data.replace('reject_reason_', '')
    
    data = await state.get_data()
    offer_id = data.get('offer_id')
    
    if reason_key == 'custom':
        text = "‚úçÔ∏è <b>–£–ö–ê–ñ–ò–¢–ï –ü–†–ò–ß–ò–ù–£ –û–¢–ö–õ–û–ù–ï–ù–ò–Ø</b>\n\n"
        text += "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏—á–∏–Ω—ã (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤):"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"reject_offer_{offer_id}"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer()
        return
    
    if reason_key == 'none':
        reason = None
    else:
        reason = reason_key
    
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    await reject_offer_execute(callback, state, offer_id, reason)


@dp.message_handler(state=RejectOfferStatesGroup.reason)
async def reject_offer_custom_reason(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ —Å–≤–æ–µ–π –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    reason = message.text.strip()
    
    if len(reason) > 200:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—á–µ:")
        return
    
    data = await state.get_data()
    offer_id = data.get('offer_id')
    
    # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π callback –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
    class FakeCallback:
        def __init__(self, user_id, message):
            self.from_user = type('obj', (object,), {'id': user_id})
            self.message = message
            
        async def answer(self, text="", show_alert=False):
            pass
    
    fake_callback = FakeCallback(message.from_user.id, message)
    
    await reject_offer_execute(fake_callback, state, offer_id, reason)


async def reject_offer_execute(callback_or_fake, state: FSMContext, offer_id: int, reason: str = None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    
    if offer_id not in logistic_offers:
        if hasattr(callback_or_fake, 'answer'):
            await callback_or_fake.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    offer = logistic_offers[offer_id]
    request_id = offer.get('request_id')
    
    user_id = callback_or_fake.from_user.id
    
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    offer['status'] = 'rejected'
    offer['rejected_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    offer['rejected_by'] = user_id
    if reason:
        offer['rejection_reason'] = reason
    
    save_logistic_offers()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–æ–≥–∏—Å—Ç–∞
    logist_id = offer.get('logist_id')
    if logist_id:
        asyncio.create_task(notify_logistic_offer_rejected(offer_id, user_id, reason))
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ
    text = f"‚ùå <b>–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï –û–¢–ö–õ–û–ù–ï–ù–û</b>\n\n"
    text += f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ\n"
    text += f"üìã –ó–∞—è–≤–∫–∞ #{request_id}\n\n"
    
    if reason:
        text += f"üí¨ –ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>\n\n"
    
    text += "‚ÑπÔ∏è –õ–æ–≥–∏—Å—Ç –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üìã –î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data=f"view_request_offers_{request_id}")
    )
    keyboard.add(
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    if hasattr(callback_or_fake.message, 'edit_text'):
        await callback_or_fake.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await callback_or_fake.message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    
    await state.finish()
    
    logging.info(f"‚ùå –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä {user_id} –æ—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id}")


# ============================================================================
# –≠–ö–°–ü–û–†–¢–Å–†: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ê–ú–ò –ù–ê –î–û–°–¢–ê–í–ö–£
# ============================================================================

@dp.callback_query_handler(lambda c: c.data == 'my_shipping_requests', state='*')
async def show_my_shipping_requests(callback: types.CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    my_requests = [
        (req_id, req) for req_id, req in shipping_requests.items()
        if req.get('exporter_id') == user_id
    ]
    
    if not my_requests:
        text = "üì¶ <b>–ú–û–ò –ó–ê–Ø–í–ö–ò –ù–ê –î–û–°–¢–ê–í–ö–£</b>\n\n"
        text += "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É\n\n"
        text += "<i>–°–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ '–ú–æ–∏ –ø—É–ª—ã'</i>"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—É–ª", callback_data="create_pull"))
        keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    by_status = {
        'active': [],
        'assigned': [],
        'in_progress': [],
        'completed': [],
        'cancelled': []
    }
    
    for req_id, req in my_requests:
        status = req.get('status', 'active')
        if status in by_status:
            by_status[status].append((req_id, req))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    for status in by_status:
        by_status[status].sort(key=lambda x: x[1].get('created_at', ''), reverse=True)
    
    text = f"üì¶ <b>–ú–û–ò –ó–ê–Ø–í–ö–ò –ù–ê –î–û–°–¢–ê–í–ö–£</b>\n\n"
    text += f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <b>{len(my_requests)}</b>\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    active = len(by_status['active'])
    assigned = len(by_status['assigned'])
    in_progress = len(by_status['in_progress'])
    completed = len(by_status['completed'])
    
    text += f"üÜï –ê–∫—Ç–∏–≤–Ω—ã–µ: <b>{active}</b>\n"
    text += f"üë§ –ù–∞–∑–Ω–∞—á–µ–Ω—ã: <b>{assigned}</b>\n"
    text += f"üöö –í –ø—É—Ç–∏: <b>{in_progress}</b>\n"
    text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã: <b>{completed}</b>\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É:"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏
    for status_key, status_name, emoji in [
        ('active', '–ê–∫—Ç–∏–≤–Ω—ã–µ', 'üÜï'),
        ('assigned', '–ù–∞–∑–Ω–∞—á–µ–Ω—ã', 'üë§'),
        ('in_progress', '–í –ø—É—Ç–∏', 'üöö'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω—ã', '‚úÖ')
    ]:
        requests = by_status[status_key]
        if requests:
            for req_id, req in requests[:5]:
                pull_id = req.get('pull_id')
                pull_info = pulls.get(pull_id, {})
                culture = pull_info.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                volume = req.get('volume', 0)
                
                # –ü–æ–¥—Å—á—ë—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                offers_count = len([
                    o for o in logistic_offers.values()
                    if o.get('request_id') == req_id and o.get('status') == 'pending'
                ])
                
                button_text = f"{emoji} #{req_id} | {culture} {volume:.0f}—Ç"
                if offers_count > 0 and status_key == 'active':
                    button_text += f" | üì¨ {offers_count}"
                
                keyboard.add(
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"view_my_request_{req_id}"
                    )
                )
    
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="my_shipping_requests")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('view_my_request_'), state='*')
async def view_my_request_details(callback: types.CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏"""
    await state.finish()
    
    try:
        request_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID", show_alert=True)
        return
    
    if request_id not in shipping_requests:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    request = shipping_requests[request_id]
    user_id = callback.from_user.id
    
    if request.get('exporter_id') != user_id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∑–∞—è–≤–∫–∞", show_alert=True)
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ
    pull_id = request.get('pull_id')
    pull_info = pulls.get(pull_id, {})
    
    text = f"üì¶ <b>–ó–ê–Ø–í–ö–ê #{request_id}</b>\n\n"
    text += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: <b>{pull_info.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
    text += f"üì¶ –û–±—ä—ë–º: <b>{request.get('volume', 0):.1f} —Ç</b>\n"
    text += f"üìç –û—Ç–∫—É–¥–∞: {request.get('route_from', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üìç –ö—É–¥–∞: {request.get('route_to', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    
    if request.get('desired_date'):
        text += f"üìÖ –ñ–µ–ª–∞–µ–º–∞—è –¥–∞—Ç–∞: {request.get('desired_date')}\n"
    
    if request.get('budget'):
        text += f"üí∞ –ë—é–¥–∂–µ—Ç: {request.get('budget'):,.0f} ‚ÇΩ\n"
    
    if request.get('requirements'):
        text += f"\nüìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n{request.get('requirements')}\n"
    
    text += f"\nüìÖ –°–æ–∑–¥–∞–Ω–∞: {request.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    status = request.get('status', 'active')
    status_emoji = get_status_emoji(status)
    status_name = get_status_name(status)
    
    text += f"üìä –°—Ç–∞—Ç—É—Å: <b>{status_emoji} {status_name}</b>\n\n"
    
    # –ü–æ–¥—Å—á—ë—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    all_offers = [
        o for o in logistic_offers.values()
        if o.get('request_id') == request_id
    ]
    
    pending_offers = [o for o in all_offers if o.get('status') == 'pending']
    accepted_offers = [o for o in all_offers if o.get('status') == 'accepted']
    
    text += f"üì¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:\n"
    text += f"  ‚Ä¢ –û–∂–∏–¥–∞—é—Ç —Ä–µ—à–µ–Ω–∏—è: <b>{len(pending_offers)}</b>\n"
    text += f"  ‚Ä¢ –ü—Ä–∏–Ω—è—Ç–æ: <b>{len(accepted_offers)}</b>\n"
    text += f"  ‚Ä¢ –í—Å–µ–≥–æ: <b>{len(all_offers)}</b>\n\n"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –ª–æ–≥–∏—Å—Ç
    if request.get('logist_id'):
        logist_info = users.get(request.get('logist_id'), {})
        text += f"üöö –õ–æ–≥–∏—Å—Ç: <b>{logist_info.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
        if logist_info.get('phone'):
            text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {logist_info.get('phone')}\n"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if status == 'active':
        if len(pending_offers) > 0:
            keyboard.add(
                InlineKeyboardButton(
                    f"üì¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ({len(pending_offers)})",
                    callback_data=f"view_request_offers_{request_id}"
                )
            )
        
        keyboard.add(
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_request_{request_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_request_{request_id}")
        )
    
    elif status == 'assigned':
        keyboard.add(
            InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–∫–∞", callback_data=f"view_delivery_by_request_{request_id}")
        )
        keyboard.add(
            InlineKeyboardButton("üì¨ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data=f"view_request_offers_{request_id}")
        )
    
    elif status in ['in_progress', 'completed']:
        keyboard.add(
            InlineKeyboardButton("üì¶ –î–æ—Å—Ç–∞–≤–∫–∞", callback_data=f"view_delivery_by_request_{request_id}")
        )
    
    keyboard.add(
        InlineKeyboardButton("üîô –ö –∑–∞—è–≤–∫–∞–º", callback_data="my_shipping_requests")
    )
    keyboard.add(
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('cancel_request_'), state='*')
async def cancel_request_confirm(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏"""
    await state.finish()
    
    try:
        request_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if request_id not in shipping_requests:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    request = shipping_requests[request_id]
    user_id = callback.from_user.id
    
    if request.get('exporter_id') != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    if request.get('status') != 'active':
        await callback.answer("‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", show_alert=True)
        return
    
    # –ü–æ–¥—Å—á—ë—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    pending_offers = [
        o for o in logistic_offers.values()
        if o.get('request_id') == request_id and o.get('status') == 'pending'
    ]
    
    text = f"‚ùì <b>–û–¢–ú–ï–ù–ê –ó–ê–Ø–í–ö–ò #{request_id}</b>\n\n"
    text += f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?\n\n"
    
    if len(pending_offers) > 0:
        text += f"‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å <b>{len(pending_offers)}</b> –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!\n"
        text += f"–í—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã.\n\n"
    
    text += f"<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å</i>"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_request_{request_id}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"view_my_request_{request_id}")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('confirm_cancel_request_'), state='*')
async def cancel_request_confirmed(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"""
    await state.finish()
    
    try:
        request_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if request_id not in shipping_requests:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    request = shipping_requests[request_id]
    user_id = callback.from_user.id
    
    if request.get('exporter_id') != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –û—Ç–º–µ–Ω—è–µ–º –∑–∞—è–≤–∫—É
    request['status'] = 'cancelled'
    request['cancelled_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # –û—Ç–∫–ª–æ–Ω—è–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    cancelled_offers = 0
    for offer_id, offer in logistic_offers.items():
        if offer.get('request_id') == request_id and offer.get('status') == 'pending':
            offer['status'] = 'rejected'
            offer['rejected_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            offer['rejection_reason'] = '–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–æ–º'
            cancelled_offers += 1
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ª–æ–≥–∏—Å—Ç–∞
            logist_id = offer.get('logist_id')
            if logist_id:
                asyncio.create_task(
                    notify_logistic_request_cancelled(request_id, '–ó–∞–∫–∞–∑—á–∏–∫ –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É')
                )
    
    save_shipping_requests()
    save_logistic_offers()
    
    text = f"‚úÖ <b>–ó–ê–Ø–í–ö–ê #{request_id} –û–¢–ú–ï–ù–ï–ù–ê</b>\n\n"
    text += f"–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n"
    
    if cancelled_offers > 0:
        text += f"\nüì¨ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {cancelled_offers}\n"
        text += f"–õ–æ–≥–∏—Å—Ç—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_shipping_requests"))
    keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    logging.info(f"‚ùå –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä {user_id} –æ—Ç–º–µ–Ω–∏–ª –∑–∞—è–≤–∫—É #{request_id}")


# ============================================================================
# –≠–ö–°–ü–û–†–¢–Å–†: –ü–†–û–°–ú–û–¢–† –î–û–°–¢–ê–í–û–ö
# ============================================================================

@dp.callback_query_handler(lambda c: c.data == 'exporter_deliveries', state='*')
async def show_exporter_deliveries(callback: types.CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    my_deliveries = [
        (deliv_id, deliv) for deliv_id, deliv in deliveries.items()
        if deliv.get('exporter_id') == user_id
    ]
    
    if not my_deliveries:
        text = "üì¶ <b>–ú–û–ò –î–û–°–¢–ê–í–ö–ò</b>\n\n"
        text += "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∞–≤–æ–∫\n\n"
        text += "<i>–î–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ª–æ–≥–∏—Å—Ç–æ–≤</i>"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_shipping_requests"))
        keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    by_status = {
        'pending': [],
        'in_progress': [],
        'completed': [],
        'cancelled': []
    }
    
    for deliv_id, deliv in my_deliveries:
        status = deliv.get('status', 'pending')
        if status in by_status:
            by_status[status].append((deliv_id, deliv))
    
    text = f"üì¶ <b>–ú–û–ò –î–û–°–¢–ê–í–ö–ò</b>\n\n"
    text += f"–í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: <b>{len(my_deliveries)}</b>\n\n"
    
    pending = len(by_status['pending'])
    in_progress = len(by_status['in_progress'])
    completed = len(by_status['completed'])
    
    text += f"üïê –û–∂–∏–¥–∞—é—Ç –Ω–∞—á–∞–ª–∞: <b>{pending}</b>\n"
    text += f"üöö –í –ø—É—Ç–∏: <b>{in_progress}</b>\n"
    text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω—ã: <b>{completed}</b>\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É:"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫–∏
    for status_key, status_name, emoji in [
        ('pending', '–û–∂–∏–¥–∞—é—Ç', 'üïê'),
        ('in_progress', '–í –ø—É—Ç–∏', 'üöö'),
        ('completed', '–ó–∞–≤–µ—Ä—à–µ–Ω—ã', '‚úÖ')
    ]:
        delivs = by_status[status_key]
        if delivs:
            for deliv_id, deliv in delivs[:5]:
                route = f"{deliv.get('route_from', '')} ‚Üí {deliv.get('route_to', '')}"
                volume = deliv.get('volume', 0)
                
                button_text = f"{emoji} #{deliv_id} | {route[:20]} | {volume:.0f}—Ç"
                
                keyboard.add(
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"view_delivery_{deliv_id}"
                    )
                )
    
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="exporter_deliveries")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('view_delivery_by_request_'), state='*')
async def view_delivery_by_request(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ ID –∑–∞—è–≤–∫–∏"""
    await state.finish()
    
    try:
        request_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ request_id
    delivery = None
    delivery_id = None
    for deliv_id, deliv in deliveries.items():
        if deliv.get('request_id') == request_id:
            delivery = deliv
            delivery_id = deliv_id
            break
    
    if not delivery:
        await callback.answer("‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç–∞–≤–∫–∏
    await bot.answer_callback_query(callback.id)
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text="üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...",
        parse_mode='HTML'
    )
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π callback –¥–ª—è view_delivery
    new_callback = types.CallbackQuery(
        id=callback.id,
        from_user=callback.from_user,
        message=callback.message,
        chat_instance=callback.chat_instance,
        data=f"view_delivery_{delivery_id}"
    )
    
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å view_delivery –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç)
    # –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º ID
    text = f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id}\n\n–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"view_my_request_{request_id}"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')


# ============================================================================
# –≠–ö–°–ü–û–†–¢–Å–†: –û–¶–ï–ù–ö–ê –ò –û–¢–ó–´–í–´ –õ–û–ì–ò–°–¢–û–í
# ============================================================================

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
logistic_ratings = {}  # {logist_id: {'total_rating': 0, 'count': 0, 'reviews': []}}


def save_logistic_ratings():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ –ª–æ–≥–∏—Å—Ç–æ–≤"""
    try:
        with open(os.path.join(DATA_DIR, 'logistic_ratings.pkl'), 'wb') as f:
            pickle.dump(logistic_ratings, f)
        logging.info("‚úÖ Logistic ratings saved")
    except Exception as e:
        logging.error(f"‚ùå Error saving logistic ratings: {e}")


def load_logistic_ratings():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ –ª–æ–≥–∏—Å—Ç–æ–≤"""
    global logistic_ratings
    try:
        filepath = os.path.join(DATA_DIR, 'logistic_ratings.pkl')
        if os.path.exists(filepath):
            with open(filepath, 'rb') as f:
                logistic_ratings = pickle.load(f)
            logging.info(f"‚úÖ Loaded {len(logistic_ratings)} logistic ratings")
        else:
            logistic_ratings = {}
    except Exception as e:
        logging.error(f"‚ùå Error loading logistic ratings: {e}")
        logistic_ratings = {}


class RateLogisticStatesGroup(StatesGroup):
    """FSM –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ª–æ–≥–∏—Å—Ç–∞"""
    delivery_id = State()
    rating = State()
    review = State()


@dp.callback_query_handler(lambda c: c.data.startswith('rate_logistic_'), state='*')
async def rate_logistic_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ü–µ–Ω–∫–∏ –ª–æ–≥–∏—Å—Ç–∞"""
    await state.finish()
    
    try:
        delivery_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID", show_alert=True)
        return
    
    if delivery_id not in deliveries:
        await callback.answer("‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    delivery = deliveries[delivery_id]
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    if delivery.get('exporter_id') != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    if delivery.get('status') != 'completed':
        await callback.answer("‚ùå –ú–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É", show_alert=True)
        return
    
    if delivery.get('rated'):
        await callback.answer("‚ùå –í—ã —É–∂–µ –æ—Ü–µ–Ω–∏–ª–∏ —ç—Ç—É –¥–æ—Å—Ç–∞–≤–∫—É", show_alert=True)
        return
    
    await state.update_data(delivery_id=delivery_id)
    
    logist_id = delivery.get('logist_id')
    logist_info = users.get(logist_id, {})
    logist_name = logist_info.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    text = f"‚≠ê <b>–û–¶–ï–ù–ö–ê –õ–û–ì–ò–°–¢–ê</b>\n\n"
    text += f"üöö –õ–æ–≥–∏—Å—Ç: <b>{logist_name}</b>\n"
    text += f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id}\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "<b>–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É —Ä–∞–±–æ—Ç–µ –ª–æ–≥–∏—Å—Ç–∞:</b>\n\n"
    text += "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê ‚Äî –û—Ç–ª–∏—á–Ω–æ\n"
    text += "‚≠ê‚≠ê‚≠ê‚≠ê ‚Äî –•–æ—Ä–æ—à–æ\n"
    text += "‚≠ê‚≠ê‚≠ê ‚Äî –ù–æ—Ä–º–∞–ª—å–Ω–æ\n"
    text += "‚≠ê‚≠ê ‚Äî –ü–ª–æ—Ö–æ\n"
    text += "‚≠ê ‚Äî –û—á–µ–Ω—å –ø–ª–æ—Ö–æ"
    
    keyboard = InlineKeyboardMarkup(row_width=5)
    keyboard.add(
        InlineKeyboardButton("‚≠ê", callback_data="rate_1"),
        InlineKeyboardButton("‚≠ê‚≠ê", callback_data="rate_2"),
        InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data="rate_3"),
        InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_4"),
        InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rate_5")
    )
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="exporter_deliveries"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await RateLogisticStatesGroup.rating.set()
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('rate_'), state=RateLogisticStatesGroup.rating)
async def rate_logistic_rating_selected(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –æ—Ü–µ–Ω–∫–∏"""
    
    try:
        rating = int(callback.data.split('_')[1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if rating < 1 or rating > 5:
        await callback.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞", show_alert=True)
        return
    
    await state.update_data(rating=rating)
    
    data = await state.get_data()
    delivery_id = data.get('delivery_id')
    
    stars = "‚≠ê" * rating
    
    text = f"{stars} <b>–û–¶–ï–ù–ö–ê: {rating}/5</b>\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "<b>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –ª–æ–≥–∏—Å—Ç–∞</b>\n"
    text += "<i>(–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)</i>\n\n"
    text += "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
    text += "‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞\n"
    text += "‚Ä¢ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥\n"
    text += "‚Ä¢ –ì—Ä—É–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ü–µ–ª–æ—Å—Ç–∏\n\n"
    text += "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_review"))
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="exporter_deliveries"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await RateLogisticStatesGroup.review.set()
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == 'skip_review', state=RateLogisticStatesGroup.review)
async def rate_logistic_skip_review(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–∑—ã–≤"""
    await rate_logistic_save(callback, state, None)


@dp.message_handler(state=RateLogisticStatesGroup.review)
async def rate_logistic_review_entered(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –æ—Ç–∑—ã–≤–∞"""
    review = message.text.strip()
    
    if len(review) > 500:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–∑—ã–≤ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤)!\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä–æ—á–µ:")
        return
    
    # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π callback
    class FakeCallback:
        def __init__(self, user_id, message):
            self.from_user = type('obj', (object,), {'id': user_id})
            self.message = message
            
        async def answer(self, text="", show_alert=False):
            pass
    
    fake_callback = FakeCallback(message.from_user.id, message)
    await rate_logistic_save(fake_callback, state, review)


async def rate_logistic_save(callback_or_fake, state: FSMContext, review: str = None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∏ –æ—Ç–∑—ã–≤–∞"""
    
    data = await state.get_data()
    delivery_id = data.get('delivery_id')
    rating = data.get('rating')
    
    user_id = callback_or_fake.from_user.id
    
    if delivery_id not in deliveries:
        if hasattr(callback_or_fake, 'answer'):
            await callback_or_fake.answer("‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    delivery = deliveries[delivery_id]
    logist_id = delivery.get('logist_id')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É –≤ –¥–æ—Å—Ç–∞–≤–∫–µ
    delivery['rated'] = True
    delivery['rating'] = rating
    if review:
        delivery['review'] = review
    delivery['rated_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –ª–æ–≥–∏—Å—Ç–∞
    if logist_id not in logistic_ratings:
        logistic_ratings[logist_id] = {
            'total_rating': 0,
            'count': 0,
            'reviews': []
        }
    
    logistic_ratings[logist_id]['total_rating'] += rating
    logistic_ratings[logist_id]['count'] += 1
    
    if review:
        logistic_ratings[logist_id]['reviews'].append({
            'delivery_id': delivery_id,
            'exporter_id': user_id,
            'rating': rating,
            'review': review,
            'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        })
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    avg_rating = logistic_ratings[logist_id]['total_rating'] / logistic_ratings[logist_id]['count']
    
    save_deliveries()
    save_logistic_ratings()
    
    logist_info = users.get(logist_id, {})
    logist_name = logist_info.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    stars = "‚≠ê" * rating
    
    text = f"‚úÖ <b>–°–ü–ê–°–ò–ë–û –ó–ê –û–¶–ï–ù–ö–£!</b>\n\n"
    text += f"{stars} <b>{rating}/5</b>\n\n"
    text += f"üöö –õ–æ–≥–∏—Å—Ç: {logist_name}\n"
    text += f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ #{delivery_id}\n\n"
    
    if review:
        text += f"üí¨ –í–∞—à –æ—Ç–∑—ã–≤:\n<i>{review}</i>\n\n"
    
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += f"üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –ª–æ–≥–∏—Å—Ç–∞: <b>{avg_rating:.1f}/5</b>\n"
    text += f"üìã –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {logistic_ratings[logist_id]['count']}\n\n"
    text += "–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üì¶ –ú–æ–∏ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="exporter_deliveries"))
    keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    if hasattr(callback_or_fake.message, 'edit_text'):
        try:
            await callback_or_fake.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        except:
            await callback_or_fake.message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    else:
        await callback_or_fake.message.answer(text, reply_markup=keyboard, parse_mode='HTML')
    
    await state.finish()
    
    logging.info(f"‚≠ê –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä {user_id} –æ—Ü–µ–Ω–∏–ª –ª–æ–≥–∏—Å—Ç–∞ {logist_id} –Ω–∞ {rating}/5")


@dp.callback_query_handler(lambda c: c.data.startswith('view_logistic_profile_'), state='*')
async def view_logistic_profile(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ –ª–æ–≥–∏—Å—Ç–∞"""
    await state.finish()
    
    try:
        logist_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if logist_id not in users:
        await callback.answer("‚ùå –õ–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    logist_info = users[logist_id]
    
    text = f"üöö <b>–ü–†–û–§–ò–õ–¨ –õ–û–ì–ò–°–¢–ê</b>\n\n"
    text += f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: <b>{logist_info.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
    text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {logist_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    
    if logist_info.get('email'):
        text += f"üìß Email: {logist_info.get('email')}\n"
    
    text += f"\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –†–µ–π—Ç–∏–Ω–≥
    if logist_id in logistic_ratings:
        rating_data = logistic_ratings[logist_id]
        avg_rating = rating_data['total_rating'] / rating_data['count']
        stars = "‚≠ê" * int(round(avg_rating))
        
        text += f"<b>üìä –†–ï–ô–¢–ò–ù–ì:</b>\n"
        text += f"{stars} <b>{avg_rating:.1f}/5</b>\n"
        text += f"üìã –û—Ü–µ–Ω–æ–∫: {rating_data['count']}\n\n"
    else:
        text += f"<b>üìä –†–ï–ô–¢–ò–ù–ì:</b>\n"
        text += f"–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–æ–∫
    logist_deliveries = [
        d for d in deliveries.values()
        if d.get('logist_id') == logist_id
    ]
    
    completed = len([d for d in logist_deliveries if d.get('status') == 'completed'])
    in_progress = len([d for d in logist_deliveries if d.get('status') == 'in_progress'])
    
    text += f"<b>üì¶ –°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\n"
    text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ç–∞–≤–æ–∫: {completed}\n"
    text += f"üöö –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {in_progress}\n"
    text += f"üìã –í—Å–µ–≥–æ: {len(logist_deliveries)}\n\n"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã
    if logist_id in logistic_ratings and logistic_ratings[logist_id]['reviews']:
        text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        text += f"<b>üí¨ –ü–û–°–õ–ï–î–ù–ò–ï –û–¢–ó–´–í–´:</b>\n\n"
        
        reviews = logistic_ratings[logist_id]['reviews'][-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
        for r in reversed(reviews):
            stars = "‚≠ê" * r['rating']
            text += f"{stars} {r['rating']}/5\n"
            text += f"<i>{r['review']}</i>\n"
            text += f"<code>{r['date']}</code>\n\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

# ============================================================================
# –≠–ö–°–ü–ï–î–ò–¢–û–†: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø–ú–ò –ò –ó–ê–ü–†–û–°–ê–ú–ò
# ============================================================================

@dp.callback_query_handler(lambda c: c.data == 'expeditor_my_offers', state='*')
async def show_expeditor_my_offers(callback: types.CallbackQuery, state: FSMContext):
    """–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    my_offers = [
        (offer_id, offer) for offer_id, offer in expeditor_offers.items()
        if offer.get('expeditor_id') == user_id
    ]
    
    if not my_offers:
        text = "üìã <b>–ú–û–ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –£–°–õ–£–ì</b>\n\n"
        text += "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n\n"
        text += "<i>–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ '–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'</i>"
        
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="create_expeditor_offer"))
        keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer()
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    by_status = {
        'active': [],
        'selected': [],
        'cancelled': []
    }
    
    for offer_id, offer in my_offers:
        status = offer.get('status', 'active')
        if status in by_status:
            by_status[status].append((offer_id, offer))
    
    text = f"üìã <b>–ú–û–ò –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –£–°–õ–£–ì</b>\n\n"
    text += f"–í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <b>{len(my_offers)}</b>\n\n"
    
    active = len(by_status['active'])
    selected = len(by_status['selected'])
    
    text += f"üÜï –ê–∫—Ç–∏–≤–Ω—ã–µ: <b>{active}</b>\n"
    text += f"‚úÖ –í—ã–±—Ä–∞–Ω—ã: <b>{selected}</b>\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    for status_key, status_name, emoji in [
        ('active', '–ê–∫—Ç–∏–≤–Ω—ã–µ', 'üÜï'),
        ('selected', '–í—ã–±—Ä–∞–Ω—ã', '‚úÖ')
    ]:
        offers = by_status[status_key]
        if offers:
            for offer_id, offer in offers[:5]:
                service = offer.get('service_type', '–£—Å–ª—É–≥–∞')
                ports = offer.get('ports', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')
                price = offer.get('price', 0)
                
                button_text = f"{emoji} #{offer_id} | {service[:20]} | {price:,.0f}‚ÇΩ"
                
                keyboard.add(
                    InlineKeyboardButton(
                        button_text,
                        callback_data=f"view_expeditor_offer_{offer_id}"
                    )
                )
    
    keyboard.add(
        InlineKeyboardButton("‚ûï –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="create_expeditor_offer")
    )
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="expeditor_my_offers")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('view_expeditor_offer_'), state='*')
async def view_expeditor_offer_details(callback: types.CallbackQuery, state: FSMContext):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.finish()
    
    try:
        offer_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID", show_alert=True)
        return
    
    if offer_id not in expeditor_offers:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    offer = expeditor_offers[offer_id]
    user_id = callback.from_user.id
    
    if offer.get('expeditor_id') != user_id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", show_alert=True)
        return
    
    text = f"üìã <b>–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï #{offer_id}</b>\n\n"
    text += f"üì¶ –£—Å–ª—É–≥–∞: <b>{offer.get('service_type', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
    text += f"üö¢ –ü–æ—Ä—Ç—ã: {offer.get('ports', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
    text += f"üí∞ –¶–µ–Ω–∞: <b>{offer.get('price', 0):,.0f} ‚ÇΩ</b>\n"
    text += f"üìÖ –°—Ä–æ–∫–∏: {offer.get('terms', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n\n"
    
    if offer.get('description'):
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n<i>{offer.get('description')}</i>\n\n"
    
    text += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {offer.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –°—Ç–∞—Ç—É—Å
    status = offer.get('status', 'active')
    
    if status == 'active':
        text += "üìä –°—Ç–∞—Ç—É—Å: <b>üÜï –ê–∫—Ç–∏–≤–Ω–æ</b>\n"
        text += "–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–∏–¥–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º"
    elif status == 'selected':
        text += "üìä –°—Ç–∞—Ç—É—Å: <b>‚úÖ –í—ã–±—Ä–∞–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–º</b>\n"
        if offer.get('exporter_id'):
            exporter_info = users.get(offer.get('exporter_id'), {})
            text += f"\nüè¢ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä: {exporter_info.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {exporter_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    elif status == 'cancelled':
        text += "üìä –°—Ç–∞—Ç—É—Å: <b>‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ</b>"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if status == 'active':
        keyboard.add(
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_expeditor_offer_{offer_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_expeditor_offer_{offer_id}")
        )
    
    keyboard.add(
        InlineKeyboardButton("üîô –ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º", callback_data="expeditor_my_offers")
    )
    keyboard.add(
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('cancel_expeditor_offer_'), state='*')
async def cancel_expeditor_offer(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.finish()
    
    try:
        offer_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if offer_id not in expeditor_offers:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    offer = expeditor_offers[offer_id]
    user_id = callback.from_user.id
    
    if offer.get('expeditor_id') != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    if offer.get('status') != 'active':
        await callback.answer("‚ùå –ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", show_alert=True)
        return
    
    # –û—Ç–º–µ–Ω—è–µ–º
    offer['status'] = 'cancelled'
    offer['cancelled_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    save_expeditor_offers()
    
    text = f"‚úÖ <b>–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï #{offer_id} –û–¢–ú–ï–ù–ï–ù–û</b>\n\n"
    text += "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="expeditor_my_offers"))
    keyboard.add(InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    logging.info(f"‚ùå –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä {user_id} –æ—Ç–º–µ–Ω–∏–ª –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{offer_id}")


@dp.callback_query_handler(lambda c: c.data == 'expeditor_available_pulls', state='*')
async def show_expeditor_available_pulls(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—É–ª–æ–≤ –¥–ª—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
    my_offers = [
        offer for offer in expeditor_offers.values()
        if offer.get('expeditor_id') == user_id and offer.get('status') == 'active'
    ]
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    my_ports = set()
    for offer in my_offers:
        ports_str = offer.get('ports', '')
        if ports_str:
            ports_list = [p.strip() for p in ports_str.split(',')]
            my_ports.update([p.lower() for p in ports_list])
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—É–ª—ã
    suitable_pulls = []
    for pull_id, pull in pulls.items():
        if pull.get('status') != 'filled':
            continue
        
        pull_port = pull.get('port', '').lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
        if not my_ports or any(port in pull_port for port in my_ports):
            suitable_pulls.append((pull_id, pull))
    
    if not suitable_pulls:
        text = "üö¢ <b>–î–û–°–¢–£–ü–ù–´–ï –ü–£–õ–´</b>\n\n"
        
        if not my_offers:
            text += "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥\n\n"
            text += "<i>–£–∫–∞–∂–∏—Ç–µ –ø–æ—Ä—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ</i>"
            
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", callback_data="create_expeditor_offer"))
        else:
            text += "‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–ª–æ–≤ –ø–æ –≤–∞—à–∏–º –ø–æ—Ä—Ç–∞–º\n\n"
            text += f"–í–∞—à–∏ –ø–æ—Ä—Ç—ã: <i>{', '.join(my_ports)}</i>"
            
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="expeditor_available_pulls"))
        
        keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
        await callback.answer()
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    suitable_pulls.sort(key=lambda x: x[1].get('created_at', ''), reverse=True)
    
    text = f"üö¢ <b>–î–û–°–¢–£–ü–ù–´–ï –ü–£–õ–´</b>\n\n"
    text += f"–ù–∞–π–¥–µ–Ω–æ –ø—É–ª–æ–≤: <b>{len(suitable_pulls)}</b>\n"
    
    if my_ports:
        text += f"–í–∞—à–∏ –ø–æ—Ä—Ç—ã: <i>{', '.join(my_ports)}</i>\n"
    
    text += "\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª:"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for pull_id, pull in suitable_pulls[:10]:
        culture = pull.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        volume = pull.get('current_volume', 0)
        port = pull.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        button_text = f"üì¶ #{pull_id} | {culture} {volume:.0f}—Ç | {port}"
        
        keyboard.add(
            InlineKeyboardButton(
                button_text,
                callback_data=f"view_pull_for_expeditor_{pull_id}"
            )
        )
    
    if len(suitable_pulls) > 10:
        keyboard.add(
            InlineKeyboardButton(
                f"‚ûï –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë {len(suitable_pulls) - 10}",
                callback_data="show_more_pulls_expeditor"
            )
        )
    
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="expeditor_available_pulls")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('view_pull_for_expeditor_'), state='*')
async def view_pull_for_expeditor(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—É–ª–∞ –¥–ª—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.finish()
    
    try:
        pull_id = int(callback.data.split('_')[-1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID", show_alert=True)
        return
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    
    text = f"üì¶ <b>–ü–£–õ #{pull_id}</b>\n\n"
    text += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: <b>{pull.get('culture', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}</b>\n"
    text += f"üì¶ –û–±—ä—ë–º: <b>{pull.get('current_volume', 0):.1f} —Ç</b>\n"
    text += f"üö¢ –ü–æ—Ä—Ç –æ—Ç–≥—Ä—É–∑–∫–∏: {pull.get('port', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üìÖ –î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏: {pull.get('shipment_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–µ
    exporter_id = pull.get('exporter_id')
    if exporter_id:
        exporter_info = users.get(exporter_id, {})
        text += f"<b>üè¢ –≠–ö–°–ü–û–†–¢–Å–†:</b>\n"
        text += f"–ö–æ–º–ø–∞–Ω–∏—è: {exporter_info.get('company_name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {exporter_info.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        if exporter_info.get('email'):
            text += f"Email: {exporter_info.get('email')}\n"
        text += "\n"
    
    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    text += "üí° <b>–î–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞:</b>\n"
    text += "–°–≤—è–∂–∏—Ç–µ—Å—å —Å —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é\n"
    text += "–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ª—É–≥"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="expeditor_my_offers")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ö –ø—É–ª–∞–º", callback_data="expeditor_available_pulls")
    )
    keyboard.add(
        InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


@dp.callback_query_handler(lambda c: c.data == 'expeditor_statistics', state='*')
async def show_expeditor_statistics(callback: types.CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    my_offers = [
        offer for offer in expeditor_offers.values()
        if offer.get('expeditor_id') == user_id
    ]
    
    total_offers = len(my_offers)
    active_offers = len([o for o in my_offers if o.get('status') == 'active'])
    selected_offers = len([o for o in my_offers if o.get('status') == 'selected'])
    
    # –ü–æ–¥—Å—á—ë—Ç –ø—É–ª–æ–≤ –ø–æ –ø–æ—Ä—Ç–∞–º
    ports_dict = {}
    for offer in my_offers:
        ports_str = offer.get('ports', '')
        if ports_str:
            for port in ports_str.split(','):
                port = port.strip()
                ports_dict[port] = ports_dict.get(port, 0) + 1
    
    text = f"üìä <b>–ú–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê</b>\n\n"
    text += f"<b>–ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø:</b>\n"
    text += f"üìã –í—Å–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: <b>{total_offers}</b>\n"
    text += f"üÜï –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{active_offers}</b>\n"
    text += f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: <b>{selected_offers}</b>\n\n"
    
    if selected_offers > 0 and total_offers > 0:
        success_rate = (selected_offers / total_offers) * 100
        text += f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: <b>{success_rate:.1f}%</b>\n\n"
    
    if ports_dict:
        text += f"<b>–ü–û–†–¢–´:</b>\n"
        for port, count in sorted(ports_dict.items(), key=lambda x: x[1], reverse=True)[:5]:
            text += f"üö¢ {port}: {count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
        text += "\n"
    
    # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ —É—Å–ª—É–≥
    prices = [o.get('price', 0) for o in my_offers if o.get('price')]
    if prices:
        avg_price = sum(prices) / len(prices)
        text += f"<b>–¶–ï–ù–û–û–ë–†–ê–ó–û–í–ê–ù–ò–ï:</b>\n"
        text += f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: <b>{avg_price:,.0f} ‚ÇΩ</b>\n"
        text += f"üíµ –ú–∏–Ω. —Ü–µ–Ω–∞: {min(prices):,.0f} ‚ÇΩ\n"
        text += f"üí∏ –ú–∞–∫—Å. —Ü–µ–Ω–∞: {max(prices):,.0f} ‚ÇΩ\n"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="expeditor_my_offers"))
    keyboard.add(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="expeditor_statistics"))
    keyboard.add(InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()


if __name__ == '__main__':
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        os.makedirs('data', exist_ok=True)
        os.makedirs('logs', exist_ok=True)
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")
    
    # –ó–ê–ü–£–°–ö (–≠–¢–û –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ü–û–°–õ–ï–î–ù–Ø–Ø –°–¢–†–û–ö–ê!)
    from aiogram import executor
    executor.start_polling(
        dp, 
        skip_updates=True, 
        on_startup=on_startup, 
        on_shutdown=on_shutdown
    )

# –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
load_users_from_pickle()
