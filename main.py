import warnings
warnings.filterwarnings("ignore", message=".*LibreSSL.*")
warnings.filterwarnings("ignore", message=".*NotOpenSSLWarning.*")
warnings.filterwarnings("ignore", category=UserWarning, module='urllib3')

import os
import logging
import requests
import time
import asyncio
import re
import json
import pickle
import pandas as pd
from datetime import timedelta, datetime
from bs4 import BeautifulSoup
from collections import defaultdict
from pathlib import Path

from aiogram import Bot, Dispatcher, types
from aiogram.utils.exceptions import MessageNotModified
from aiogram.types import (
    ReplyKeyboardMarkup, InlineKeyboardMarkup, 
    InlineKeyboardButton, KeyboardButton, CallbackQuery
)
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler

try:
    import gspread
    from google.oauth2.service_account import Credentials
    GOOGLE_SHEETS_AVAILABLE = True
except ImportError:
    GOOGLE_SHEETS_AVAILABLE = False
    logging.warning("‚ö†Ô∏è Google Sheets –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)


API_TOKEN = os.getenv('BOT_TOKEN', '8180339161:AAFRk8446gKMagAkUTGjGyFDTFHa__mVOY0')
ADMIN_ID = int(os.getenv('ADMIN_ID', '1481790360'))

CONFIG = {
    'timeout': 15,
    'cache_ttl': 1800,
    'fallback_prices': {
        '–ü—à–µ–Ω–∏—Ü–∞': 15650,
        '–Ø—á–º–µ–Ω—å': 13300,
        '–ö—É–∫—É—Ä—É–∑–∞': 14000,
        '–°–æ—è': 40900,
        '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫': 38600
    },
    'south_regions': ['–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–†–æ—Å—Ç–æ–≤', '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å', '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å'],
    'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
}

DATA_DIR = 'data'
LOGS_DIR = 'logs'

USERS_FILE = 'data/users.json'
BATCHES_FILE = 'data/batches.pkl'
PULLS_FILE = 'data/pulls.pkl'
PRICES_FILE = 'data/prices.json'
NEWS_FILE = 'data/news.json'

GOOGLE_SHEETS_CREDENTIALS = 'credentials.json'
SPREADSHEET_ID = "1DywxtuWW4-1Q0O71ajVaBB5Ih15nZjA4rvlpV7P7NOA"

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

users = {}
farmer_batches = {}
pulls = {}
pull_participants = {}
logistics_offers = {}
expeditor_offers = {}
deals = {}
matches = {}   

batch_counter = 0
pull_counter = 0
deal_counter = 0
match_counter = 0

prices_cache = {'data': {}, 'updated': None}
news_cache = {'data': [], 'updated': None}
last_prices_update = None
last_news_update = None

scheduler = AsyncIOScheduler()

ROLES = {
    'farmer': 'üåæ –§–µ—Ä–º–µ—Ä',
    'exporter': 'üì¶ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä',
    'logistic': 'üöö –õ–æ–≥–∏—Å—Ç',
    'expeditor': 'üöõ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä'
}

CULTURES = ['–ü—à–µ–Ω–∏—Ü–∞', '–Ø—á–º–µ–Ω—å', '–ö—É–∫—É—Ä—É–∑–∞', '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫', '–†–∞–ø—Å', '–°–æ—è']

QUALITY_CLASSES = ['1 –∫–ª–∞—Å—Å', '2 –∫–ª–∞—Å—Å', '3 –∫–ª–∞—Å—Å', '4 –∫–ª–∞—Å—Å', '5 –∫–ª–∞—Å—Å']

STORAGE_TYPES = ['–≠–ª–µ–≤–∞—Ç–æ—Ä', '–°–∫–ª–∞–¥', '–ù–∞–ø–æ–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ', '–°–∏–ª–æ—Å']

DEAL_STATUSES = {
    'pending': 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
    'matched': 'üéØ –ù–∞–π–¥–µ–Ω –ø–∞—Ä—Ç–Ω—ë—Ä', 
    'shipping': 'üöõ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–∑–∫–∏',
    'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞',
    'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞'
}

class RegistrationStatesGroup(StatesGroup):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    name = State()
    phone = State()
    email = State()
    inn = State()
    company_details = State()
    region = State()
    role = State()

class AddBatch(StatesGroup):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ —Ñ–µ—Ä–º–µ—Ä–æ–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏"""
    culture = State()
    region = State()
    volume = State()
    price = State()
    humidity = State()
    impurity = State()
    quality_class = State()
    storage_type = State()
    readiness_date = State()

class EditBatch(StatesGroup):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏"""
    field = State()
    new_value = State()

class DeleteBatch(StatesGroup):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏"""
    confirmation = State()

class EditProfile(StatesGroup):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    field = State()
    new_value = State()

class CreatePull(StatesGroup):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–º"""
    culture = State()
    volume = State()
    price = State()
    port = State()
    moisture = State()
    nature = State()
    impurity = State()
    weed = State()
    documents = State()
    doc_type = State()

class JoinPullStatesGroup(StatesGroup):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–µ—Ä–º–µ—Ä–∞ –∫ –ø—É–ª—É"""
    select_pull = State()
    select_batch = State()
    enter_volume = State()
    confirm_join = State()

class LogisticsOffer(StatesGroup):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞"""
    transport_type = State()
    route_from = State()
    route_to = State()
    price_per_ton = State()
    delivery_days = State()
    additional_info = State()

class ExpeditorOffer(StatesGroup):
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    services = State()
    price = State()
    terms_days = State()
    additional_info = State()

class Broadcast(StatesGroup):
    """–†–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞"""
    message = State()
    confirm = State()

class AdminStats(StatesGroup):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞"""
    period = State()

class ExportData(StatesGroup):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–º"""
    data_type = State()

class EditPullStatesGroup(StatesGroup):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–º"""
    select_pull = State()
    select_field = State()
    edit_culture = State()
    edit_volume = State()
    edit_price = State()
    edit_port = State()
    edit_region = State()
    edit_moisture = State()
    edit_nature = State()
    edit_impurity = State()
    edit_weed = State()
    confirm_changes = State()

class SearchBatchesStatesGroup(StatesGroup):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π"""
    select_criteria = State()
    enter_culture = State()
    enter_region = State()
    enter_min_volume = State()
    enter_max_volume = State()
    enter_min_price = State()
    enter_max_price = State()
    enter_quality_class = State()
    enter_storage_type = State()
    show_results = State()

class AttachFilesStatesGroup(StatesGroup):
    """–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫ –ø–∞—Ä—Ç–∏–∏"""
    select_batch = State()
    upload_files = State()
    confirm_upload = State()

class ShippingRequestStatesGroup(StatesGroup):
    """–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É"""
    pull_id = State()
    route_from = State()
    route_to = State()
    volume = State()
    culture = State()
    desired_date = State()

def validate_phone(phone):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    cleaned = re.sub(r'[\s\-\(\)\+]', '', phone)
    return len(cleaned) >= 10 and cleaned.isdigit()

def validate_email(email):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è email"""
    return re.match(r'^[\w\.-]+@[\w\.-]+\.\w+$', email) is not None

def validate_inn(inn):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù"""
    return inn.isdigit() and len(inn) in [10, 12]

def validate_volume(volume):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–º–∞"""
    try:
        vol = float(volume)
        return vol > 0
    except ValueError:
        return False

def validate_price(price):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã"""
    try:
        pr = float(price)
        return pr > 0
    except ValueError:
        return False

def validate_percentage(value):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        val = float(value)
        return 0 <= val <= 100
    except ValueError:
        return False

def validate_date(date_str):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã"""
    try:
        datetime.strptime(date_str, '%d.%m.%Y')
        return True
    except ValueError:
        return False

def get_farmer_menu():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é")
    keyboard.row("üîß –ú–æ–∏ –ø–∞—Ä—Ç–∏–∏", "üéØ –ü—É–ª—ã")
    keyboard.row("üîç –ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤", "üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏")
    keyboard.row("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    keyboard.add("üìà –¶–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ", "üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞")
    return keyboard

def get_exporter_menu():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø—É–ª"),
        KeyboardButton("üì¶ –ú–æ–∏ –ø—É–ª—ã")
    )
    keyboard.add(
        KeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–∏–∏"),
        KeyboardButton("üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏")
    )
    keyboard.add(
        KeyboardButton("üöö –ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É"),
        KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    )
    keyboard.add(
        KeyboardButton("üìà –¶–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ"),
        KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞")
    )
    return keyboard

def get_logistic_menu():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("üöö –ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞"),
        KeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏")
    )
    keyboard.add(
        KeyboardButton("üíº –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
        KeyboardButton("üìã –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏")
    )
    keyboard.add(
        KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton("üìà –¶–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ")
    )
    keyboard.add(KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"))
    return keyboard

def get_expeditor_menu():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞ (–±—Ä–æ–∫–µ—Ä–∞)"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("üöõ –ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞"),
        KeyboardButton("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏")
    )
    keyboard.add(
        KeyboardButton("üíº –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"),
        KeyboardButton("üìã –ú–æ–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è")
    )
    keyboard.add(
        KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"),
        KeyboardButton("üìà –¶–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ")
    )
    keyboard.add(KeyboardButton("üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞"))
    return keyboard

def admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"),
        KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    keyboard.add(
        KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞"),
        KeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    )
    keyboard.add(
        KeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã"),
        KeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
    )
    keyboard.add(KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    return keyboard

def joinpull_keyboard(pull_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—É–ª—É"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"confirm_joinpull:{pull_id}"),
        InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –ø–∞—Ä—Ç–∏—é", callback_data=f"select_batch_for_pull:{pull_id}"),
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_pools_list")
    )
    return keyboard

def get_pull_details_keyboard(pull_id, user_id, pull):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—É–ª–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if user_id == pull.get('exporter_id'):
        keyboard.add(
            InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"viewparticipants:{pull_id}"),
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"editpull:{pull_id}")
        )
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ó–∞–∫—Ä—ã—Ç—å –ø—É–ª", callback_data=f"closepull:{pull_id}"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"deletepull:{pull_id}")
        )

    elif user_id in users and users[user_id].get('role') == 'farmer':
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"joinpull:{pull_id}")
        )
        keyboard.add(
            InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"viewparticipants:{pull_id}")
        )
    
    else:
        keyboard.add(
            InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"viewparticipants:{pull_id}")
        )
    
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_pools")
    )
    
    return keyboard

def logistics_offer_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üöõ –§—É—Ä–∞", callback_data="transport_type:truck"),
        InlineKeyboardButton("üöÇ –ñ/–î", callback_data="transport_type:train"),
        InlineKeyboardButton("üö¢ –°—É–¥–Ω–æ", callback_data="transport_type:ship")
    )
    return keyboard

def admin_broadcast_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="broadcast_confirm"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="broadcast_cancel")
    )
    return keyboard

def culture_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—É–ª—å—Ç—É—Ä—ã"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    for culture in CULTURES:
        keyboard.add(
            InlineKeyboardButton(culture, callback_data=f"culture:{culture}")
        )
    return keyboard

def region_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    regions = [
        '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π', '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π', '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–û—Ä–µ–Ω–±—É—Ä–≥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        '–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π', '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å'
    ]
    for region in regions:
        keyboard.add(
            InlineKeyboardButton(region, callback_data=f"region:{region}")
        )
    return keyboard

def port_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä—Ç–∞"""
    keyboard = InlineKeyboardMarkup(row_width=1)
    ports = [
        '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å', '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫', '–ê–∑–æ–≤', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', 
        '–¢–∞–º–∞–Ω—å', '–ö–∞–≤–∫–∞–∑', '–¢—É–∞–ø—Å–µ', '–ü–æ—Ä—Ç –û–ª—è'
    ]
    for i, port in enumerate(ports):
        keyboard.add(
            InlineKeyboardButton(port, callback_data=f"port:{i}")
        )
    return keyboard

def quality_class_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    for quality_class in QUALITY_CLASSES:
        keyboard.add(
            InlineKeyboardButton(quality_class, callback_data=f"quality:{quality_class}")
        )
    return keyboard

def storage_type_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    for storage_type in STORAGE_TYPES:
        keyboard.add(
            InlineKeyboardButton(storage_type, callback_data=f"storage:{storage_type}")
        )
    return keyboard

def confirm_keyboard(action="confirm"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm:{action}"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"cancel:{action}")
    )
    return keyboard

def batch_actions_keyboard(batch_id):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'edit_batch:{batch_id}'),
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_batch:{batch_id}')
    )
    keyboard.add(
        InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data=f'attach_files:{batch_id}')
    )
    keyboard.add(
        InlineKeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–∞–π–ª—ã", callback_data=f'view_files:{batch_id}')
    )
    keyboard.add(
        InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤", callback_data=f'find_exporters:{batch_id}')
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ö –º–æ–∏–º –ø–∞—Ä—Ç–∏—è–º", callback_data='back_to_my_batches')
    )
    return keyboard

def edit_batch_fields_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data="edit_field:price"),
        InlineKeyboardButton("üì¶ –û–±—ä—ë–º", callback_data="edit_field:volume")
    )
    keyboard.add(
        InlineKeyboardButton("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å", callback_data="edit_field:humidity"),
        InlineKeyboardButton("üåæ –°–æ—Ä–Ω–æ—Å—Ç—å", callback_data="edit_field:impurity")
    )
    keyboard.add(
        InlineKeyboardButton("‚≠ê –ö–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞", callback_data="edit_field:quality_class"),
        InlineKeyboardButton("üè≠ –¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è", callback_data="edit_field:storage_type")
    )
    keyboard.add(
        InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏", callback_data="edit_field:readiness_date"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="edit_field:status")
    )
    keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")
    )
    return keyboard

def status_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–∞—Ä—Ç–∏–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    statuses = ['–ê–∫—Ç–∏–≤–Ω–∞', '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞', '–ü—Ä–æ–¥–∞–Ω–∞', '–°–Ω—è—Ç–∞ —Å –ø—Ä–æ–¥–∞–∂–∏']
    for status in statuses:
        keyboard.add(
            InlineKeyboardButton(status, callback_data=f"status:{status}")
        )
    return keyboard

def profile_edit_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω", callback_data="edit_profile:phone"),
        InlineKeyboardButton("üìß Email", callback_data="edit_profile:email")
    )
    keyboard.add(
        InlineKeyboardButton("üìç –†–µ–≥–∏–æ–Ω", callback_data="edit_profile:region"),
        InlineKeyboardButton("üè¢ –†–µ–∫–≤–∏–∑–∏—Ç—ã", callback_data="edit_profile:company_details")
    )
    keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")
    )
    return keyboard

def search_criteria_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üåæ –ü–æ –∫—É–ª—å—Ç—É—Ä–µ", callback_data="search_by:culture"),
        InlineKeyboardButton("üìç –ü–æ —Ä–µ–≥–∏–æ–Ω—É", callback_data="search_by:region"),
        InlineKeyboardButton("üì¶ –ü–æ –æ–±—ä—ë–º—É", callback_data="search_by:volume"),
        InlineKeyboardButton("üí∞ –ü–æ —Ü–µ–Ω–µ", callback_data="search_by:price")
    )
    keyboard.add(
        InlineKeyboardButton("‚≠ê –ü–æ –∫–ª–∞—Å—Å—É –∫–∞—á–µ—Å—Ç–≤–∞", callback_data="search_by:quality"),
        InlineKeyboardButton("üè≠ –ü–æ —Ç–∏–ø—É —Ö—Ä–∞–Ω–µ–Ω–∏—è", callback_data="search_by:storage")
    )
    keyboard.add(
        InlineKeyboardButton("üîç –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="search_by:all"),
        InlineKeyboardButton("üéØ –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ", callback_data="search_by:active")
    )
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
    )
    return keyboard

def deal_actions_keyboard(deal_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ —Å–¥–µ–ª–∫–æ–π"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–∞—Ä—Ç–Ω—ë—Ä–∞", callback_data=f"contact_partner:{deal_id}"),
        InlineKeyboardButton("üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞", callback_data=f"logistics:{deal_id}")
    )
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"complete_deal:{deal_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=f"cancel_deal:{deal_id}")
    )
    keyboard.add(
        InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Å–¥–µ–ª–æ–∫", callback_data="back_to_deals")
    )
    return keyboard

def format_news_message():
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏"""
    if not news_cache or not news_cache.get('data'):
        return (
            "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞</b>\n\n"
            "‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç–∏ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        )
    
    news_list = news_cache['data']
    updated_time = news_cache['updated'].strftime("%d.%m.%Y %H:%M") if news_cache.get('updated') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    if not news_list:
        return (
            "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞</b>\n\n"
            "ü§∑‚Äç‚ôÇÔ∏è –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    message = "üì∞ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞</b>\n\n"
    
    for i, news_item in enumerate(news_list[:5], 1):   
        title = news_item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        link = news_item.get('link', '')
        date = news_item.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        if link:
            message += f"{i}. <a href='{link}'>{title}</a>\n"
        else:
            message += f"{i}. {title}\n"
        
        message += f"   üìÖ <i>{date}</i>\n\n"
    
    message += f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_time}"
    
    return message

def format_prices_message():
    """‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ü–µ–Ω–∞–º–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    if not prices_cache or not prices_cache.get('data'):
        return (
            "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ</b>\n\n"
            "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –µ—â—ë –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
        )
    
    updated_time = prices_cache['updated'].strftime("%d.%m.%Y %H:%M") if prices_cache.get('updated') else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    data = prices_cache['data']
    russia = data.get('russia_south', {})
    fob = data.get('fob', 0)
    cbot = data.get('cbot', {})
    
    message = f"üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ</b>\n\n"
    
    if russia:
        message += "üá∑üá∫ <b>–Æ–≥ –†–æ—Å—Å–∏–∏ (—Ä—É–±/—Ç)</b>\n"
        for culture, price in russia.items():
            if isinstance(price, (int, float)):
                message += f"  ‚Ä¢ {culture}: <code>{price:,.0f} ‚ÇΩ/—Ç</code>\n"
            else:
                message += f"  ‚Ä¢ {culture}: <code>{price}</code>\n"
    
    message += f"\nüö¢ <b>FOB –ß–µ—Ä–Ω–æ–µ –º–æ—Ä–µ</b>\n"
    if isinstance(fob, (int, float)):
        message += f"  ‚Ä¢ –ü—à–µ–Ω–∏—Ü–∞: <code>${fob:.2f}/—Ç</code>\n"
    else:
        message += f"  ‚Ä¢ –ü—à–µ–Ω–∏—Ü–∞: <code>{fob}</code>\n"
    
    if cbot:
        message += f"\nüåé <b>CBOT</b>\n"
        for culture, price in cbot.items():
            if price:
                message += f"  ‚Ä¢ {culture}: <code>{price}</code>\n"
    
    message += f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_time}"
    
    return message

def format_farmer_card(farmer_id, batch_id=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–µ—Ä–º–µ—Ä–∞ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    
    if farmer_id not in users:
        return "‚ùå –§–µ—Ä–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    farmer = users[farmer_id]
    
    msg = f"üë§ <b>–§–µ—Ä–º–µ—Ä: {farmer.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</b>\n\n"
    
    msg += "<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
    msg += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{farmer.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
    msg += f"üìß Email: <code>{farmer.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}</code>\n"
    msg += f"üìç –†–µ–≥–∏–æ–Ω: {farmer.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    if farmer.get('inn'):
        msg += f"<b>üè¢ –†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n"
        msg += f"–ò–ù–ù: <code>{farmer.get('inn')}</code>\n"
        if farmer.get('company_details'):
            details = farmer['company_details'][:200]
            msg += f"{details}...\n" if len(farmer['company_details']) > 200 else f"{details}\n"
        msg += "\n"
    
    if batch_id and farmer_id in farmer_batches:
        for batch in farmer_batches[farmer_id]:
            if batch['id'] == batch_id:
                msg += f"<b>üì¶ –ü–∞—Ä—Ç–∏—è #{batch_id}:</b>\n"
                msg += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {batch['culture']}\n"
                msg += f"üì¶ –û–±—ä—ë–º: {batch['volume']} —Ç\n"
                msg += f"üí∞ –¶–µ–Ω–∞: {batch['price']:,.0f} ‚ÇΩ/—Ç\n"
                msg += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {batch['humidity']}%\n"
                msg += f"üåæ –°–æ—Ä–Ω–æ—Å—Ç—å: {batch['impurity']}%\n"
                msg += f"‚≠ê –ö–ª–∞—Å—Å: {batch['quality_class']}\n"
                msg += f"üè≠ –•—Ä–∞–Ω–µ–Ω–∏–µ: {batch['storage_type']}\n"
                msg += f"üìÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {batch['readiness_date']}\n"
                msg += f"üìä –°—Ç–∞—Ç—É—Å: {batch['status']}\n"
                break
    
    if farmer_id in farmer_batches:
        total_batches = len(farmer_batches[farmer_id])
        active_batches = len([b for b in farmer_batches[farmer_id] if b['status'] == '–ê–∫—Ç–∏–≤–Ω–∞'])
        
        msg += f"\n<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        msg += f"–í—Å–µ–≥–æ –ø–∞—Ä—Ç–∏–π: {total_batches}\n"
        msg += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_batches}\n"
    
    return msg

def get_role_keyboard(role):
    """–ü–æ–ª—É—á–∏—Ç—å Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    role = str(role).lower()
    
    if role in ['farmer', '—Ñ–µ—Ä–º–µ—Ä']:
        return get_farmer_menu()
    elif role in ['exporter', '—ç–∫—Å–ø–æ—Ä—Ç—ë—Ä']:
        return get_exporter_menu()
    elif role in ['logistic', '–ª–æ–≥–∏—Å—Ç']:
        return get_logistic_menu()
    elif role in ['expeditor', '—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä', 'broker', '–±—Ä–æ–∫–µ—Ä']:
        return get_expeditor_menu()
    else:
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "üìà –¶–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ", "üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞")
        return keyboard

def determine_quality_class(humidity, impurity):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–µ—Ä–Ω–∞"""
    if humidity <= 14 and impurity <= 1:
        return "1 –∫–ª–∞—Å—Å"
    elif humidity <= 14.5 and impurity <= 2:
        return "2 –∫–ª–∞—Å—Å"
    elif humidity <= 15 and impurity <= 3:
        return "3 –∫–ª–∞—Å—Å"
    elif humidity <= 16 and impurity <= 5:
        return "4 –∫–ª–∞—Å—Å"
    else:
        return "5 –∫–ª–∞—Å—Å"

async def find_matching_exporters(batch_data):
    """–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤ –¥–ª—è –ø–∞—Ä—Ç–∏–∏"""
    matching_pulls = []
    
    for pull_id, pull in pulls.items():
        if (pull['culture'] == batch_data['culture'] and
            pull['status'] == '–û—Ç–∫—Ä—ã—Ç' and
            pull['current_volume'] < pull['target_volume'] and
            batch_data['price'] <= pull['price'] * 75 and   
            batch_data['humidity'] <= pull['moisture'] and
            batch_data['impurity'] <= pull['impurity']):
            
            matching_pulls.append(pull)
    
    return matching_pulls

async def find_matching_batches(pull_data):
    """–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–∏–π –¥–ª—è –ø—É–ª–∞"""
    matching_batches = []
    
    for user_id, batches in farmer_batches.items():
        for batch in batches:
            if (batch['culture'] == pull_data['culture'] and
                batch['status'] == '–ê–∫—Ç–∏–≤–Ω–∞' and
                batch['price'] <= pull_data['price'] * 75 and  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
                batch['humidity'] <= pull_data['moisture'] and
                batch['impurity'] <= pull_data['impurity']):
                
                matching_batches.append(batch)
    
    return matching_batches

async def create_match_notification(batch_id, pull_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏"""
    global match_counter
    match_counter += 1
    
    match_data = {
        'id': match_counter,
        'batch_id': batch_id,
        'pull_id': pull_id,
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'status': 'active'
    }
    
    matches[match_counter] = match_data
    return match_counter

async def notify_match(farmer_id, exporter_id, batch_id, pull_id):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏"""
    match_id = await create_match_notification(batch_id, pull_id)
    
    farmer_msg = (
        f"üéØ <b>–ù–∞–π–¥–µ–Ω —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä –¥–ª—è –≤–∞—à–µ–π –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
        f"–ü—É–ª–ª #{pull_id} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    )
    
    exporter_msg = (
        f"üéØ <b>–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –ø–∞—Ä—Ç–∏—è #{batch_id}</b>\n\n"
        f"–ü–∞—Ä—Ç–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –≤–∞—à–µ–≥–æ –ø—É–ª–ª–∞ #{pull_id}.\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Ñ–µ—Ä–º–µ—Ä–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    )
    
    try:
        await bot.send_message(farmer_id, farmer_msg, parse_mode='HTML')
        await bot.send_message(exporter_id, exporter_msg, parse_mode='HTML')
        logging.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ #{match_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

async def auto_match_batches_and_pulls():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏ –∏ –ø—É–ª–∞–º–∏"""
    logging.info("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...")
    
    matches_found = 0
    
    for pull_id, pull in pulls.items():
        if pull['status'] != '–û—Ç–∫—Ä—ã—Ç':
            continue
            
        matching_batches = await find_matching_batches(pull)
        
        for batch in matching_batches:
            existing_match = None
            for match in matches.values():
                if (match['batch_id'] == batch['id'] and 
                    match['pull_id'] == pull_id and 
                    match['status'] == 'active'):
                    existing_match = match
                    break
            
            if not existing_match:
                await notify_match(
                    batch['farmer_id'], 
                    pull['exporter_id'], 
                    batch['id'], 
                    pull_id
                )
                matches_found += 1
                await asyncio.sleep(0.1)  
    
    logging.info(f"‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches_found}")
    return matches_found

@dp.errors_handler()
async def errors_handler(update: types.Update, exception: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"–û—à–∏–±–∫–∞: {exception}", exc_info=True)
    
    try:
        if update.message:
            await update.message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        elif update.callback_query:
            await update.callback_query.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ",
                show_alert=True
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")
    
    return True

@dp.message_handler(commands=['start'], state='*')
async def cmd_start(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"""
    await state.finish()
    user_id = message.from_user.id
    
    if user_id in users:
        user = users[user_id]
        role = user.get('role', '').lower()
        name = user.get('name', message.from_user.first_name)
        
        keyboard = get_role_keyboard(role)
        
        await message.answer(
            f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {name}!\n\n"
            f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {ROLES.get(role, role)}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=keyboard
        )
    else:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Exportum!\n\n"
            "üåæ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–µ—Ä–Ω–æ–º\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("üìã –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration")
            )
        )
@dp.callback_query_handler(lambda c: c.data == "start_registration", state='*')
async def start_registration(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await callback.message.edit_text(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 7\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:",
        parse_mode='HTML'
    )
    await RegistrationStatesGroup.name.set()
    await callback.answer()


@dp.message_handler(state=RegistrationStatesGroup.name)
async def registration_name(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
        return
    
    await state.update_data(name=name)
    
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 2 –∏–∑ 7\n\n"
        "üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: +79991234567",
        parse_mode='HTML'
    )
    await RegistrationStatesGroup.phone.set()


@dp.message_handler(state=RegistrationStatesGroup.phone)
async def registration_phone(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    phone = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if len(phone) < 10 or not any(char.isdigit() for char in phone):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    
    await state.update_data(phone=phone)
    
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 3 –∏–∑ 7\n\n"
        "üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:",
        parse_mode='HTML'
    )
    await RegistrationStatesGroup.email.set()


@dp.message_handler(state=RegistrationStatesGroup.email)
async def registration_email(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ email –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    email = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
    if '@' not in email or '.' not in email.split('@')[-1]:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    
    await state.update_data(email=email)
    
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 4 –∏–∑ 7\n\n"
        "üè¢ –í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏\n\n"
        "–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä",
        parse_mode='HTML'
    )
    await RegistrationStatesGroup.inn.set()


@dp.message_handler(state=RegistrationStatesGroup.inn)
async def registration_inn(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ò–ù–ù –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    inn = message.text.strip()
    
    if not validate_inn(inn):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ò–ù–ù. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    
    await state.update_data(inn=inn)
    
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 5 –∏–∑ 7\n\n"
        "üìç –í–≤–µ–¥–∏—Ç–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å –∫–æ–º–ø–∞–Ω–∏–∏\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –≥. –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä, —É–ª. –ö—Ä–∞—Å–Ω–∞—è, –¥. 1, –æ—Ñ. 10",   
        parse_mode='HTML'
    )
    await RegistrationStatesGroup.company_details.set()  # ‚Üê –ó–ê–ö–†–´–¢–´ –°–ö–û–ë–ö–ò!


@dp.message_handler(state=RegistrationStatesGroup.company_details)
async def registration_company_details(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
    company_details = message.text.strip()
    
    if len(company_details) < 10:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å:")
        return
    
    await state.update_data(company_details=company_details)
    
    await message.answer(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 6 –∏–∑ 7\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:",
        reply_markup=region_keyboard(),
        parse_mode='HTML'
    )
    await RegistrationStatesGroup.region.set()

@dp.callback_query_handler(lambda c: c.data.startswith('joinpull:'), state='*')
async def join_pull_start(callback: types.CallbackQuery, state: FSMContext):

    await state.finish()
    
    try:
        pull_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError) as e:
        # # print(f"‚ùå –û–®–ò–ë–ö–ê –ø–∞—Ä—Å–∏–Ω–≥–∞ pull_id: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    if pull_id not in pulls:
        # # print(f"‚ùå pull_id {pull_id} –ù–ï –ù–ê–ô–î–ï–ù –≤ pulls!")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ pulls: {list(pulls.keys())}")
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    
    user_id = callback.from_user.id
    
    if user_id not in users:
        # # print(f"‚ùå user_id {user_id} –ù–ï –ù–ê–ô–î–ï–ù –≤ users!")
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        return
    
    if users[user_id].get('role') != 'farmer':
        # # print(f"‚ùå –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {users[user_id].get('role')}, –∞ –Ω—É–∂–Ω–∞ 'farmer'!")
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä—ã –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—å—Å—è –∫ –ø—É–ª–∞–º", show_alert=True)
        return
    
    if user_id not in farmer_batches:
        # # print(f"‚ùå –£ —Ñ–µ—Ä–º–µ—Ä–∞ –ù–ï–¢ –ø–∞—Ä—Ç–∏–π!")
        await callback.answer(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä—Ç–∏–π –∫—É–ª—å—Ç—É—Ä—ã {pull['culture']}", show_alert=True)
        return
    
    active_batches = [
        b for b in farmer_batches[user_id]
        if b.get('culture') == pull['culture'] and b.get('status') == '–ê–∫—Ç–∏–≤–Ω–∞'
    ]
        
    if not active_batches:
        # # print(f"‚ùå –ù–ï–¢ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π –∫—É–ª—å—Ç—É—Ä—ã {pull['culture']}!")
        await callback.answer(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π –∫—É–ª—å—Ç—É—Ä—ã {pull['culture']}", show_alert=True)
        return
        
    await state.update_data(join_pull_id=pull_id)
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for batch in active_batches:
        button_text = f"{batch['culture']} - {batch['volume']} —Ç - {batch['price']:,.0f} ‚ÇΩ/—Ç"
        keyboard.add(
            InlineKeyboardButton(button_text, 
                               callback_data=f"selectbatchjoin:{batch['id']}")
        )
        print(f"   –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è: {button_text}")
    
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"viewpull:{pull_id}"))
    
    
    await callback.message.edit_text(
        f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—é –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—É–ª—É #{pull_id}</b>\n\n"
        f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull['culture']}\n"
        f"üì¶ –¶–µ–ª–µ–≤–æ–π –æ–±—ä—ë–º: {pull['target_volume']} —Ç\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('selectbatchjoin:'), state='*')
async def select_batch_for_join(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø—É–ª—É"""
    try:
        batch_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        await state.finish()
        return
    
    data = await state.get_data()    
    pull_id = data.get('join_pull_id')
    
    if not pull_id:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        await state.finish()
        return
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.finish()
        return
    
    pull = pulls[pull_id]  
    user_id = callback.from_user.id

    batch = None
    if user_id in farmer_batches:
        for b in farmer_batches[user_id]:
            if b['id'] == batch_id:
                batch = b
                break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
        
    if batch['culture'] != pull['culture']:
        await callback.answer("‚ùå –ö—É–ª—å—Ç—É—Ä–∞ –ø–∞—Ä—Ç–∏–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø—É–ª–æ–º!", show_alert=True)
        await state.finish()
        return
    
    available = pull['target_volume'] - pull['current_volume']
    print(f"   –û–±—ä–µ–º –ø–∞—Ä—Ç–∏–∏: {batch['volume']}")
    print(f"   –î–æ—Å—Ç—É–ø–Ω–æ –≤ –ø—É–ª–µ: {available}")
    
    if batch['volume'] > available:
        await callback.answer("‚ùå –û–±—ä–µ–º –ø–∞—Ä—Ç–∏–∏ –±–æ–ª—å—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤ –ø—É–ª–µ!", show_alert=True)
        await state.finish()
        return
    

    if pull_id not in pull_participants:
        pull_participants[pull_id] = []
    
    participant = {
        'farmer_id': user_id,
        'farmer_name': users[user_id].get('name', ''),
        'batch_id': batch_id,
        'volume': batch['volume'],
        'joined_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    pull_participants[pull_id].append(participant)
    pull['current_volume'] += batch['volume']
    batch['status'] = '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞'
    save_pulls_to_pickle()
    save_batches_to_pickle()
    
    await callback.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –ø—É–ª—É!", show_alert=True)
    
    await callback.message.answer(
        f"‚úÖ <b>–ü–∞—Ä—Ç–∏—è #{batch_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∞ –∫ –ø—É–ª—É #{pull_id}!</b>\n\n"
        f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {batch['culture']}\n"
        f"üì¶ –û–±—ä–µ–º: {batch['volume']} —Ç\n"
        f"üí∞ –¶–µ–Ω–∞: {batch['price']:,.0f} ‚ÇΩ/—Ç\n\n"
        f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
        parse_mode='HTML'
    )
    
    try:
        farmer_card = format_farmer_card(user_id, batch_id)
        
        await bot.send_message(
            pull['exporter_id'],
            f"üéâ <b>–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –≤ –ø—É–ª–µ #{pull_id}!</b>\n\n"
            f"{farmer_card}\n\n"
            f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ñ–µ—Ä–º–µ—Ä–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            parse_mode='HTML'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä—É: {e}")
    
    await state.finish()

@dp.callback_query_handler(lambda c: c.data.startswith('viewparticipants:'), state='*')
async def view_pull_participants(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É–ª–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    await state.finish()
    
    try:
        pull_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError):
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        return
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    participants = pull_participants.get(pull_id, [])
    
    if not participants:
        await callback.answer("–í –ø—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", show_alert=True)
        return
    msg = f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—É–ª–∞ #{pull_id}</b>\n\n"
    msg += f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull['culture']}\n"
    msg += f"üì¶ –¶–µ–ª–µ–≤–æ–π –æ–±—ä—ë–º: {pull['target_volume']} —Ç\n"
    msg += f"üìä –¢–µ–∫—É—â–∏–π –æ–±—ä—ë–º: {pull['current_volume']} —Ç\n"
    msg += f"üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {(pull['current_volume'] / pull['target_volume'] * 100):.1f}%\n\n"
    
    msg += f"<b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(participants)}):</b>\n\n"
    
    for i, p in enumerate(participants, 1):
        farmer_id = p['farmer_id']
        farmer = users.get(farmer_id, {})
        
        msg += f"{i}. <b>{p['farmer_name']}</b>\n"
        msg += f"   üì¶ –û–±—ä—ë–º: {p['volume']} —Ç\n"
        batch_id = p['batch_id']
        batch = None
        if farmer_id in farmer_batches:
            for b in farmer_batches[farmer_id]:
                if b['id'] == batch_id:
                    batch = b
                    break
        
        if batch:
            msg += f"   üí∞ –¶–µ–Ω–∞: {batch['price']:,.0f} ‚ÇΩ/—Ç\n"
            msg += f"   üìç –†–µ–≥–∏–æ–Ω: {batch.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        
        msg += f"   üìÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: {p['joined_at']}\n"
        phone = farmer.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        email = farmer.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')
        msg += f"   üì± –¢–µ–ª–µ—Ñ–æ–Ω: <code>{phone}</code>\n"
        msg += f"   üìß Email: <code>{email}</code>\n"
        msg += "\n"
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—É–ª—É", callback_data=f"viewpull:{pull_id}")
    )
    
    await callback.message.edit_text(
        msg,
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('region:'), state=RegistrationStatesGroup.region)
async def registration_region(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    region = callback.data.split(':', 1)[1]
    await state.update_data(region=region)
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üåæ –§–µ—Ä–º–µ—Ä", callback_data="role:farmer"),
        InlineKeyboardButton("üì¶ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä", callback_data="role:exporter")
    )
    keyboard.add(
        InlineKeyboardButton("üöö –õ–æ–≥–∏—Å—Ç", callback_data="role:logistic"),
        InlineKeyboardButton("üöõ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä", callback_data="role:expeditor")
    )
    
    await callback.message.edit_text(
        "üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>\n\n"
        "–®–∞–≥ 7 –∏–∑ 7\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await RegistrationStatesGroup.role.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('role:'), state=RegistrationStatesGroup.role)
async def registration_role(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    role = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    user_id = callback.from_user.id
    username = callback.from_user.username or ''
    
    users[user_id] = {
        'user_id': user_id,
        'username': username,
        'name': data['name'],
        'phone': data['phone'],
        'email': data['email'],
        'inn': data['inn'],
        'company_details': data['company_details'],
        'region': data['region'],
        'role': role,
        'registered_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    save_users_to_json()
    
    if gs and gs.spreadsheet:
        gs.sync_user_to_sheets(user_id, users[user_id])
    
    await state.finish()
    
    keyboard = get_role_keyboard(role)
    
    await callback.message.edit_text(
        f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üë§ {data['name']}\n"
        f"üé≠ –†–æ–ª—å: {ROLES[role]}\n"
        f"üìç –†–µ–≥–∏–æ–Ω: {data['region']}\n"
        f"üè¢ –ò–ù–ù: {data['inn']}\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Exportum!",
        parse_mode='HTML'
    )
    
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=keyboard
    )
    await callback.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        KeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
    )
    keyboard.add(
        KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç"),
        KeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è")
    )
    keyboard.add(KeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥"))
    return keyboard

@dp.message_handler(commands=['admin'], state='*')
async def admin_menu(message: types.Message, state: FSMContext):
    """–ê–¥–º–∏–Ω –º–µ–Ω—é"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    await message.answer(
        "üîê <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_keyboard(),
        parse_mode='HTML'
    )

@dp.message_handler(lambda m: m.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", state='*')
async def admin_stats(message: types.Message, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    
    total_users = len(users)
    farmers = len([u for u in users.values() if u.get('role') == 'farmer'])
    exporters = len([u for u in users.values() if u.get('role') == 'exporter'])
    logistics = len([u for u in users.values() if u.get('role') == 'logistic'])
    expeditors = len([u for u in users.values() if u.get('role') == 'expeditor'])
    
    total_batches = sum(len(batches) for batches in farmer_batches.values())
    active_batches = sum(
        len([b for b in batches if b.get('status') == '–ê–∫—Ç–∏–≤–Ω–∞—è'])
        for batches in farmer_batches.values()
    )
    
    total_pulls = len(pulls)
    open_pulls = len([p for p in pulls.values() if p.get('status') == '–û—Ç–∫—Ä—ã—Ç'])
    
    total_deals = len(deals)
    active_deals = len([d for d in deals.values() if d.get('status') not in ['completed', 'cancelled']])
    
    total_matches = len(matches)
    active_matches = len([m for m in matches.values() if m.get('status') == 'active'])
    
    stats_msg = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
        f"   ‚Ä¢ üßë‚Äçüåæ –§–µ—Ä–º–µ—Ä–æ–≤: {farmers}\n"
        f"   ‚Ä¢ üè≠ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤: {exporters}\n"
        f"   ‚Ä¢ üöö –õ–æ–≥–∏—Å—Ç–æ–≤: {logistics}\n"
        f"   ‚Ä¢ üì¶ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–æ–≤: {expeditors}\n\n"
        f"üì¶ <b>–ü–∞—Ä—Ç–∏–∏:</b>\n"
        f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_batches}\n"
        f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_batches}\n\n"
        f"üéØ <b>–ü—É–ª—ã:</b>\n"
        f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_pulls}\n"
        f"   ‚Ä¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {open_pulls}\n\n"
        f"ü§ù <b>–°–¥–µ–ª–∫–∏:</b>\n"
        f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_deals}\n"
        f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_deals}\n\n"
        f"‚ú® <b>–°–æ–≤–ø–∞–¥–µ–Ω–∏—è:</b>\n"
        f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_matches}\n"
        f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_matches}"
    )
    
    await message.answer(stats_msg, parse_mode='HTML')

@dp.message_handler(lambda m: m.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞", state='*')
async def admin_broadcast_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    
    await message.answer(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã</i>",
        parse_mode='HTML'
    )
    
    await BroadcastStatesGroup.message.set()

class BroadcastStatesGroup(StatesGroup):
    message = State()
    confirm = State()

@dp.message_handler(state=BroadcastStatesGroup.message, content_types=types.ContentType.TEXT)
async def admin_broadcast_message(message: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    broadcast_text = message.text
    await state.update_data(broadcast_text=broadcast_text)
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="broadcast_confirm_yes"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="broadcast_confirm_no")
    )
    
    await message.answer(
        f"üì¢ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        f"{broadcast_text}\n\n"
        f"–†–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ <b>{len(users)}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    
    await BroadcastStatesGroup.confirm.set()

@dp.callback_query_handler(lambda c: c.data.startswith('broadcast_confirm_'), state=BroadcastStatesGroup.confirm)
async def admin_broadcast_confirm(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    action = callback.data.split('_', 2)[2]
    
    if action == 'no':
        await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await state.finish()
        await callback.answer()
        return
    
    data = await state.get_data()
    broadcast_text = data.get('broadcast_text')
    
    await callback.message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    success_count = 0
    fail_count = 0
    
    for user_id in users.keys():
        try:
            await bot.send_message(user_id, broadcast_text)
            success_count += 1
            await asyncio.sleep(0.05)  
        except Exception as e:
            fail_count += 1
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    await callback.message.answer(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {fail_count}",
        reply_markup=admin_keyboard(),
        parse_mode='HTML'
    )
    
    await state.finish()
    await callback.answer()

@dp.message_handler(lambda m: m.text == "üì§ –≠–∫—Å–ø–æ—Ä—Ç", state='*')
async def admin_export(message: types.Message, state: FSMContext):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    
    export_data = {
        'users': users,
        'batches': {uid: batches for uid, batches in farmer_batches.items()},
        'pulls': pulls,
        'deals': deals,
        'matches': matches,
        'exported_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    }
    
    filename = f'export_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(export_data, f, ensure_ascii=False, indent=2)
    
    with open(filename, 'rb') as f:
        await message.answer_document(
            f,
            caption=f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
                    f"üóì {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                    f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                    f"üì¶ –ü–∞—Ä—Ç–∏–π: {sum(len(b) for b in farmer_batches.values())}\n"
                    f"üéØ –ü—É–ª–æ–≤: {len(pulls)}",
            parse_mode='HTML'
        )
    
    os.remove(filename)

@dp.message_handler(lambda m: m.text == "üîç –ù–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", state='*')
async def admin_manual_match(message: types.Message, state: FSMContext):
    """–†—É—á–Ω–æ–π –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    
    await message.answer("üîç –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...")
    
    matches_found = await auto_match_batches_and_pulls()
    
    await message.answer(
        f"‚úÖ <b>–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n"
        f"üîç –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches_found}\n"
        f"üìä –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len([m for m in matches.values() if m.get('status') == 'active'])}",
        parse_mode='HTML'
    )

@dp.message_handler(lambda m: m.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥", state='*')
async def admin_back(message: types.Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        return
    if user_id in users:
        role = users[user_id].get('role')
        keyboard = get_role_keyboard(role)
        await message.answer("‚óÄÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)
    else:
        await message.answer("‚óÄÔ∏è –í–æ–∑–≤—Ä–∞—Ç")

@dp.message_handler(commands=['match'], state='*')
async def cmd_manual_match(message: types.Message, state: FSMContext):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id != ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...")
    
    matches_found = await auto_match_batches_and_pulls()
    
    await message.answer(
        f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches_found}\n"
        f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len([m for m in matches.values() if m['status'] == 'active'])}"
    )

@dp.message_handler(lambda m: m.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å", state='*')
async def cmd_profile(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    user = users[user_id]
    
    profile_text = f"""
üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>

üìù –ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üé≠ –†–æ–ª—å: {ROLES.get(user.get('role'), '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìß Email: {user.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üè¢ –ò–ù–ù: {user.get('inn', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìç –†–µ–≥–∏–æ–Ω: {user.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('registered_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
"""
    
    if user.get('company_details'):
        profile_text += f"\nüè¢ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏:</b>\n{user['company_details']}"
    
    keyboard = profile_edit_keyboard()
    
    await message.answer(profile_text, parse_mode='HTML', reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("edit_profile:"), state='*')
async def start_edit_profile(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    field = callback.data.split(':', 1)[1]
    
    await state.update_data(edit_field=field)
    
    field_names = {
        'phone': '–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        'email': 'email',
        'region': '—Ä–µ–≥–∏–æ–Ω',
        'company_details': '—Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏'
    }
    
    if field == 'region':
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–≥–∏–æ–Ω:",
            reply_markup=region_keyboard()
        )
    else:
        await callback.message.answer(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π {field_names.get(field, '–∑–Ω–∞—á–µ–Ω–∏–µ')}:"
        )
    
    await EditProfile.new_value.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('region:'), state=EditProfile.new_value)
async def edit_profile_region(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    new_region = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    field = data.get('edit_field')
    user_id = callback.from_user.id
    
    if field != 'region':
        await callback.answer("‚ùå –û—à–∏–±–∫–∞")
        return
    
    old_value = users[user_id].get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')
    users[user_id]['region'] = new_region
    
    save_users_to_json()
    
    if gs and gs.spreadsheet:
        gs.update_user_in_sheets(user_id, users[user_id])
    
    await state.finish()
    
    role = users[user_id].get('role')
    keyboard = get_role_keyboard(role)
    
    await callback.message.edit_text(
        f"‚úÖ –†–µ–≥–∏–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω!\n\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_region}"
    )
    
    await callback.message.answer(
        "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!",
        reply_markup=keyboard
    )
    await callback.answer("‚úÖ –†–µ–≥–∏–æ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω")

@dp.message_handler(state=EditProfile.new_value)
async def edit_profile_value(message: types.Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    user_id = message.from_user.id
    data = await state.get_data()
    field = data.get('edit_field')
    new_value = message.text.strip()
    
    if field == 'email':
        if not validate_email(new_value):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
    elif field == 'phone':
        if not validate_phone(new_value):
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
    
    old_value = users[user_id].get(field, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    users[user_id][field] = new_value
    
    save_users_to_json()
    
    if gs and gs.spreadsheet:
        gs.update_user_in_sheets(user_id, users[user_id])
    
    await state.finish()
    
    role = users[user_id].get('role')
    keyboard = get_role_keyboard(role)
    
    field_names = {
        'phone': '–¢–µ–ª–µ—Ñ–æ–Ω',
        'email': 'Email',
        'company_details': '–†–µ–∫–≤–∏–∑–∏—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏'
    }
    
    await message.answer(
        f"‚úÖ {field_names.get(field, field.capitalize())} –æ–±–Ω–æ–≤–ª—ë–Ω!",
        reply_markup=keyboard
    )

@dp.message_handler(lambda m: m.text == "üìà –¶–µ–Ω—ã –Ω–∞ –∑–µ—Ä–Ω–æ", state='*')
async def show_prices_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã —Å—Ä–∞–∑—É –±–µ–∑ –º–µ–Ω—é"""
    await state.finish()
    
    prices_msg = format_prices_message()
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã", callback_data="refresh_prices")
    )
    
    await message.answer(
        prices_msg,
        parse_mode='HTML',
        reply_markup=keyboard
    )
    
@dp.message_handler(lambda m: m.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞", state='*')
async def show_news_menu(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å—Ä–∞–∑—É –±–µ–∑ –º–µ–Ω—é"""
    await state.finish()
    news_msg = format_news_message()
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="refresh_news")
    )
    
    await message.answer(
        news_msg,
        parse_mode='HTML',
        reply_markup=keyboard,
        disable_web_page_preview=True
    )

@dp.callback_query_handler(lambda c: c.data == "view_news", state='*')
async def show_news(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"""
    news_msg = format_news_message()
    await callback.message.edit_text(
        news_msg, 
        parse_mode='HTML',
        disable_web_page_preview=True
    )
    await callback.answer()

def parse_russia_regional_prices():
    """‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –†–§ (–Æ–≥ –†–æ—Å—Å–∏–∏)"""
    prices = {}
    today = datetime.now().strftime("%Y-%m-%d")
    
    crops_urls = {
        '–ü—à–µ–Ω–∏—Ü–∞': f'https://www.zerno.ru/cerealspricesdate/{today}/wheat',
        '–Ø—á–º–µ–Ω—å': f'https://www.zerno.ru/cerealspricesdate/{today}/barley',
        '–ö—É–∫—É—Ä—É–∑–∞': f'https://www.zerno.ru/cerealspricesdate/{today}/corn',
        '–°–æ—è': f'https://www.zerno.ru/cerealspricesdate/{today}/soybean',
        '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫': f'https://www.zerno.ru/cerealspricesdate/{today}/sunflower'
    }
    
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.9'
    }
    
    south_cities = ['–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä', '–†–æ—Å—Ç–æ–≤', '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å', '–í–æ–ª–≥–æ–≥—Ä–∞–¥', '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å']
    
    for crop_name, url in crops_urls.items():
        found_prices = []
        
        try:
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code != 200:
                logging.warning(f"‚ö†Ô∏è {crop_name}: HTTP {response.status_code}")
                continue
            
            soup = BeautifulSoup(response.text, 'html.parser')
            tables = soup.find_all('table')
            
            for table in tables:
                rows = table.find_all('tr')
                
                for row in rows[1:]:
                    cols = row.find_all(['td', 'th'])
                    
                    if len(cols) < 2:
                        continue
                    
                    location = cols[0].get_text(strip=True)
                    
                    if any(city in location for city in south_cities):
                        for col in cols[1:]:
                            price_text = col.get_text(strip=True)
                            clean_price = re.sub(r'[^\d]', '', price_text)
                            
                            if clean_price and len(clean_price) >= 4:
                                try:
                                    price = int(clean_price)
                                    
                                    if 5000 <= price <= 100000:
                                        found_prices.append(price)
                                        logging.info(f"‚úÖ {crop_name}: {price} ‚ÇΩ/—Ç –∏–∑ {location}")
                                        break
                                except ValueError:
                                    continue
            
            if found_prices:
                avg_price = sum(found_prices) // len(found_prices)
                prices[crop_name] = avg_price
                logging.info(f"‚úÖ {crop_name}: —Å—Ä–µ–¥–Ω—è—è {avg_price} ‚ÇΩ/—Ç")
        
        except Exception as e:
            logging.error(f"‚ùå {crop_name}: {e}")
    if not prices or len(prices) < 3:
        logging.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ —Ü–µ–Ω—ã")
        prices = {
            '–ü—à–µ–Ω–∏—Ü–∞': 15650,
            '–Ø—á–º–µ–Ω—å': 13300,
            '–ö—É–∫—É—Ä—É–∑–∞': 14000,
            '–°–æ—è': 40900,
            '–ü–æ–¥—Å–æ–ª–Ω–µ—á–Ω–∏–∫': 38600
        }
    
    logging.info(f"‚úÖ –†–§ (–Æ–≥): –∏—Ç–æ–≥–æ {len(prices)} —Ü–µ–Ω")
    return prices

def parse_fob_black_sea():
    """‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ FOB (–ß–µ—Ä–Ω–æ–µ –º–æ—Ä–µ)"""
    try:
        url = "https://query1.finance.yahoo.com/v8/finance/chart/ZW=F"
        response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'}, timeout=10)
        data = response.json()
        
        if 'chart' in data and 'result' in data['chart'] and data['chart']['result']:
            result = data['chart']['result'][0]
            if 'meta' in result and 'regularMarketPrice' in result['meta']:
                price_cents = result['meta']['regularMarketPrice']
                price_dollars = price_cents / 100
                fob_price = round(price_dollars * 36.74, 2)
                logging.info(f"‚úÖ FOB: ${fob_price}/—Ç")
                return fob_price
        
        logging.warning("‚ö†Ô∏è FOB: –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        return 210.0
        
    except Exception as e:
        logging.error(f"‚ùå parse_fob_black_sea: {e}")
        return 210.0

def parse_cbot_futures():
    """‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ñ—å—é—á–µ—Ä—Å–æ–≤ CBoT"""
    prices = {}
    
    try:
        symbols = {
            '–ü—à–µ–Ω–∏—Ü–∞ (CBoT)': 'ZW=F',
            '–ö—É–∫—É—Ä—É–∑–∞ (CBoT)': 'ZC=F',
            '–°–æ—è (CBoT)': 'ZS=F'
        }
        
        for name, symbol in symbols.items():
            try:
                url = f"https://query1.finance.yahoo.com/v8/finance/chart/{symbol}"
                response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'}, timeout=10)
                data = response.json()
                
                if 'chart' in data and 'result' in data['chart'] and data['chart']['result']:
                    result = data['chart']['result'][0]
                    if 'meta' in result and 'regularMarketPrice' in result['meta']:
                        price_cents = result['meta']['regularMarketPrice']
                        price_dollars = price_cents / 100
                        prices[name] = f"${price_dollars:.2f}/bu"
                        logging.info(f"‚úÖ {name}: ${price_dollars:.2f}/bu")
            except Exception as e:
                logging.error(f"‚ùå {name}: {e}")
                continue
        
        if not prices:
            prices = {
                '–ü—à–µ–Ω–∏—Ü–∞ (CBoT)': '$5.50/bu',
                '–ö—É–∫—É—Ä—É–∑–∞ (CBoT)': '$4.20/bu',
                '–°–æ—è (CBoT)': '$10.80/bu'
            }
            logging.warning("‚ö†Ô∏è CBoT: –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        
        return prices
        
    except Exception as e:
        logging.error(f"‚ùå parse_cbot_futures: {e}")
        return {
            '–ü—à–µ–Ω–∏—Ü–∞ (CBoT)': '$5.50/bu',
            '–ö—É–∫—É—Ä—É–∑–∞ (CBoT)': '$4.20/bu',
            '–°–æ—è (CBoT)': '$10.80/bu'
        }

def parse_grain_news(limit=5):
    """‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å zerno.ru"""
    newslist = []
    
    try:
        url = "https://www.zerno.ru"
        headers = {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Accept-Language': 'ru-RU,ru;q=0.9'
        }
        
        response = requests.get(url, headers=headers, timeout=15)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')
        
        links = soup.find_all('a', href=re.compile(r'/node/\d+'))
        seen_titles = set()
        
        keywords = ['—ç–∫—Å–ø–æ—Ä—Ç', '—Ä–æ—Å—Å–∏—è', '–∞—Å—Ç—Ä–∞—Ö–∞–Ω—å', '–∑–µ—Ä–Ω–æ', '–ø—à–µ–Ω–∏—Ü', '—É—Ä–æ–∂–∞–π', 
                   'fob', '—á–µ—Ä–Ω–æ–µ –º–æ—Ä–µ', '—Ü–µ–Ω', '—Ä—ã–Ω–æ–∫']
        
        for link in links[:20]:
            title = link.text.strip()
            href = link.get('href', '')
            
            title_lower = title.lower()
            
            if title and len(title) > 30 and title not in seen_titles:
                if any(kw in title_lower for kw in keywords):
                    seen_titles.add(title)
                    
                    date = datetime.now().strftime("%d.%m.%Y")
                    full_link = f"https://www.zerno.ru{href}" if href.startswith('/') else href
                    
                    newslist.append({
                        'title': title,
                        'link': full_link,
                        'date': date
                    })
                    
                    if len(newslist) >= limit:
                        break
        
        logging.info(f"‚úÖ –°–ø–∞—Ä—Å–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(newslist)}")
        return newslist
        
    except Exception as e:
        logging.error(f"‚ùå parse_grain_news: {e}")
        return []

async def update_prices_cache():
    """‚úÖ –ö–õ–Æ–ß–ï–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ü–µ–Ω"""
    global prices_cache
    
    try:
        logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ü–µ–Ω...")
        
        loop = asyncio.get_event_loop()
        
        russia_prices = await loop.run_in_executor(None, parse_russia_regional_prices)
        fob_price = await loop.run_in_executor(None, parse_fob_black_sea)
        cbot_prices = await loop.run_in_executor(None, parse_cbot_futures)
        
        prices_cache['data'] = {
            'russia_south': russia_prices,
            'fob': fob_price,
            'cbot': cbot_prices
        }
        prices_cache['updated'] = datetime.now()
        
        logging.info("‚úÖ –ö—ç—à —Ü–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ —Ü–µ–Ω: {e}")

async def update_prices_cache():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ —Ü–µ–Ω"""
    global prices_cache, last_prices_update
    
    try:
        logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω...")
        loop = asyncio.get_event_loop()
        
        russia_prices = await loop.run_in_executor(None, parse_russia_regional_prices)
        fob_price = await loop.run_in_executor(None, parse_fob_black_sea)
        cbot_prices = await loop.run_in_executor(None, parse_cbot_futures)
        
        prices_cache = {
            'data': {
                'russia_south': russia_prices,
                'fob': fob_price,
                'cbot': cbot_prices
            },
            'updated': datetime.now()
        }
        
        last_prices_update = datetime.now()
        logging.info("‚úÖ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logging.error(f"‚ùå update_prices_cache: {e}")

async def update_news_cache():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –Ω–æ–≤–æ—Å—Ç–µ–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    global news_cache
    
    try:
        logging.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        loop = asyncio.get_event_loop()
        news = await loop.run_in_executor(None, parse_grain_news)
        
        news_cache = {
            'data': news,
            'updated': datetime.now()
        }
        
        logging.info(f"‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(news)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        logging.error(f"‚ùå update_news_cache: {e}")
        news_cache = {
            'data': [],
            'updated': datetime.now()
        }
        
        last_news_update = datetime.now()
        logging.info("‚úÖ –ù–æ–≤–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logging.error(f"‚ùå update_news_cache: {e}")

def load_users_from_json():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ JSON"""
    global users
    try:
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, 'r', encoding='utf-8') as f:
                loaded = json.load(f)
                users = {int(k): v for k, v in loaded.items()}
            logging.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(users)}")
        else:
            logging.info("‚ÑπÔ∏è –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def save_users_to_json():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ JSON"""
    try:
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, ensure_ascii=False, indent=2)
        logging.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def load_batches_from_pickle():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä—Ç–∏–π –∏–∑ pickle"""
    global farmer_batches, batch_counter
    try:
        if os.path.exists(BATCHES_FILE):
            with open(BATCHES_FILE, 'rb') as f:
                data = pickle.load(f)
                if isinstance(data, dict):
                    farmer_batches = data
                else:
                    farmer_batches = {}
            
            all_batches = []
            for batches_list in farmer_batches.values():
                if isinstance(batches_list, list):
                    all_batches.extend(batches_list)
            
            if all_batches:
                batch_counter = max([b['id'] for b in all_batches if isinstance(b, dict) and 'id' in b], default=0)
            
            logging.info(f"‚úÖ –ü–∞—Ä—Ç–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(all_batches)}")
        else:
            logging.info("‚ÑπÔ∏è –§–∞–π–ª –ø–∞—Ä—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä—Ç–∏–π: {e}")
        farmer_batches = {}
        batch_counter = 0

def save_batches_to_pickle():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–π –≤ pickle"""
    try:
        with open(BATCHES_FILE, 'wb') as f:
            pickle.dump(farmer_batches, f)
        logging.info("‚úÖ –ü–∞—Ä—Ç–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–π: {e}")

def load_pulls_from_pickle():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—É–ª–æ–≤ –∏–∑ pickle"""
    global pulls, pull_participants, logistics_offers, expeditor_offers, deals, pull_counter, deal_counter
    try:
        if os.path.exists(PULLS_FILE):
            with open(PULLS_FILE, 'rb') as f:
                data = pickle.load(f)
                pulls = data.get('pulls', {})
                pull_participants = data.get('participants', {})
                logistics_offers = data.get('logistics_offers', {})
                expeditor_offers = data.get('expeditor_offers', {})
                deals = data.get('deals', {})
                
                pull_counter = len(pulls)
                deal_counter = len(deals)
            
            logging.info(f"‚úÖ –ü—É–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {pull_counter}, –°–¥–µ–ª–∫–∏: {deal_counter}")
        else:
            logging.info("‚ÑπÔ∏è –§–∞–π–ª –ø—É–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–ª–æ–≤: {e}")

def save_pulls_to_pickle():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—É–ª–æ–≤ –≤ pickle"""
    try:
        data = {
            'pulls': pulls,
            'pull_participants': pull_participants,
            'logistics_offers': logistics_offers,
            'expeditor_offers': expeditor_offers,
            'deals': deals
        }
        with open(PULLS_FILE, 'wb') as f:
            pickle.dump(data, f)
        logging.info("‚úÖ –ü—É–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É–ª–æ–≤: {e}")

class GoogleSheetsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self, credentials_file, spreadsheet_id):
        self.spreadsheet_id = spreadsheet_id
        self.client = None
        self.spreadsheet = None
        
        try:
            if not os.path.exists(credentials_file):
                logging.warning(f"‚ö†Ô∏è –§–∞–π–ª {credentials_file} –Ω–µ –Ω–∞–π–¥–µ–Ω. Google Sheets –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω.")
                return
            
            scope = [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ]
            
            creds = Credentials.from_service_account_file(credentials_file, scopes=scope)
            self.client = gspread.authorize(creds)
            self.spreadsheet = self.client.open_by_key(spreadsheet_id)
            logging.info("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
    
    def get_or_create_worksheet(self, title, headers):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å worksheet"""
        if not self.spreadsheet:
            return None
        
        try:
            worksheet = self.spreadsheet.worksheet(title)
        except:
            worksheet = self.spreadsheet.add_worksheet(
                title=title,
                rows=1000,
                cols=len(headers)
            )
            worksheet.append_row(headers)
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω worksheet: {title}")
        
        return worksheet
    
    def sync_user_to_sheets(self, user_id, user_data):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets"""
        if not self.spreadsheet:
            return
        
        try:
            headers = [
                'user_id', 'username', 'name', 'phone', 'email',
                'inn', 'company_details', 'region', 'role', 'registered_at'
            ]
            
            worksheet = self.get_or_create_worksheet('Users', headers)
            if not worksheet:
                return
            
            try:
                cell = worksheet.find(str(user_id))
                row_num = cell.row
                
                row_data = [
                    str(user_id),
                    user_data.get('username', ''),
                    user_data.get('name', ''),
                    user_data.get('phone', ''),
                    user_data.get('email', ''),
                    user_data.get('inn', ''),
                    user_data.get('company_details', ''),
                    user_data.get('region', ''),
                    user_data.get('role', ''),
                    user_data.get('registered_at', '')
                ]
                
                worksheet.update(values=[row_data], range_name=f'A{row_num}:J{row_num}')
                logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ Google Sheets")
                
            except:
                row_data = [
                    str(user_id),
                    user_data.get('username', ''),
                    user_data.get('name', ''),
                    user_data.get('phone', ''),
                    user_data.get('email', ''),
                    user_data.get('inn', ''),
                    user_data.get('company_details', ''),
                    user_data.get('region', ''),
                    user_data.get('role', ''),
                    user_data.get('registered_at', '')
                ]
                worksheet.append_row(row_data)
                logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ Google Sheets")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    def sync_batch_to_sheets(self, batch_data):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Ç–∏–∏ –≤ Google Sheets"""
        if not self.spreadsheet:
            logging.warning("‚ö†Ô∏è Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return
        
        try:
            headers = [
                'batch_id', 'farmer_id', 'farmer_name', 'culture', 'region',
                'volume', 'price', 'humidity', 'impurity', 'quality_class',
                'storage_type', 'readiness_date', 'status', 'created_at'
            ]
            
            worksheet = self.get_or_create_worksheet('Batches', headers)
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è worksheet: {e}")
            return
        
        if not worksheet:
            return
        
        try:
            cell = worksheet.find(str(batch_data['id']))
            row_num = cell.row
            
            row_data = [
                str(batch_data['id']),
                str(batch_data['farmer_id']),
                batch_data.get('farmer_name', ''),
                batch_data.get('culture', ''),
                batch_data.get('region', ''),
                str(batch_data.get('volume', '')),
                str(batch_data.get('price', '')),
                str(batch_data.get('humidity', '')),
                str(batch_data.get('impurity', '')),
                batch_data.get('quality_class', ''),
                batch_data.get('storage_type', ''),
                batch_data.get('readiness_date', ''),
                batch_data.get('status', ''),
                batch_data.get('created_at', '')
            ]
            
            worksheet.update(values=[row_data], range_name=f'A{row_num}:N{row_num}')
            logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è {batch_data['id']}")
            
        except:
            row_data = [
                str(batch_data['id']),
                str(batch_data['farmer_id']),
                batch_data.get('farmer_name', ''),
                batch_data.get('culture', ''),
                batch_data.get('region', ''),
                str(batch_data.get('volume', '')),
                str(batch_data.get('price', '')),
                str(batch_data.get('humidity', '')),
                str(batch_data.get('impurity', '')),
                batch_data.get('quality_class', ''),
                batch_data.get('storage_type', ''),
                batch_data.get('readiness_date', ''),
                batch_data.get('status', ''),
                batch_data.get('created_at', '')
            ]
            worksheet.append_row(row_data)
            logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è {batch_data['id']}")
        
    def sync_pull_to_sheets(self, pull_data):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –≤ Google Sheets"""
        if not self.spreadsheet:
            return
        
        try:
            headers = [
                'pull_id', 'exporter_id', 'exporter_name', 'culture',
                'target_volume', 'current_volume', 'price', 'port',
                'moisture', 'nature', 'impurity', 'weed',
                'documents', 'doc_type', 'status', 'created_at'
            ]
            
            worksheet = self.get_or_create_worksheet('Pulls', headers)
            if not worksheet:
                return
            
            try:
                cell = worksheet.find(str(pull_data['id']))
                row_num = cell.row
                
                row_data = [
                    str(pull_data['id']),
                    str(pull_data['exporter_id']),
                    pull_data.get('exporter_name', ''),
                    pull_data.get('culture', ''),
                    str(pull_data.get('target_volume', '')),
                    str(pull_data.get('current_volume', '')),
                    str(pull_data.get('price', '')),
                    pull_data.get('port', ''),
                    str(pull_data.get('moisture', '')),
                    str(pull_data.get('nature', '')),
                    str(pull_data.get('impurity', '')),
                    str(pull_data.get('weed', '')),
                    pull_data.get('documents', ''),
                    pull_data.get('doc_type', ''),
                    pull_data.get('status', ''),
                    pull_data.get('created_at', '')
                ]
                
                worksheet.update(values=[row_data], range_name=f'A{row_num}:P{row_num}')
                logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª—ë–Ω –ø—É–ª {pull_data['id']}")
                
            except:
                row_data = [
                    str(pull_data['id']),
                    str(pull_data['exporter_id']),
                    pull_data.get('exporter_name', ''),
                    pull_data.get('culture', ''),
                    str(pull_data.get('target_volume', '')),
                    str(pull_data.get('current_volume', '')),
                    str(pull_data.get('price', '')),
                    pull_data.get('port', ''),
                    str(pull_data.get('moisture', '')),
                    str(pull_data.get('nature', '')),
                    str(pull_data.get('impurity', '')),
                    str(pull_data.get('weed', '')),
                    pull_data.get('documents', ''),
                    pull_data.get('doc_type', ''),
                    pull_data.get('status', ''),
                    pull_data.get('created_at', '')
                ]
                worksheet.append_row(row_data)
                logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É–ª {pull_data['id']}")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—É–ª–∞: {e}")
    
    def delete_batch_from_sheets(self, batch_id):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –∏–∑ Google Sheets"""
        if not self.spreadsheet:
            return
        
        try:
            worksheet = self.get_or_create_worksheet('Batches', [])
            if not worksheet:
                return
            
            cell = worksheet.find(str(batch_id))
            if cell:
                worksheet.delete_rows(cell.row)
                logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è {batch_id} –∏–∑ Google Sheets")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏ {batch_id}: {e}")
    
    def update_batch_in_sheets(self, batch_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ –≤ Google Sheets"""
        self.sync_batch_to_sheets(batch_data)
    
    def update_user_in_sheets(self, user_id, user_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Google Sheets"""
        self.sync_user_to_sheets(user_id, user_data)
    
    def update_pull_in_sheets(self, pull_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—É–ª–∞ –≤ Google Sheets"""
        self.sync_pull_to_sheets(pull_data)
    
    def sync_deal_to_sheets(self, deal_data):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–¥–µ–ª–∫–∏ –≤ Google Sheets"""
        if not self.spreadsheet:
            return
        
        try:
            headers = [
                'deal_id', 'pull_id', 'exporter_id', 'farmer_ids',
                'logistic_id', 'expeditor_id', 'total_volume', 
                'status', 'created_at', 'completed_at'
            ]
            
            worksheet = self.get_or_create_worksheet('Deals', headers)
            if not worksheet:
                return
            
            farmer_ids_str = ','.join(map(str, deal_data.get('farmer_ids', [])))
            
            try:
                cell = worksheet.find(str(deal_data['id']))
                row_num = cell.row
                
                row_data = [
                    str(deal_data['id']),
                    str(deal_data.get('pull_id', '')),
                    str(deal_data.get('exporter_id', '')),
                    farmer_ids_str,
                    str(deal_data.get('logistic_id', '')),
                    str(deal_data.get('expeditor_id', '')),
                    str(deal_data.get('total_volume', '')),
                    deal_data.get('status', ''),
                    deal_data.get('created_at', ''),
                    deal_data.get('completed_at', '')
                ]
                
                worksheet.update(values=[row_data], range_name=f'A{row_num}:J{row_num}')
                logging.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ {deal_data['id']}")
                
            except:
                row_data = [
                    str(deal_data['id']),
                    str(deal_data.get('pull_id', '')),
                    str(deal_data.get('exporter_id', '')),
                    farmer_ids_str,
                    str(deal_data.get('logistic_id', '')),
                    str(deal_data.get('expeditor_id', '')),
                    str(deal_data.get('total_volume', '')),
                    deal_data.get('status', ''),
                    deal_data.get('created_at', ''),
                    deal_data.get('completed_at', '')
                ]
                worksheet.append_row(row_data)
                logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ {deal_data['id']}")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")
    
    def sync_match_to_sheets(self, match_data):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ Google Sheets"""
        if not self.spreadsheet:
            return
        
        try:
            headers = [
                'match_id', 'batch_id', 'pull_id', 'status', 'created_at'
            ]
            
            worksheet = self.get_or_create_worksheet('Matches', headers)
            if not worksheet:
                return
            
            try:
                cell = worksheet.find(str(match_data['id']))
                row_num = cell.row
                
                row_data = [
                    str(match_data['id']),
                    str(match_data.get('batch_id', '')),
                    str(match_data.get('pull_id', '')),
                    match_data.get('status', ''),
                    match_data.get('created_at', '')
                ]
                
                worksheet.update(values=[row_data], range_name=f'A{row_num}:E{row_num}')
 
            except:
                row_data = [
                    str(match_data['id']),
                    str(match_data.get('batch_id', '')),
                    str(match_data.get('pull_id', '')),
                    match_data.get('status', ''),
                    match_data.get('created_at', '')
                ]
                worksheet.append_row(row_data)
                logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ {match_data['id']}")
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {e}")
    
    def export_all_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets"""
        if not self.spreadsheet:
            logging.warning("‚ö†Ô∏è Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
        
        try:
            for user_id, user_data in users.items():
                self.sync_user_to_sheets(user_id, user_data)
            for user_batches in farmer_batches.values():
                for batch in user_batches:
                    self.sync_batch_to_sheets(batch)
            for pull_data in pulls.values():
                self.sync_pull_to_sheets(pull_data)
            for deal_data in deals.values():
                self.sync_deal_to_sheets(deal_data)
            for match_data in matches.values():
                self.sync_match_to_sheets(match_data)
            
            logging.info("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Google Sheets")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

try:
    if GOOGLE_SHEETS_AVAILABLE and os.path.exists(GOOGLE_SHEETS_CREDENTIALS):
        gs = GoogleSheetsManager(GOOGLE_SHEETS_CREDENTIALS, SPREADSHEET_ID)
        if gs and gs.spreadsheet:
            logging.info("‚úÖ Google Sheets Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            logging.warning("‚ö†Ô∏è Google Sheets Manager –æ—Ç–∫–ª—é—á–µ–Ω - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
            gs = None
    else:
        gs = None
        logging.warning("‚ö†Ô∏è Google Sheets Manager –æ—Ç–∫–ª—é—á–µ–Ω - —Ñ–∞–π–ª credentials –Ω–µ –Ω–∞–π–¥–µ–Ω")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    gs = None

@dp.message_handler(lambda m: m.text == "üìã –ú–æ–∏ —Å–¥–µ–ª–∫–∏", state='*')
async def view_my_deals(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    user_deals = []
    for deal_id, deal in deals.items():
        if (deal.get('exporter_id') == user_id or 
            user_id in deal.get('farmer_ids', []) or
            deal.get('logistic_id') == user_id or
            deal.get('expeditor_id') == user_id):
            user_deals.append(deal)
    
    if not user_deals:
        await message.answer(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.\n\n"
            "–°–¥–µ–ª–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –º–∞—Ç—á–∏–Ω–≥–∞ —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏."
        )
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for deal in user_deals[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑
        status_emoji = {
            'pending': 'üîÑ',
            'matched': 'üéØ',
            'shipping': 'üöõ',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(deal.get('status', 'pending'), 'üìã')
        
        deal_info = f"–°–¥–µ–ª–∫–∞ #{deal['id']}"
        if deal.get('total_volume'):
            deal_info += f" - {deal['total_volume']} —Ç"
        
        button_text = f"{status_emoji} {deal_info}"
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"view_deal:{deal['id']}")
        )
    
    await message.answer(
        f"üìã <b>–í–∞—à–∏ —Å–¥–µ–ª–∫–∏</b> ({len(user_deals)} —à—Ç.)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data.startswith('view_deal:'), state='*')
async def view_deal_details(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Å–¥–µ–ª–∫–∏"""
    deal_id = int(callback.data.split(':', 1)[1])
    
    if deal_id not in deals:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    deal = deals[deal_id]
    text = f"üìã <b>–°–¥–µ–ª–∫–∞ #{deal_id}</b>\n\n"
    
    text += f"üìä –°—Ç–∞—Ç—É—Å: {DEAL_STATUSES.get(deal.get('status', 'pending'), deal.get('status'))}\n"
    
    if deal.get('total_volume'):
        text += f"üì¶ –û–±—ä—ë–º: {deal['total_volume']} —Ç\n"
    
    if deal.get('exporter_id'):
        exporter_name = users.get(deal['exporter_id'], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        text += f"üì¶ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä: {exporter_name}\n"
    
    if deal.get('farmer_ids'):
        farmers_count = len(deal['farmer_ids'])
        text += f"üåæ –§–µ—Ä–º–µ—Ä–æ–≤: {farmers_count}\n"
    
    if deal.get('logistic_id'):
        logistic_name = users.get(deal['logistic_id'], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        text += f"üöö –õ–æ–≥–∏—Å—Ç: {logistic_name}\n"
    
    if deal.get('expeditor_id'):
        expeditor_name = users.get(deal['expeditor_id'], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        text += f"üöõ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä: {expeditor_name}\n"
    
    if deal.get('created_at'):
        text += f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {deal['created_at']}\n"
    
    if deal.get('completed_at'):
        text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞: {deal['completed_at']}\n"
    
    keyboard = deal_actions_keyboard(deal_id)
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.message_handler(lambda m: m.text == "üîç –ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤", state='*')
async def search_exporters(message: types.Message, state: FSMContext):
    """–ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'farmer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä–∞–º")
        return
    
    if user_id not in farmer_batches or not farmer_batches[user_id]:
        await message.answer(
            "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∞—Ä—Ç–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤.\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä—Ç–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω—é '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é'"
        )
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for batch in farmer_batches[user_id]:
        if batch.get('status') == '–ê–∫—Ç–∏–≤–Ω–∞':
            button_text = f"üåæ {batch['culture']} - {batch['volume']} —Ç"
            keyboard.add(
                InlineKeyboardButton(button_text, callback_data=f"find_exporters:{batch['id']}")
            )
    
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@dp.message_handler(lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é", state='*')
async def add_batch_start(message: types.Message, state: FSMContext):
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'farmer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä–∞–º")
        return
    await AddBatch.culture.set()  #–í–ê–ñ–ù–û!

    await message.answer(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 9\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:",
        reply_markup=culture_keyboard(),
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data.startswith('culture:'), state=AddBatch.culture)
async def add_batch_culture(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫—É–ª—å—Ç—É—Ä—ã –¥–ª—è –ø–∞—Ä—Ç–∏–∏"""
    try:
        culture = callback.data.split(':', 1)[1]
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}, data: {callback.data}")
        return
    
    await state.update_data(culture=culture)
    
    await callback.message.edit_text(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
        "–®–∞–≥ 2 –∏–∑ 9\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
        reply_markup=region_keyboard(),
        parse_mode='HTML'
    )
    await AddBatch.region.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('region:'), state=AddBatch.region)
async def add_batch_region(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞ –¥–ª—è –ø–∞—Ä—Ç–∏–∏"""
    region = callback.data.split(':', 1)[1]
    await state.update_data(region=region)
    
    await callback.message.edit_text(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
        "–®–∞–≥ 3 –∏–∑ 9\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –ø–∞—Ä—Ç–∏–∏ (–≤ —Ç–æ–Ω–Ω–∞—Ö):",
        parse_mode='HTML'
    )
    await AddBatch.volume.set()
    await callback.answer()

@dp.message_handler(state=AddBatch.volume)
async def add_batch_volume(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –æ–±—ä—ë–º–∞ –ø–∞—Ä—Ç–∏–∏"""
    try:
        volume = float(message.text.strip().replace(',', '.'))
        if volume <= 0:
            raise ValueError
        
        await state.update_data(volume=volume)
        
        await message.answer(
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
            "–®–∞–≥ 4 –∏–∑ 9\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (‚ÇΩ/—Ç–æ–Ω–Ω–∞):",
            parse_mode='HTML'
        )
        await AddBatch.price.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")

@dp.message_handler(state=AddBatch.price)
async def add_batch_price(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ —Ü–µ–Ω—ã –ø–∞—Ä—Ç–∏–∏"""
    try:
        price = float(message.text.strip().replace(',', '.'))
        if price <= 0:
            raise ValueError
        
        await state.update_data(price=price)
        
        await message.answer(
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
            "–®–∞–≥ 5 –∏–∑ 9\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–ª–∞–∂–Ω–æ—Å—Ç—å (%):",
            parse_mode='HTML'
        )
        await AddBatch.humidity.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")

@dp.message_handler(state=AddBatch.humidity)
async def add_batch_humidity(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–∏–∏"""
    try:
        humidity = float(message.text.strip().replace(',', '.'))
        if not 0 <= humidity <= 100:
            raise ValueError
        
        await state.update_data(humidity=humidity)
        
        await message.answer(
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
            "–®–∞–≥ 6 –∏–∑ 9\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ—Ä–Ω–æ—Å—Ç—å (%):",
            parse_mode='HTML'
        )
        await AddBatch.impurity.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:")

@dp.message_handler(state=AddBatch.impurity)
async def add_batch_impurity(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ —Å–æ—Ä–Ω–æ—Å—Ç–∏ –ø–∞—Ä—Ç–∏–∏"""
    try:
        impurity = float(message.text.strip().replace(',', '.'))
        if not 0 <= impurity <= 100:
            raise ValueError
        
        await state.update_data(impurity=impurity)
        data = await state.get_data()
        quality_class = determine_quality_class(data['humidity'], impurity)
        await state.update_data(quality_class=quality_class)
        
        await message.answer(
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
            "–®–∞–≥ 7 –∏–∑ 9\n\n"
            f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞: <b>{quality_class}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=storage_type_keyboard(),
            parse_mode='HTML'
        )
        await AddBatch.storage_type.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:")

@dp.callback_query_handler(lambda c: c.data.startswith('storage:'), state=AddBatch.storage_type)
async def add_batch_storage_type(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    storage_type = callback.data.split(':', 1)[1]
    await state.update_data(storage_type=storage_type)
    
    await callback.message.edit_text(
        "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏</b>\n\n"
        "–®–∞–≥ 8 –∏–∑ 9\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì) –∏–ª–∏ '—Å–µ–π—á–∞—Å' –µ—Å–ª–∏ –≥–æ—Ç–æ–≤–∞:",
        parse_mode='HTML'
    )
    await AddBatch.readiness_date.set()
    await callback.answer()

@dp.message_handler(state=AddBatch.readiness_date)
async def add_batch_readiness_date(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏"""
    global batch_counter
    readiness_date = message.text.strip()

    if readiness_date.lower() == '—Å–µ–π—á–∞—Å':
        readiness_date = datetime.now().strftime('%d.%m.%Y')
    elif not validate_date(readiness_date):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '—Å–µ–π—á–∞—Å':")
        return
    
    user_id = message.from_user.id
    data = await state.get_data()
    
    batch_counter += 1
    batch = {
        'id': batch_counter,
        'farmer_id': user_id,
        'farmer_name': users[user_id].get('name', ''),
        'culture': data['culture'],
        'region': data['region'],
        'volume': data['volume'],
        'price': data['price'],
        'humidity': data['humidity'],
        'impurity': data['impurity'],
        'quality_class': data['quality_class'],
        'storage_type': data['storage_type'],
        'readiness_date': readiness_date,
        'status': '–ê–∫—Ç–∏–≤–Ω–∞',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'files': [],
        'matches': []  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Å –ø—É–ª–∞–º–∏
    }
    
    if user_id not in farmer_batches:
        farmer_batches[user_id] = []
    farmer_batches[user_id].append(batch)
    
    save_batches_to_pickle()
    
    if gs and gs.spreadsheet:
        gs.sync_batch_to_sheets(batch)
    
    await state.finish()
    
    matching_pulls = await find_matching_exporters(batch)
    
    keyboard = get_role_keyboard('farmer')
    
    message_text = (
        f"‚úÖ <b>–ü–∞—Ä—Ç–∏—è #{batch['id']} –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {batch['culture']}\n"
        f"üìç –†–µ–≥–∏–æ–Ω: {batch['region']}\n"
        f"üì¶ –û–±—ä—ë–º: {batch['volume']} —Ç\n"
        f"üí∞ –¶–µ–Ω–∞: {batch['price']:,.0f} ‚ÇΩ/—Ç\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {batch['humidity']}%\n"
        f"üåæ –°–æ—Ä–Ω–æ—Å—Ç—å: {batch['impurity']}%\n"
        f"‚≠ê –ö–ª–∞—Å—Å: {batch['quality_class']}\n"
        f"üè≠ –•—Ä–∞–Ω–µ–Ω–∏–µ: {batch['storage_type']}\n"
        f"üìÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {batch['readiness_date']}"
    )
    
    if matching_pulls:
        message_text += f"\n\nüéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–ª–æ–≤: {len(matching_pulls)}"
        for pull in matching_pulls:
            await notify_match(user_id, pull['exporter_id'], batch['id'], pull['id'])
    
    await message.answer(message_text, reply_markup=keyboard, parse_mode='HTML')
    
    if matching_pulls:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—É–ª—ã", callback_data=f"view_matches:{batch['id']}")
        )
        await message.answer(
            "–ú—ã –Ω–∞—à–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–µ—Ç –ø–æ–¥–æ–π—Ç–∏ –≤–∞—à–∞ –ø–∞—Ä—Ç–∏—è!",
            reply_markup=keyboard
        )

@dp.callback_query_handler(lambda c: c.data.startswith('view_matches:'), state='*')
async def view_batch_matches(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Ç–∏–∏"""
    batch_id = int(callback.data.split(':', 1)[1])
    user_id = callback.from_user.id
    
    batch = None
    if user_id in farmer_batches:
        for b in farmer_batches[user_id]:
            if b['id'] == batch_id:
                batch = b
                break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    batch_matches = []
    for match in matches.values():
        if (match['batch_id'] == batch_id and 
            match['status'] == 'active'):
            batch_matches.append(match)
    
    if not batch_matches:
        await callback.answer("ü§∑‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    text = f"üéØ <b>–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
    text += f"üåæ {batch['culture']} ‚Ä¢ {batch['volume']} —Ç ‚Ä¢ {batch['price']:,.0f} ‚ÇΩ/—Ç\n\n"
    
    for i, match in enumerate(batch_matches[:5], 1):
        pull_id = match['pull_id']
        if pull_id in pulls:
            pull = pulls[pull_id]
            progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
            
            text += f"{i}. <b>–ü—É–ª–ª #{pull_id}</b>\n"
            text += f"   üì¶ –ù—É–∂–Ω–æ: {pull['target_volume']} —Ç ({progress:.0f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)\n"
            text += f"   üí∞ –¶–µ–Ω–∞: ${pull['price']}/—Ç (~{pull['price'] * 75:,.0f} ‚ÇΩ/—Ç)\n"
            text += f"   üö¢ –ü–æ—Ä—Ç: {pull['port']}\n"
            text += f"   üë§ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä: {pull['exporter_name']}\n\n"
    
    if len(batch_matches) > 5:
        text += f"<i>... –∏ –µ—â—ë {len(batch_matches) - 5} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</i>\n\n"
    
    text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    
    await callback.message.answer(text, parse_mode='HTML')
    await callback.answer()

@dp.message_handler(lambda m: m.text == "üîß –ú–æ–∏ –ø–∞—Ä—Ç–∏–∏", state='*')
async def view_my_batches(message: types.Message, state: FSMContext):
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'farmer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä–∞–º")
        return
    
    if user_id not in farmer_batches or not farmer_batches[user_id]:
        await message.answer(
            "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π."
        )
        return
    
    batches = farmer_batches[user_id]
    
    active_batches = [b for b in batches if b.get('status') == '–ê–∫—Ç–∏–≤–Ω–∞']
    other_batches = [b for b in batches if b.get('status') != '–ê–∫—Ç–∏–≤–Ω–∞']
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for batch in active_batches:
        has_matches = any(m['batch_id'] == batch['id'] and m['status'] == 'active' 
                         for m in matches.values())
        match_emoji = "üéØ " if has_matches else ""
        
        button_text = (
            f"{match_emoji}‚úÖ {batch['culture']} - {batch['volume']} —Ç "
            f"({batch['price']:,.0f} ‚ÇΩ/—Ç)"
        )
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"view_batch:{batch['id']}")
        )
    
    for batch in other_batches:
        status_emoji = {
            '–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞': 'üîí',
            '–ü—Ä–æ–¥–∞–Ω–∞': 'üí∞',
            '–°–Ω—è—Ç–∞ —Å –ø—Ä–æ–¥–∞–∂–∏': '‚ùå'
        }.get(batch.get('status', '–ê–∫—Ç–∏–≤–Ω–∞'), 'üì¶')
        
        button_text = (
            f"{status_emoji} {batch['culture']} - {batch['volume']} —Ç "
            f"({batch['price']:,.0f} ‚ÇΩ/—Ç)"
        )
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"view_batch:{batch['id']}")
        )
    
    keyboard.add(
        InlineKeyboardButton("üîÑ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤", callback_data="auto_match_all")
    )
    
    await message.answer(
        f"üì¶ <b>–í–∞—à–∏ –ø–∞—Ä—Ç–∏–∏</b> ({len(batches)} —à—Ç.)\n\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: {len(active_batches)}\n"
        f"üéØ –° —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º–∏: {len([b for b in active_batches if any(m['batch_id'] == b['id'] and m['status'] == 'active' for m in matches.values())])}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä—Ç–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
@dp.message_handler(lambda m: m.text == "üéØ –ü—É–ª—ã", state='*')
async def view_pools_menu(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—É–ª–æ–≤ –¥–ª—è —Ñ–µ—Ä–º–µ—Ä–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'farmer':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä–∞–º")
        return
    
    open_pulls = [pull for pull in pulls.values() if pull.get('status') == '–û—Ç–∫—Ä—ã—Ç']
    
    if not open_pulls:
        await message.answer(
            "üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É–ª—ã</b>\n\n"
            "–°–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—É–ª–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è.\n"
            "–ü—É–ª—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º–∏ –¥–ª—è —Å–±–æ—Ä–∞ –ø–∞—Ä—Ç–∏–π –∑–µ—Ä–Ω–∞.",
            parse_mode='HTML'
        )
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for pull in open_pulls[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑
        progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
        button_text = f"üåæ {pull['culture']} - {pull['target_volume']} —Ç ({progress:.0f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)"
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"view_pull_for_join:{pull['id']}")
        )
    
    await message.answer(
        f"üéØ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É–ª—ã</b> ({len(open_pulls)} —à—Ç.)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@dp.message_handler(lambda m: m.text == "üöö –ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É", state='*')
async def create_shipping_request(message: types.Message, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'exporter':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º")
        return
    
    user_pulls = [p for p in pulls.values() if p['exporter_id'] == user_id and p.get('status') == '–û—Ç–∫—Ä—ã—Ç']
    
    if not user_pulls:
        await message.answer(
            "üöö <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—É–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É.\n"
            "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—É–ª —á–µ—Ä–µ–∑ –º–µ–Ω—é '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—É–ª'"
        )
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for pull in user_pulls:
        button_text = f"üåæ {pull['culture']} - {pull['target_volume']} —Ç ‚Üí {pull['port']}"
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"create_shipping:{pull['id']}")
        )
    
    await message.answer(
        "üöö <b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫–∞:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
@dp.callback_query_handler(lambda c: c.data == 'refresh_prices', state='*')
async def refresh_prices(callback: types.CallbackQuery, state: FSMContext):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ)"""
    await state.finish()

    prices_msg = format_prices_message()
    
    try:
        await callback.message.edit_text(prices_msg, parse_mode='HTML')
        await callback.answer("‚úÖ –¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
    except MessageNotModified:
        await callback.answer("‚ÑπÔ∏è –¶–µ–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)

@dp.callback_query_handler(lambda c: c.data == "refresh_news", state='*')
async def refresh_news(callback: types.CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏...")
    await update_news_cache()
    
    news_msg = format_news_message()
    await callback.message.edit_text(
        news_msg, 
        parse_mode='HTML',
        disable_web_page_preview=True
    )

@dp.callback_query_handler(lambda c: c.data in ["view_analytics", "view_grain_news", "view_export_news"], state='*')
async def handle_other_news_buttons(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    button_texts = {
        "view_analytics": "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞",
        "view_grain_news": "üåæ –ù–æ–≤–æ—Å—Ç–∏ –∑–µ—Ä–Ω–∞", 
        "view_export_news": "üö¢ –≠–∫—Å–ø–æ—Ä—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"
    }
    
    text = button_texts.get(callback.data, "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    await callback.answer(f"{text} - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == "auto_match_all", state='*')
async def auto_match_all_batches(callback: types.CallbackQuery):
    """–ê–≤—Ç–æ–ø–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π"""
    user_id = callback.from_user.id
    
    if user_id not in farmer_batches:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø–∞—Ä—Ç–∏–π", show_alert=True)
        return
    
    active_batches = [b for b in farmer_batches[user_id] if b.get('status') == '–ê–∫—Ç–∏–≤–Ω–∞']
    
    if not active_batches:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π", show_alert=True)
        return
    
    await callback.answer("üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤...")
    
    total_matches = 0
    for batch in active_batches:
        matching_pulls = await find_matching_exporters(batch)
        if matching_pulls:
            total_matches += len(matching_pulls)
            for pull in matching_pulls:
                await notify_match(user_id, pull['exporter_id'], batch['id'], pull['id'])
        await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    if total_matches > 0:
        await callback.message.answer(
            f"‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {total_matches}\n"
            f"–≠–∫—Å–ø–æ—Ä—Ç—ë—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –ø–∞—Ä—Ç–∏—è—Ö."
        )
    else:
        await callback.message.answer(
            "ü§∑‚Äç‚ôÇÔ∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω\n"
            "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞\n"
            "‚Ä¢ –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
        )

async def view_batch_details_direct(message, batch_id: int, user_id: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏"""
    batch = None
    if user_id in farmer_batches:
        for b in farmer_batches[user_id]:
            if b['id'] == batch_id:
                batch = b
                break
    
    if not batch:
        await message.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    active_matches = [m for m in matches.values() 
                     if m['batch_id'] == batch_id and m['status'] == 'active']
    
    text = f"""
üì¶ <b>–ü–∞—Ä—Ç–∏—è #{batch['id']}</b>

üåæ –ö—É–ª—å—Ç—É—Ä–∞: {batch['culture']}
üìç –†–µ–≥–∏–æ–Ω: {batch['region']}
üì¶ –û–±—ä—ë–º: {batch['volume']} —Ç
üí∞ –¶–µ–Ω–∞: {batch['price']:,.0f} ‚ÇΩ/—Ç
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {batch['humidity']}%
üåæ –°–æ—Ä–Ω–æ—Å—Ç—å: {batch['impurity']}%
‚≠ê –ö–ª–∞—Å—Å: {batch['quality_class']}
üè≠ –•—Ä–∞–Ω–µ–Ω–∏–µ: {batch['storage_type']}
üìÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {batch['readiness_date']}
üìä –°—Ç–∞—Ç—É—Å: {batch.get('status', '–ê–∫—Ç–∏–≤–Ω–∞')}
üìÖ –°–æ–∑–¥–∞–Ω–æ: {batch['created_at']}
"""
    
    if active_matches:
        text += f"\nüéØ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(active_matches)}</b>"
    
    if batch.get('files'):
        text += f"\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(batch['files'])}"
    
    keyboard = batch_actions_keyboard(batch_id)
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')

@dp.callback_query_handler(lambda c: c.data.startswith('view_batch:'), state='*')
async def view_batch_details_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()  #–¢–µ–ø–µ—Ä—å state –æ–ø—Ä–µ–¥–µ–ª–µ–Ω ‚úÖ
    batch_id = int(callback.data.split(':', 1)[1])
    user_id = callback.from_user.id
    await view_batch_details_direct(callback.message, batch_id, user_id)
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('find_exporters:'), state='*')
async def find_exporters_for_batch(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—Ç–∏–∏"""
    await state.finish()
    
    try:
        batch_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞: {e}, data: {callback.data}")
        return
    
    user_id = callback.from_user.id
    batch = None
    if user_id in farmer_batches:
        for b in farmer_batches[user_id]:
            if b['id'] == batch_id:
                batch = b
                break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    await callback.answer("üîç –ò—â–µ–º —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤...")
    matching_pulls = await find_matching_exporters(batch)
    
    if matching_pulls:
        text = f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ {len(matching_pulls)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤!</b>\n\n"
        
        for i, pull in enumerate(matching_pulls[:5], 1):
            available = pull['target_volume'] - pull['current_volume']
            text += f"{i}. <b>–ü—É–ª #{pull['id']}</b>\n"
            text += f"   üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull['culture']}\n"
            text += f"   üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: {available} —Ç\n"
            text += f"   üí∞ –¶–µ–Ω–∞ FOB: ${pull['price']}/—Ç\n"
            text += f"   üö¢ –ü–æ—Ä—Ç: {pull['port']}\n"
            text += f"   üë§ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä: {pull['exporter_name']}\n\n"
        
        if len(matching_pulls) > 5:
            text += f"...–∏ –µ—â—ë {len(matching_pulls) - 5} –ø—É–ª–æ–≤\n\n"
        
        text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é 'üåæ –ü—É–ª—ã' –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."
        
        await callback.message.answer(text, parse_mode='HTML')
    else:
        await callback.message.answer(
            "ü§∑‚Äç‚ôÇÔ∏è <b>–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</b>\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º:\n"
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ü–µ–Ω\n"
            "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞\n"
            "‚Ä¢ –ü–æ–¥–æ–∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π",
            parse_mode='HTML'
        )
    
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == 'back_to_my_batches', state='*')
async def back_to_my_batches(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–∞—Ä—Ç–∏–π"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    if user_id not in users or users[user_id].get('role') != 'farmer':
        await callback.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–µ—Ä–º–µ—Ä–∞–º", show_alert=True)
        return
    
    if user_id not in farmer_batches or not farmer_batches[user_id]:
        await callback.message.edit_text(
            "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–∏—é' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π."
        )
        await callback.answer()
        return
    
    batches = farmer_batches[user_id]
    active_batches = [b for b in batches if b.get('status') == '–ê–∫—Ç–∏–≤–Ω–∞']
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for batch in active_batches:
        button_text = f"‚úÖ {batch['culture']} - {batch['volume']} —Ç ({batch['price']:,.0f} ‚ÇΩ/—Ç)"
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"view_batch:{batch['id']}")
        )
    
    if active_batches:
        keyboard.add(
            InlineKeyboardButton("üîç –ê–≤—Ç–æ–ø–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤", callback_data="auto_match_all")
        )
    
    await callback.message.edit_text(
        f"üì¶ <b>–í–∞—à–∏ –ø–∞—Ä—Ç–∏–∏</b> ({len(batches)} —à—Ç.)\n\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ: {len(active_batches)}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–∞—Ä—Ç–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.message_handler(lambda m: m.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –ø—É–ª", state='*')
async def create_pull_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—É–ª–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'exporter':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º")
        return
    
    await message.answer(
        "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 10\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:",
        reply_markup=culture_keyboard(),
        parse_mode='HTML'
    )
    await CreatePull.culture.set()

@dp.callback_query_handler(lambda c: c.data.startswith('culture:'), state=CreatePull.culture)
async def create_pull_culture(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∫—É–ª—å—Ç—É—Ä—ã –¥–ª—è –ø—É–ª–∞"""
    culture = callback.data.split(':', 1)[1]
    await state.update_data(culture=culture)
    
    await callback.message.edit_text(
        "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
        "–®–∞–≥ 2 –∏–∑ 10\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤–æ–π –æ–±—ä—ë–º –ø—É–ª–∞ (–≤ —Ç–æ–Ω–Ω–∞—Ö):",
        parse_mode='HTML'
    )
    await CreatePull.volume.set()
    await callback.answer()

@dp.message_handler(state=CreatePull.volume)
async def create_pull_volume(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –æ–±—ä—ë–º–∞ –ø—É–ª–∞"""
    try:
        volume = float(message.text.strip().replace(',', '.'))
        if volume <= 0:
            raise ValueError
        
        await state.update_data(target_volume=volume)
        
        await message.answer(
            "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            "–®–∞–≥ 3 –∏–∑ 10\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É FOB ($/—Ç–æ–Ω–Ω–∞):",
            parse_mode='HTML'
        )
        await CreatePull.price.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")

@dp.message_handler(state=CreatePull.price)
async def create_pull_price(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ —Ü–µ–Ω—ã –ø—É–ª–∞"""
    try:
        price = float(message.text.strip().replace(',', '.'))
        if price <= 0:
            raise ValueError
        
        await state.update_data(price=price)
        
        await message.answer(
            "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            "–®–∞–≥ 4 –∏–∑ 10\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –æ—Ç–≥—Ä—É–∑–∫–∏:",
            reply_markup=port_keyboard(),
            parse_mode='HTML'
        )
        await CreatePull.port.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")

@dp.callback_query_handler(lambda c: c.data.startswith('port:'), state=CreatePull.port)
async def create_pull_port(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ—Ä—Ç–∞ –¥–ª—è –ø—É–ª–∞"""
    port_index = int(callback.data.split(':', 1)[1])
    ports = ['–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å', '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫', '–ê–∑–æ–≤', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–¢–∞–º–∞–Ω—å', '–ö–∞–≤–∫–∞–∑', '–¢—É–∞–ø—Å–µ', '–ü–æ—Ä—Ç –û–ª—è']
    port = ports[port_index] if port_index < len(ports) else '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å'
    
    await state.update_data(port=port)
    
    await callback.message.edit_text(
        "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
        "–®–∞–≥ 5 –∏–∑ 10\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å (%):",
        parse_mode='HTML'
    )
    await CreatePull.moisture.set()
    await callback.answer()

@dp.message_handler(state=CreatePull.moisture)
async def create_pull_moisture(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—É–ª–∞"""
    try:
        moisture = float(message.text.strip().replace(',', '.'))
        if not 0 <= moisture <= 100:
            raise ValueError
        
        await state.update_data(moisture=moisture)
        
        await message.answer(
            "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            "–®–∞–≥ 6 –∏–∑ 10\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –Ω–∞—Ç—É—Ä—É (–≥/–ª):",
            parse_mode='HTML'
        )
        await CreatePull.nature.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:")

@dp.message_handler(state=CreatePull.nature)
async def create_pull_nature(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –Ω–∞—Ç—É—Ä—ã –¥–ª—è –ø—É–ª–∞"""
    try:
        nature = float(message.text.strip().replace(',', '.'))
        if nature <= 0:
            raise ValueError
        
        await state.update_data(nature=nature)
        
        await message.answer(
            "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            "–®–∞–≥ 7 –∏–∑ 10\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–æ—Ä–Ω–æ—Å—Ç—å (%):",
            parse_mode='HTML'
        )
        await CreatePull.impurity.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")

@dp.message_handler(state=CreatePull.impurity)
async def create_pull_impurity(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ —Å–æ—Ä–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—É–ª–∞"""
    try:
        impurity = float(message.text.strip().replace(',', '.'))
        if not 0 <= impurity <= 100:
            raise ValueError
        
        await state.update_data(impurity=impurity)
        
        await message.answer(
            "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            "–®–∞–≥ 8 –∏–∑ 10\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å (%):",
            parse_mode='HTML'
        )
        await CreatePull.weed.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:")

@dp.message_handler(state=CreatePull.weed)
async def create_pull_weed(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –∑–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—É–ª–∞"""
    try:
        weed = float(message.text.strip().replace(',', '.'))
        if not 0 <= weed <= 100:
            raise ValueError
        
        await state.update_data(weed=weed)
        
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="pull_docs:yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="pull_docs:no")
        )
        
        await message.answer(
            "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            "–®–∞–≥ 9 –∏–∑ 10\n\n"
            "–¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã?",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await CreatePull.documents.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100:")

@dp.callback_query_handler(lambda c: c.data.startswith('pull_docs:'), state=CreatePull.documents)
async def create_pull_documents(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    needs_docs = callback.data.split(':', 1)[1] == 'yes'
    
    if needs_docs:
        await state.update_data(documents='–î–∞')
        
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("üìÑ –§–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π", callback_data="doc_type:phyto"),
            InlineKeyboardButton("üß™ –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π", callback_data="doc_type:vet"),
            InlineKeyboardButton("üìã –ö–∞—á–µ—Å—Ç–≤–æ", callback_data="doc_type:quality"),
            InlineKeyboardButton("üìä –í—Å–µ", callback_data="doc_type:all")
        )
        
        await callback.message.edit_text(
            "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞</b>\n\n"
            "–®–∞–≥ 10 –∏–∑ 10\n\n"
            "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç—Å—è?",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await CreatePull.doc_type.set()
    else:
        await state.update_data(documents='–ù–µ—Ç', doc_type='–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è')
        await finalize_pull_creation(callback.message, state, callback.from_user.id)
    
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('doc_type:'), state=CreatePull.doc_type)
async def create_pull_doc_type(callback: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    doc_type_map = {
        'phyto': '–§–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π',
        'vet': '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–π', 
        'quality': '–ö–∞—á–µ—Å—Ç–≤–æ',
        'all': '–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
    }
    
    doc_type_key = callback.data.split(':', 1)[1]
    doc_type = doc_type_map.get(doc_type_key, '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    await state.update_data(doc_type=doc_type)
    await finalize_pull_creation(callback.message, state, callback.from_user.id)
    await callback.answer()

async def finalize_pull_creation(message, state: FSMContext, user_id: int):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—É–ª–∞"""
    global pull_counter
    
    data = await state.get_data()
    pull_counter += 1
    
    pull = {
        'id': pull_counter,
        'exporter_id': user_id,
        'exporter_name': users[user_id].get('name', ''),
        'culture': data['culture'],
        'target_volume': data['target_volume'],
        'current_volume': 0,
        'price': data['price'],
        'port': data['port'],
        'moisture': data['moisture'],
        'nature': data['nature'],
        'impurity': data['impurity'],
        'weed': data['weed'],
        'documents': data.get('documents', '–ù–µ—Ç'),
        'doc_type': data.get('doc_type', '–ù–µ —Ç—Ä–µ–±—É—é—Ç—Å—è'),
        'status': '–û—Ç–∫—Ä—ã—Ç',
        'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'participants': [],
        'matches': []   
    }
    
    pulls[pull_counter] = pull
    pull_participants[pull_counter] = []
    
    save_pulls_to_pickle()
    
    if gs and gs.spreadsheet:
        gs.sync_pull_to_sheets(pull)
    
    await state.finish()
    
    matching_batches = await find_matching_batches(pull)
    
    keyboard = get_role_keyboard('exporter')
    
    message_text = (
        f"‚úÖ <b>–ü—É–ª #{pull['id']} —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull['culture']}\n"
        f"üì¶ –¶–µ–ª–µ–≤–æ–π –æ–±—ä—ë–º: {pull['target_volume']} —Ç\n"
        f"üí∞ –¶–µ–Ω–∞ FOB: ${pull['price']}/—Ç\n"
        f"üö¢ –ü–æ—Ä—Ç: {pull['port']}\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: –¥–æ {pull['moisture']}%\n"
        f"üèãÔ∏è –ù–∞—Ç—É—Ä–∞: –æ—Ç {pull['nature']} –≥/–ª\n"
        f"üåæ –°–æ—Ä–Ω–æ—Å—Ç—å: –¥–æ {pull['impurity']}%\n"
        f"üåø –ó–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å: –¥–æ {pull['weed']}%\n"
        f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {pull['documents']}\n"
        f"üìã –¢–∏–ø: {pull['doc_type']}"
    )
    
    if matching_batches:
        message_text += f"\n\nüéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–∏–π: {len(matching_batches)}"
        for batch in matching_batches:
            await notify_match(batch['farmer_id'], user_id, batch['id'], pull['id'])
    
    await message.answer(message_text, reply_markup=keyboard, parse_mode='HTML')
    
    if matching_batches:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞—Ä—Ç–∏–∏", callback_data=f"view_pull_matches:{pull['id']}")
        )
        await message.answer(
            "–ú—ã –Ω–∞—à–ª–∏ —Ñ–µ—Ä–º–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å!",
            reply_markup=keyboard
        )

@dp.callback_query_handler(lambda c: c.data.startswith('view_pull_for_join:'), state='*')
async def view_pull_for_joining(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—É–ª–∞ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    await state.finish()
    
    try:
        pull_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}, data: {callback.data}")
        return
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
    
    text = f"""
üéØ <b>–ü—É–ª #{pull['id']} - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</b>

üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull['culture']}
üì¶ –¶–µ–ª–µ–≤–æ–π –æ–±—ä—ë–º: {pull['target_volume']} —Ç
üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {progress:.1f}%
üí∞ –¶–µ–Ω–∞ FOB: ${pull['price']}/—Ç (~{pull['price'] * 75:,.0f} ‚ÇΩ/—Ç)
üö¢ –ü–æ—Ä—Ç: {pull['port']}

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É:</b>
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: –¥–æ {pull['moisture']}%
üèãÔ∏è –ù–∞—Ç—É—Ä–∞: –æ—Ç {pull['nature']} –≥/–ª  
üåæ –°–æ—Ä–Ω–æ—Å—Ç—å: –¥–æ {pull['impurity']}%
üåø –ó–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å: –¥–æ {pull['weed']}%

üë§ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä: {pull['exporter_name']}
"""
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—É–ª—É", 
                           callback_data=f"joinpull:{pull_id}"), 
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø—É–ª–æ–≤", 
                           callback_data="back_to_pools_list")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "back_to_pools_list", state='*')
async def back_to_pools_list(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—É–ª–æ–≤"""
    await state.finish()
    
    user_id = callback.from_user.id
    
    open_pulls = [pull for pull in pulls.values() if pull.get('status') == '–û—Ç–∫—Ä—ã—Ç']
    
    if not open_pulls:
        await callback.message.edit_text(
            "üì¶ –°–µ–π—á–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø—É–ª–æ–≤.\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Ç —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤."
        )
        await callback.answer()
        return
    if user_id in farmer_batches and farmer_batches[user_id]:
        farmer_cultures = set(batch['culture'] for batch in farmer_batches[user_id])
        relevant_pulls = [p for p in open_pulls if p['culture'] in farmer_cultures]
        
        if relevant_pulls:
            open_pulls = relevant_pulls
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    for pull in open_pulls[:10]:
        available = pull['target_volume'] - pull['current_volume']
        progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
        
        button_text = f"üåæ {pull['culture']} | {available} —Ç | ${pull['price']}/—Ç ({progress:.0f}%)"
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"view_pull_for_join:{pull['id']}")
        )
    
    await callback.message.edit_text(
        f"üì¶ <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø—É–ª—ã</b> ({len(open_pulls)} —à—Ç.)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('view_pull_matches:'), state='*')
async def view_pull_matches(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –ø—É–ª–∞"""
    try:
        pull_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}, data: {callback.data}")
        return
    
    user_id = callback.from_user.id
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    if pull['exporter_id'] != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –ø—É–ª—É", show_alert=True)
        return
    pull_matches = []
    for match in matches.values():
        if (match['pull_id'] == pull_id and 
            match['status'] == 'active'):
            pull_matches.append(match)
    
    if not pull_matches:
        await callback.answer("ü§∑‚Äç‚ôÇÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    text = f"üéØ <b>–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –ø—É–ª–∞ #{pull_id}</b>\n\n"
    text += f"üåæ {pull['culture']} ‚Ä¢ {pull['target_volume']} —Ç ‚Ä¢ ${pull['price']}/—Ç\n\n"
    
    for i, match in enumerate(pull_matches[:5], 1):
        batch_id = match['batch_id']
        batch_info = None
        for batches in farmer_batches.values():
            for batch in batches:
                if batch['id'] == batch_id:
                    batch_info = batch
                    break
            if batch_info:
                break
        
        if batch_info:
            text += f"{i}. <b>–ü–∞—Ä—Ç–∏—è #{batch_id}</b>\n"
            text += f"   üì¶ –û–±—ä—ë–º: {batch_info['volume']} —Ç\n"
            text += f"   üí∞ –¶–µ–Ω–∞: {batch_info['price']:,.0f} ‚ÇΩ/—Ç\n"
            text += f"   üìç –†–µ–≥–∏–æ–Ω: {batch_info['region']}\n"
            text += f"   üë§ –§–µ—Ä–º–µ—Ä: {batch_info['farmer_name']}\n\n"
    
    if len(pull_matches) > 5:
        text += f"<i>... –∏ –µ—â—ë {len(pull_matches) - 5} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π</i>\n\n"
    
    text += "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ñ–µ—Ä–º–µ—Ä–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    
    await callback.message.answer(text, parse_mode='HTML')
    await callback.answer()

@dp.message_handler(lambda m: m.text == "üì¶ –ú–æ–∏ –ø—É–ª—ã", state='*')
async def view_my_pulls(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø—É–ª–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'exporter':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º")
        return
    my_pulls = {k: v for k, v in pulls.items() if v['exporter_id'] == user_id}
    
    if not my_pulls:
        await message.answer(
            "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—É–ª–æ–≤.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '‚ûï –°–æ–∑–¥–∞—Ç—å –ø—É–ª' –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ."
        )
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for pull_id, pull in my_pulls.items():
        status_emoji = {
            '–û—Ç–∫—Ä—ã—Ç': 'üü¢',
            '–í —Ä–∞–±–æ—Ç–µ': 'üü°', 
            '–ó–∞–∫—Ä—ã—Ç': 'üî¥',
            '–ó–∞–≤–µ—Ä—à—ë–Ω': '‚úÖ'
        }.get(pull.get('status', '–û—Ç–∫—Ä—ã—Ç'), 'üì¶')
        
        progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
        has_matches = any(m['pull_id'] == pull_id and m['status'] == 'active' 
                         for m in matches.values())
        match_emoji = "üéØ " if has_matches else ""
        
        button_text = (
            f"{match_emoji}{status_emoji} {pull['culture']} - {pull['current_volume']:.0f}/"
            f"{pull['target_volume']:.0f} —Ç ({progress:.0f}%)"
        )
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"view_pull:{pull_id}")
        )
    
    await message.answer(
        f"üì¶ <b>–í–∞—à–∏ –ø—É–ª—ã</b> ({len(my_pulls)} —à—Ç.)\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data.startswith('view_pull:'), state='*')
async def view_pull_details(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø—É–ª–∞"""
    try:
        pull_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}, data: {callback.data}")
        return
    
    user_id = callback.from_user.id
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    is_owner = pull['exporter_id'] == user_id
    
    progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
    active_matches = [m for m in matches.values() 
                     if m['pull_id'] == pull_id and m['status'] == 'active']
    
    text = f"""
üì¶ <b>–ü—É–ª #{pull['id']}</b>

üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull['culture']}
üì¶ –û–±—ä—ë–º: {pull['current_volume']:.0f}/{pull['target_volume']:.0f} —Ç ({progress:.0f}%)
üí∞ –¶–µ–Ω–∞ FOB: ${pull['price']}/—Ç (~{pull['price'] * 75:,.0f} ‚ÇΩ/—Ç)
üö¢ –ü–æ—Ä—Ç: {pull['port']}

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É:</b>
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: –¥–æ {pull['moisture']}%
üèãÔ∏è –ù–∞—Ç—É—Ä–∞: –æ—Ç {pull['nature']} –≥/–ª
üåæ –°–æ—Ä–Ω–æ—Å—Ç—å: –¥–æ {pull['impurity']}%
üåø –ó–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å: –¥–æ {pull['weed']}%

üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {pull['documents']}
üìã –¢–∏–ø: {pull['doc_type']}
üìä –°—Ç–∞—Ç—É—Å: {pull.get('status', '–û—Ç–∫—Ä—ã—Ç')}
üë§ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä: {pull['exporter_name']}
üìÖ –°–æ–∑–¥–∞–Ω: {pull['created_at']}
"""
    
    if active_matches:
        text += f"\nüéØ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(active_matches)}</b>"
    
    participants_count = len(pull.get('participants', []))
    if participants_count > 0:
        text += f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if is_owner:
        keyboard.add(
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_pull:{pull_id}"),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_pull:{pull_id}")
        )
        
        if active_matches:
            keyboard.add(
                InlineKeyboardButton("üéØ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", callback_data=f"view_pull_matches:{pull_id}")
            )
        
        keyboard.add(
            InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"pull_participants:{pull_id}"),
            InlineKeyboardButton("üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞", callback_data=f"pull_logistics:{pull_id}")
        )
    else:
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"joinpull:{pull_id}")
        )
    
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_pulls")
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.message_handler(lambda m: m.text == "üîç –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–∏–∏", state='*')
async def search_batches_for_exporter(message: types.Message, state: FSMContext):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users or users[user_id].get('role') != 'exporter':
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º")
        return
    
    await message.answer(
        "üîç <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞:",
        reply_markup=search_criteria_keyboard(),
        parse_mode='HTML'
    )

@dp.callback_query_handler(lambda c: c.data.startswith('search_by:'), state='*')
async def select_search_criteria(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞"""
    search_type = callback.data.split(':', 1)[1]
    
    await state.update_data(search_type=search_type)
    
    if search_type == 'culture':
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –∫—É–ª—å—Ç—É—Ä–µ</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:",
            reply_markup=culture_keyboard()
        )
        await SearchBatchesStatesGroup.enter_culture.set()
    
    elif search_type == 'region':
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ —Ä–µ–≥–∏–æ–Ω—É</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
            reply_markup=region_keyboard()
        )
        await SearchBatchesStatesGroup.enter_region.set()
    
    elif search_type == 'volume':
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –æ–±—ä—ë–º—É</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º (–≤ —Ç–æ–Ω–Ω–∞—Ö):"
        )
        await SearchBatchesStatesGroup.enter_min_volume.set()
    
    elif search_type == 'price':
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ —Ü–µ–Ω–µ</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (‚ÇΩ/—Ç–æ–Ω–Ω–∞):"
        )
        await SearchBatchesStatesGroup.enter_min_price.set()
    
    elif search_type == 'quality':
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –∫–ª–∞—Å—Å—É –∫–∞—á–µ—Å—Ç–≤–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞:",
            reply_markup=quality_class_keyboard()
        )
        await SearchBatchesStatesGroup.enter_quality_class.set()
    
    elif search_type == 'storage':
        await callback.message.edit_text(
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ —Ç–∏–ø—É —Ö—Ä–∞–Ω–µ–Ω–∏—è</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=storage_type_keyboard()
        )
        await SearchBatchesStatesGroup.enter_storage_type.set()
    
    elif search_type == 'all':
        await callback.message.edit_text(
            "üîç <b>–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É:",
            reply_markup=culture_keyboard()
        )
        await SearchBatchesStatesGroup.enter_culture.set()
    
    elif search_type == 'active':
        await perform_search(callback.message, {'status': '–ê–∫—Ç–∏–≤–Ω–∞'})
    
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('culture:'), state=SearchBatchesStatesGroup.enter_culture)
async def search_by_culture(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É–ª—å—Ç—É—Ä—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    culture = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    search_type = data.get('search_type')
    
    if search_type == 'culture':
        await perform_search(callback.message, {'culture': culture})
        await state.finish()
    else:
        await state.update_data(culture=culture)
        await callback.message.edit_text(
            "üîç <b>–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω:",
            reply_markup=region_keyboard()
        )
        await SearchBatchesStatesGroup.enter_region.set()
    
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('region:'), state=SearchBatchesStatesGroup.enter_region)
async def search_by_region(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    region = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    search_type = data.get('search_type')
    
    if search_type == 'region':
        await perform_search(callback.message, {'region': region})
        await state.finish()
    else:
        await state.update_data(region=region)
        await callback.message.edit_text(
            "üîç <b>–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º (–≤ —Ç–æ–Ω–Ω–∞—Ö):"
        )
        await SearchBatchesStatesGroup.enter_min_volume.set()
    
    await callback.answer()

@dp.message_handler(state=SearchBatchesStatesGroup.enter_min_volume)
async def search_min_volume(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—ë–º–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    try:
        min_volume = float(message.text.strip().replace(',', '.'))
        if min_volume < 0:
            raise ValueError
        
        data = await state.get_data()
        
        if data.get('search_type') == 'volume':
            await perform_search(message, {'min_volume': min_volume})
            await state.finish()
        else:
            await state.update_data(min_volume=min_volume)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º (–≤ —Ç–æ–Ω–Ω–∞—Ö, –∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ):")
            await SearchBatchesStatesGroup.enter_max_volume.set()
            
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.message_handler(state=SearchBatchesStatesGroup.enter_max_volume)
async def search_max_volume(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–±—ä—ë–º–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    try:
        max_volume_text = message.text.strip()
        max_volume = float(max_volume_text.replace(',', '.')) if max_volume_text != '0' else 0
        
        if max_volume < 0:
            raise ValueError
        
        await state.update_data(max_volume=max_volume)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (‚ÇΩ/—Ç–æ–Ω–Ω–∞):")
        await SearchBatchesStatesGroup.enter_min_price.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.message_handler(state=SearchBatchesStatesGroup.enter_min_price)
async def search_min_price(message: types.Message, state: FSMContext):
    """–í–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    try:
        min_price = float(message.text.strip().replace(',', '.'))
        if min_price < 0:
            raise ValueError
        
        await state.update_data(min_price=min_price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (‚ÇΩ/—Ç–æ–Ω–Ω–∞, –∏–ª–∏ 0 –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ):")
        await SearchBatchesStatesGroup.enter_max_price.set()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.message_handler(state=SearchBatchesStatesGroup.enter_max_price)
async def search_max_price(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    try:
        max_price_text = message.text.strip()
        max_price = float(max_price_text.replace(',', '.')) if max_price_text != '0' else 0
        
        if max_price < 0:
            raise ValueError
        
        data = await state.get_data()
        search_params = {
            'culture': data.get('culture'),
            'region': data.get('region'),
            'min_volume': data.get('min_volume', 0),
            'max_volume': data.get('max_volume', 0),
            'min_price': data.get('min_price', 0),
            'max_price': max_price,
            'status': '–ê–∫—Ç–∏–≤–Ω–∞'
        }
        
        await perform_search(message, search_params)
        await state.finish()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@dp.callback_query_handler(lambda c: c.data.startswith('quality:'), state=SearchBatchesStatesGroup.enter_quality_class)
async def search_by_quality(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    quality_class = callback.data.split(':', 1)[1]
    
    await perform_search(callback.message, {'quality_class': quality_class})
    await state.finish()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('storage:'), state=SearchBatchesStatesGroup.enter_storage_type)
async def search_by_storage(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"""
    storage_type = callback.data.split(':', 1)[1]
    
    await perform_search(callback.message, {'storage_type': storage_type})
    await state.finish()
    await callback.answer()

async def perform_search(message, search_params):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    found_batches = []
    
    for user_batches in farmer_batches.values():
        for batch in user_batches:
            if matches_search_criteria(batch, search_params):
                found_batches.append(batch)
    
    if not found_batches:
        await message.answer(
            "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
            "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.",
            parse_mode='HTML'
        )
        return
    found_batches.sort(key=lambda x: x['price'])
    
    text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
    text += f"–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä—Ç–∏–π: {len(found_batches)}\n\n"
    
    for i, batch in enumerate(found_batches[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑
        text += f"{i}. <b>–ü–∞—Ä—Ç–∏—è #{batch['id']}</b>\n"
        text += f"   üåæ {batch['culture']} ‚Ä¢ {batch['volume']} —Ç\n"
        text += f"   üí∞ {batch['price']:,.0f} ‚ÇΩ/—Ç\n"
        text += f"   üìç {batch['region']}\n"
        text += f"   ‚≠ê {batch['quality_class']}\n"
        text += f"   üë§ {batch['farmer_name']}\n\n"
    
    if len(found_batches) > 10:
        text += f"<i>... –∏ –µ—â—ë {len(found_batches) - 10} –ø–∞—Ä—Ç–∏–π</i>\n\n"
    
    text += "üí° <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ñ–µ—Ä–º–µ—Ä–æ–º.</b>"
    
    await message.answer(text, parse_mode='HTML')

def matches_search_criteria(batch, search_params):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–∞—Ä—Ç–∏–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –ø–æ–∏—Å–∫–∞"""
    if batch.get('status') != '–ê–∫—Ç–∏–≤–Ω–∞':
        return False
    if search_params.get('culture') and batch['culture'] != search_params['culture']:
        return False
    if search_params.get('region') and batch['region'] != search_params['region']:
        return False
    if search_params.get('min_volume', 0) > 0 and batch['volume'] < search_params['min_volume']:
        return False
    if (search_params.get('max_volume', 0) > 0 and 
        search_params['max_volume'] < batch['volume']):
        return False
    if search_params.get('min_price', 0) > 0 and batch['price'] < search_params['min_price']:
        return False
    if (search_params.get('max_price', 0) > 0 and 
        search_params['max_price'] < batch['price']):
        return False
    if (search_params.get('quality_class') and 
        batch['quality_class'] != search_params['quality_class']):
        return False
    if (search_params.get('storage_type') and 
        batch['storage_type'] != search_params['storage_type']):
        return False
    
    return True

@dp.callback_query_handler(lambda c: c.data.startswith('attach_files:'), state='*')
async def attach_files_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫ –ø–∞—Ä—Ç–∏–∏"""
    batch_id = int(callback.data.split(':', 1)[1])
    await state.update_data(attach_batch_id=batch_id)
    
    await callback.message.edit_text(
        f"üìé <b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫ –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ, PDF, –¥–æ–∫—É–º–µ–Ω—Ç—ã):\n"
        "‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞\n"
        "‚Ä¢ –§–æ—Ç–æ –∑–µ—Ä–Ω–∞\n" 
        "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –ø–∞—Ä—Ç–∏—é\n"
        "‚Ä¢ –î—Ä—É–≥–∏–µ relevant —Ñ–∞–π–ª—ã\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ /done",
        parse_mode='HTML'
    )
    await AttachFilesStatesGroup.upload_files.set()
    await callback.answer()

@dp.message_handler(content_types=['photo', 'document'], state=AttachFilesStatesGroup.upload_files)
async def attach_files_upload(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    data = await state.get_data()
    batch_id = data.get('attach_batch_id')
    user_id = message.from_user.id
    batch = None
    if user_id in farmer_batches:
        for b in farmer_batches[user_id]:
            if b['id'] == batch_id:
                batch = b
                break
    
    if not batch:
        await message.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.finish()
        return
    if 'files' not in batch:
        batch['files'] = []
    file_info = None
    if message.photo:
        file_info = {
            'type': 'photo',
            'file_id': message.photo[-1].file_id,
            'caption': message.caption or '',
            'uploaded_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    elif message.document:
        file_info = {
            'type': 'document',
            'file_id': message.document.file_id,
            'file_name': message.document.file_name,
            'mime_type': message.document.mime_type,
            'caption': message.caption or '',
            'uploaded_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
    
    if file_info:
        batch['files'].append(file_info)
        save_batches_to_pickle()
        if gs and gs.spreadsheet:
            gs.update_batch_in_sheets(batch)
        
        await message.answer(
            f"‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω ({len(batch['files'])} –≤—Å–µ–≥–æ)\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        )

@dp.message_handler(commands=['done'], state=AttachFilesStatesGroup.upload_files)
async def attach_files_done(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
    data = await state.get_data()
    batch_id = data.get('attach_batch_id')
    user_id = message.from_user.id
    
    batch = None
    if user_id in farmer_batches:
        for b in farmer_batches[user_id]:
            if b['id'] == batch_id:
                batch = b
                break
    
    await state.finish()
    
    files_count = len(batch.get('files', [])) if batch else 0
    
    role = users[user_id].get('role')
    keyboard = get_role_keyboard(role)
    
    await message.answer(
        f"‚úÖ <b>–§–∞–π–ª—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã!</b>\n\n"
        f"–ü–∞—Ä—Ç–∏—è #{batch_id}\n"
        f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {files_count}",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await view_batch_details_direct(message, batch_id, user_id)

@dp.callback_query_handler(lambda c: c.data.startswith('view_files:'), state='*')
async def view_batch_files(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤ –ø–∞—Ä—Ç–∏–∏"""
    batch_id = int(callback.data.split(':', 1)[1])
    user_id = callback.from_user.id
    batch = None
    if user_id in farmer_batches:
        for b in farmer_batches[user_id]:
            if b['id'] == batch_id:
                batch = b
                break
    
    if not batch or not batch.get('files'):
        await callback.answer("üìé –§–∞–π–ª–æ–≤ –Ω–µ—Ç", show_alert=True)
        return
    
    await callback.message.answer(
        f"üìé <b>–§–∞–π–ª—ã –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
        f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(batch['files'])}",
        parse_mode='HTML'
    )
    for file_info in batch['files']:
        try:
            if file_info['type'] == 'photo':
                await callback.message.answer_photo(
                    file_info['file_id'],
                    caption=file_info.get('caption', '') or f"üì∑ –§–æ—Ç–æ –¥–ª—è –ø–∞—Ä—Ç–∏–∏ #{batch_id}"
                )
            elif file_info['type'] == 'document':
                caption = f"üìÑ {file_info.get('file_name', '–î–æ–∫—É–º–µ–Ω—Ç')}"
                if file_info.get('caption'):
                    caption += f"\n{file_info['caption']}"
                
                await callback.message.answer_document(
                    file_info['file_id'],
                    caption=caption
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await callback.message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {file_info.get('file_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª')}"
            )
    
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "back_to_pulls", state='*')
async def back_to_pulls(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—É–ª–æ–≤"""
    user_id = callback.from_user.id
    
    if user_id not in users or users[user_id].get('role') != 'exporter':
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    my_pulls = {k: v for k, v in pulls.items() if v['exporter_id'] == user_id}
    
    if not my_pulls:
        await callback.message.edit_text("üì¶ –£ –≤–∞—Å –Ω–µ—Ç –ø—É–ª–æ–≤")
        await callback.answer()
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for pull_id, pull in my_pulls.items():
        status_emoji = {
            '–û—Ç–∫—Ä—ã—Ç': 'üü¢',
            '–í —Ä–∞–±–æ—Ç–µ': 'üü°',
            '–ó–∞–∫—Ä—ã—Ç': 'üî¥',
            '–ó–∞–≤–µ—Ä—à—ë–Ω': '‚úÖ'
        }.get(pull.get('status', '–û—Ç–∫—Ä—ã—Ç'), 'üì¶')
        
        progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
        
        has_matches = any(m['pull_id'] == pull_id and m['status'] == 'active' 
                         for m in matches.values())
        match_emoji = "üéØ " if has_matches else ""
        
        button_text = (
            f"{match_emoji}{status_emoji} {pull['culture']} - {pull['current_volume']:.0f}/"
            f"{pull['target_volume']:.0f} —Ç ({progress:.0f}%)"
        )
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"view_pull:{pull_id}")
        )
    
    await callback.message.edit_text(
        f"üì¶ <b>–í–∞—à–∏ –ø—É–ª—ã</b> ({len(my_pulls)} —à—Ç.)\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "back_to_deals", state='*')
async def back_to_deals(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å–¥–µ–ª–æ–∫"""
    user_id = callback.from_user.id
    
    user_deals = []
    for deal_id, deal in deals.items():
        if (deal.get('exporter_id') == user_id or 
            user_id in deal.get('farmer_ids', []) or
            deal.get('logistic_id') == user_id or
            deal.get('expeditor_id') == user_id):
            user_deals.append(deal)
    
    if not user_deals:
        await callback.message.edit_text("üìã –£ –≤–∞—Å –Ω–µ—Ç —Å–¥–µ–ª–æ–∫")
        await callback.answer()
        return
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    for deal in user_deals[:10]:
        status_emoji = {
            'pending': 'üîÑ',
            'matched': 'üéØ',
            'shipping': 'üöõ',
            'completed': '‚úÖ',
            'cancelled': '‚ùå'
        }.get(deal.get('status', 'pending'), 'üìã')
        
        deal_info = f"–°–¥–µ–ª–∫–∞ #{deal['id']}"
        if deal.get('total_volume'):
            deal_info += f" - {deal['total_volume']} —Ç"
        
        button_text = f"{status_emoji} {deal_info}"
        keyboard.add(
            InlineKeyboardButton(button_text, callback_data=f"view_deal:{deal['id']}")
        )
    
    await callback.message.edit_text(
        f"üìã <b>–í–∞—à–∏ —Å–¥–µ–ª–∫–∏</b> ({len(user_deals)} —à—Ç.)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.message_handler(commands=['stats'], state='*')
async def cmd_stats(message: types.Message, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    user = users[user_id]
    role = user.get('role')
    
    text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    text += f"üé≠ –†–æ–ª—å: {ROLES.get(role, role)}\n"
    
    if role == 'farmer':
        user_batches = farmer_batches.get(user_id, [])
        active_batches = [b for b in user_batches if b.get('status') == '–ê–∫—Ç–∏–≤–Ω–∞']
        matches_count = len([m for m in matches.values() 
                           if m['status'] == 'active' and 
                           any(b['id'] == m['batch_id'] for b in user_batches)])
        
        text += f"üì¶ –ü–∞—Ä—Ç–∏–π: {len(user_batches)}\n"
        text += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_batches)}\n"
        text += f"üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches_count}\n"
        
        if user_batches:
            total_volume = sum(b['volume'] for b in user_batches)
            avg_price = sum(b['price'] for b in user_batches) / len(user_batches)
            text += f"üì¶ –û–±—â–∏–π –æ–±—ä—ë–º: {total_volume:.0f} —Ç\n"
            text += f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,.0f} ‚ÇΩ/—Ç\n"
    
    elif role == 'exporter':
        user_pulls = [p for p in pulls.values() if p['exporter_id'] == user_id]
        open_pulls = [p for p in user_pulls if p.get('status') == '–û—Ç–∫—Ä—ã—Ç']
        matches_count = len([m for m in matches.values() 
                           if m['status'] == 'active' and 
                           any(p['id'] == m['pull_id'] for p in user_pulls)])
        
        text += f"üì¶ –ü—É–ª–æ–≤: {len(user_pulls)}\n"
        text += f"üü¢ –û—Ç–∫—Ä—ã—Ç—ã—Ö: {len(open_pulls)}\n"
        text += f"üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches_count}\n"
        
        if user_pulls:
            total_volume = sum(p['target_volume'] for p in user_pulls)
            filled_volume = sum(p['current_volume'] for p in user_pulls)
            fill_percentage = (filled_volume / total_volume * 100) if total_volume > 0 else 0
            text += f"üì¶ –¶–µ–ª–µ–≤–æ–π –æ–±—ä—ë–º: {total_volume:.0f} —Ç\n"
            text += f"üìà –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {fill_percentage:.1f}%\n"
    
    elif role in ['logistic', 'expeditor']:
        service_type = "–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö" if role == 'logistic' else "—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—Å–∫–∏—Ö"
        text += f"üíº {service_type.capitalize()} —É—Å–ª—É–≥: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
    
    text += f"\nüìÖ –ù–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ —Å: {user.get('registered_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    
    await message.answer(text, parse_mode='HTML')

@dp.message_handler(commands=['help'], state='*')
async def cmd_help(message: types.Message, state: FSMContext):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer(
            "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ Exportum</b>\n\n"
            "Exportum - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–µ—Ä–Ω–æ–º\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:\n"
            "1. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å\n"
            "3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å\n"
            "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:\n"
            "‚Ä¢ üåæ –§–µ—Ä–º–µ—Ä - –ø—Ä–æ–¥–∞–∂–∞ –∑–µ—Ä–Ω–∞\n"
            "‚Ä¢ üì¶ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä - –ø–æ–∫—É–ø–∫–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç\n"
            "‚Ä¢ üöö –õ–æ–≥–∏—Å—Ç - –ø–µ—Ä–µ–≤–æ–∑–∫–∏\n"
            "‚Ä¢ üöõ –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä - –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            parse_mode='HTML'
        )
        return
    
    user = users[user_id]
    role = user.get('role')
    
    text = f"‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –¥–ª—è {ROLES.get(role, role)}</b>\n\n"
    
    if role == 'farmer':
        text += (
            "üì¶ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–π:</b>\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫—É–ª—å—Ç—É—Ä—É, –æ–±—ä—ë–º, —Ü–µ–Ω—É\n"
            "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞\n"
            "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —Ñ–æ—Ç–æ\n\n"
            
            "üîç <b>–ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–æ–≤:</b>\n"  
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –ø—É–ª–∞–º\n"
            "‚Ä¢ –†—É—á–Ω–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö\n\n"
            
            "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏—è–º–∏:</b>\n"
            "‚Ä¢ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n\n"
            
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã\n"
            "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
            "‚Ä¢ –ü—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞"
        )
    
    elif role == 'exporter':
        text += (
            "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–æ–≤:</b>\n"
            "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∑–µ—Ä–Ω—É\n"
            "‚Ä¢ –ó–∞–¥–∞–π—Ç–µ —Ü–µ–Ω—É FOB\n"
            "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä—Ç –æ—Ç–≥—Ä—É–∑–∫–∏\n\n"
            
            "üîç <b>–ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–∏–π:</b>\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∏ –∫–∞—á–µ—Å—Ç–≤—É\n\n"
            
            "üöö <b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫—É\n"
            "‚Ä¢ –í—ã–±–æ—Ä –ª–æ–≥–∏—Å—Ç–æ–≤\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏\n\n"
            
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ß—ë—Ç–∫–æ —Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –°–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –ø—É–ª—ã"
        )
    
    elif role == 'logistic':
        text += (
            "üöö <b>–í–∞—à–∏ —É—Å–ª—É–≥–∏:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–≥–∏—Å—Ç–∞\n"
            "‚Ä¢ –£–∫–∞–∑–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤\n"
            "‚Ä¢ –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏\n\n"
            
            "üìã <b>–†–∞–±–æ—Ç–∞ —Å –∑–∞—è–≤–∫–∞–º–∏:</b>\n"
            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫\n"
            "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–≤–æ–∏—Ö —É—Å–ª—É–≥\n"
            "‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞–º–∏\n\n"
            
            "üíº <b>–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤\n"
            "‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–∑–∫–∏\n\n"
            
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã\n"
            "‚Ä¢ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ –Ω–∞ –∑–∞—è–≤–∫–∏\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        )
    
    elif role == 'expeditor':
        text += (
            "üöõ <b>–í–∞—à–∏ —É—Å–ª—É–≥–∏:</b>\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞\n"
            "‚Ä¢ –£–∫–∞–∑–∞–Ω–∏–µ —É—Å–ª—É–≥ –∏ —Ç–∞—Ä–∏—Ñ–æ–≤\n"
            "‚Ä¢ –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫ –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ\n\n"
            
            "üìã <b>–†–∞–±–æ—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:</b>\n"
            "‚Ä¢ –§–∏—Ç–æ—Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n"
            "‚Ä¢ –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–∞\n"
            "‚Ä¢ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞\n\n"
            
            "üíº <b>–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–π\n"
            "‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫\n"
            "‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏\n\n"
            
            "üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            "‚Ä¢ –ß—ë—Ç–∫–æ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ —É—Å–ª—É–≥–∏\n"
            "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—Ä–æ–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é"
        )
    
    text += f"\n\nüìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @exportum_support"
    
    await message.answer(text, parse_mode='HTML')

@dp.callback_query_handler(lambda c: c.data.startswith('edit_batch:'), state='*')
async def start_edit_batch(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏"""
    batch_id = int(callback.data.split(':', 1)[1])
    user_id = callback.from_user.id
    batch = None
    if user_id in farmer_batches:
        for b in farmer_batches[user_id]:
            if b['id'] == batch_id:
                batch = b
                break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    await state.update_data(editing_batch_id=batch_id)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=edit_batch_fields_keyboard(),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('edit_field:'), state='*')
async def edit_batch_field_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏"""
    field = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    batch_id = data.get('editing_batch_id')
    
    if not batch_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    await state.update_data(edit_field=field, editing_batch_id=batch_id)
    field_names = {
        'price': '–Ω–æ–≤—É—é —Ü–µ–Ω—É (‚ÇΩ/—Ç–æ–Ω–Ω–∞)',
        'volume': '–Ω–æ–≤—ã–π –æ–±—ä—ë–º (–≤ —Ç–æ–Ω–Ω–∞—Ö)',
        'humidity': '–Ω–æ–≤—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å (%)',
        'impurity': '–Ω–æ–≤—É—é —Å–æ—Ä–Ω–æ—Å—Ç—å (%)',
        'quality_class': '–Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞',
        'storage_type': '–Ω–æ–≤—ã–π —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è',
        'readiness_date': '–Ω–æ–≤—É—é –¥–∞—Ç—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–î–î.–ú–ú.–ì–ì–ì–ì)',
        'status': '–Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å'
    }
    
    if field == 'status':
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
            reply_markup=status_keyboard(),
            parse_mode='HTML'
        )
        await EditBatch.new_value.set()
    elif field == 'quality_class':
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞:",
            reply_markup=quality_class_keyboard(),
            parse_mode='HTML'
        )
        await EditBatch.new_value.set()
    elif field == 'storage_type':
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è:",
            reply_markup=storage_type_keyboard(),
            parse_mode='HTML'
        )
        await EditBatch.new_value.set()
    else:
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ #{batch_id}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ {field_names.get(field, '–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')}:"
        )
        await EditBatch.new_value.set()
    
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('status:'), state=EditBatch.new_value)
async def edit_batch_status_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏"""
    new_status = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    batch_id = data.get('editing_batch_id')
    user_id = callback.from_user.id
    
    if not batch_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
    batch = None
    if user_id in farmer_batches:
        for b in farmer_batches[user_id]:
            if b['id'] == batch_id:
                batch = b
                break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
    old_value = batch.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')
    batch['status'] = new_status
    save_batches_to_pickle()
    if gs and gs.spreadsheet:
        gs.update_batch_in_sheets(batch)
    
    await state.finish()
    await callback.message.edit_text(
        f"‚úÖ <b>–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
        f"–ü–∞—Ä—Ç–∏—è #{batch_id}\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_status}"
    )
    await asyncio.sleep(1)
    await view_batch_details_direct(callback.message, batch_id, user_id)
    await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")

@dp.callback_query_handler(lambda c: c.data.startswith('quality:'), state=EditBatch.new_value)
async def edit_batch_quality_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏"""
    new_quality = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    batch_id = data.get('editing_batch_id')
    user_id = callback.from_user.id
    
    if not batch_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
    batch = None
    if user_id in farmer_batches:
        for b in farmer_batches[user_id]:
            if b['id'] == batch_id:
                batch = b
                break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
    old_value = batch.get('quality_class', '–ù–µ —É–∫–∞–∑–∞–Ω')
    batch['quality_class'] = new_quality
    save_batches_to_pickle()
    if gs and gs.spreadsheet:
        gs.update_batch_in_sheets(batch)
    
    await state.finish()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ö–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
        f"–ü–∞—Ä—Ç–∏—è #{batch_id}\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_quality}"
    )
    await asyncio.sleep(1)
    await view_batch_details_direct(callback.message, batch_id, user_id)
    await callback.answer("‚úÖ –ö–ª–∞—Å—Å –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª—ë–Ω")

@dp.callback_query_handler(lambda c: c.data.startswith('storage:'), state=EditBatch.new_value)
async def edit_batch_storage_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏"""
    new_storage = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    batch_id = data.get('editing_batch_id')
    user_id = callback.from_user.id
    
    if not batch_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
    batch = None
    if user_id in farmer_batches:
        for b in farmer_batches[user_id]:
            if b['id'] == batch_id:
                batch = b
                break
    
    if not batch:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        await state.finish()
        return
    old_value = batch.get('storage_type', '–ù–µ —É–∫–∞–∑–∞–Ω')
    batch['storage_type'] = new_storage
    save_batches_to_pickle()
    if gs and gs.spreadsheet:
        gs.update_batch_in_sheets(batch)
    
    await state.finish()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
        f"–ü–∞—Ä—Ç–∏—è #{batch_id}\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_storage}"
    )
    await asyncio.sleep(1)
    await view_batch_details_direct(callback.message, batch_id, user_id)
    await callback.answer("‚úÖ –¢–∏–ø —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω")

@dp.message_handler(state=EditBatch.new_value)
async def edit_batch_new_value(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏"""
    data = await state.get_data()
    batch_id = data.get('editing_batch_id')
    field = data.get('edit_field')
    user_id = message.from_user.id
    
    if not batch_id or not field:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.finish()
        return
    batch = None
    if user_id in farmer_batches:
        for b in farmer_batches[user_id]:
            if b['id'] == batch_id:
                batch = b
                break
    
    if not batch:
        await message.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.finish()
        return
    
    new_value = message.text.strip()
    try:
        if field in ['price', 'volume', 'humidity', 'impurity']:
            new_value_float = float(new_value.replace(',', '.'))
            if field == 'price' and new_value_float <= 0:
                await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            elif field == 'volume' and new_value_float <= 0:
                await message.answer("‚ùå –û–±—ä—ë–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            elif field in ['humidity', 'impurity'] and not (0 <= new_value_float <= 100):
                await message.answer("‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            
            old_value = batch.get(field, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            batch[field] = new_value_float
            if field in ['humidity', 'impurity']:
                batch['quality_class'] = determine_quality_class(
                    batch.get('humidity', 0),
                    batch.get('impurity', 0)
                )
        
        elif field == 'readiness_date':
            if new_value.lower() == '—Å–µ–π—á–∞—Å':
                new_value = datetime.now().strftime('%d.%m.%Y')
            elif not validate_date(new_value):
                await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –∏–ª–∏ '—Å–µ–π—á–∞—Å'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            
            old_value = batch.get(field, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            batch[field] = new_value
        
        else:
            old_value = batch.get(field, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            batch[field] = new_value
        save_batches_to_pickle()
        if gs and gs.spreadsheet:
            gs.update_batch_in_sheets(batch)
        
        await state.finish()
        field_names_ru = {
            'price': '–¶–µ–Ω–∞',
            'volume': '–û–±—ä—ë–º',
            'humidity': '–í–ª–∞–∂–Ω–æ—Å—Ç—å',
            'impurity': '–°–æ—Ä–Ω–æ—Å—Ç—å',
            'readiness_date': '–î–∞—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏'
        }
        
        role = users[user_id].get('role')
        keyboard = get_role_keyboard(role)
        
        await message.answer(
            f"‚úÖ <b>{field_names_ru.get(field, field.capitalize())} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"–ü–∞—Ä—Ç–∏—è #{batch_id}\n"
            f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
            f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await view_batch_details_direct(message, batch_id, user_id)
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
        )

@dp.callback_query_handler(lambda c: c.data == 'edit_cancel', state='*')
async def edit_cancel(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.finish()
    await callback.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('delete_batch:'), state='*')
async def delete_batch_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏"""
    batch_id = int(callback.data.split(':', 1)[1])
    user_id = callback.from_user.id
    batch_exists = False
    if user_id in farmer_batches:
        for b in farmer_batches[user_id]:
            if b['id'] == batch_id:
                batch_exists = True
                break
    
    if not batch_exists:
        await callback.answer("‚ùå –ü–∞—Ä—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_batch:{batch_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_batch")
    )
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–∞—Ä—Ç–∏—é #{batch_id}?\n\n"
        f"<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_delete_batch:'), state='*')
async def delete_batch_confirmed(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏"""
    batch_id = int(callback.data.split(':', 1)[1])
    user_id = callback.from_user.id
    
    if user_id in farmer_batches:
        farmer_batches[user_id] = [
            b for b in farmer_batches[user_id] if b['id'] != batch_id
        ]
        save_batches_to_pickle()
        if gs and gs.spreadsheet:
            gs.delete_batch_from_sheets(batch_id)
        
        await callback.message.edit_text(
            f"‚úÖ –ü–∞—Ä—Ç–∏—è #{batch_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
        )
        await callback.answer("‚úÖ –ü–∞—Ä—Ç–∏—è —É–¥–∞–ª–µ–Ω–∞")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'cancel_delete_batch', state='*')
async def cancel_delete_batch(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–∏–∏"""
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('edit_pull:'), state='*')
async def start_edit_pull(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–ª–∞"""
    try:
        pull_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}, data: {callback.data}")
        return
    
    user_id = callback.from_user.id
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    if pull['exporter_id'] != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —ç—Ç–æ–≥–æ –ø—É–ª–∞", show_alert=True)
        return
    
    await state.update_data(editing_pull_id=pull_id)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ #{pull_id}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=edit_pull_fields_keyboard(),
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('edit_pull_field:'), state='*')
async def edit_pull_field_selected(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–ª–∞"""
    field = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    pull_id = data.get('editing_pull_id')
    
    if not pull_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(edit_pull_field=field, editing_pull_id=pull_id)
    
    field_names = {
        'culture': '–Ω–æ–≤—É—é –∫—É–ª—å—Ç—É—Ä—É',
        'volume': '–Ω–æ–≤—ã–π —Ü–µ–ª–µ–≤–æ–π –æ–±—ä—ë–º (–≤ —Ç–æ–Ω–Ω–∞—Ö)',
        'price': '–Ω–æ–≤—É—é —Ü–µ–Ω—É FOB ($/—Ç–æ–Ω–Ω–∞)',
        'port': '–Ω–æ–≤—ã–π –ø–æ—Ä—Ç –æ—Ç–≥—Ä—É–∑–∫–∏',
        'moisture': '–Ω–æ–≤—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–ª–∞–∂–Ω–æ—Å—Ç—å (%)',
        'nature': '–Ω–æ–≤—É—é –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –Ω–∞—Ç—É—Ä—É (–≥/–ª)',
        'impurity': '–Ω–æ–≤—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–æ—Ä–Ω–æ—Å—Ç—å (%)',
        'weed': '–Ω–æ–≤—É—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å (%)'
    }
    
    if field == 'culture':
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ #{pull_id}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫—É–ª—å—Ç—É—Ä—É:",
            reply_markup=culture_keyboard()
        )
        await EditPullStatesGroup.edit_culture.set()
    elif field == 'port':
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ #{pull_id}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—Ç:",
            reply_markup=port_keyboard()
        )
        await EditPullStatesGroup.edit_port.set()
    else:
        await callback.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ #{pull_id}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ {field_names.get(field, '–Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')}:"
        )
        state_mapping = {
            'volume': EditPullStatesGroup.edit_volume,
            'price': EditPullStatesGroup.edit_price,
            'moisture': EditPullStatesGroup.edit_moisture,
            'nature': EditPullStatesGroup.edit_nature,
            'impurity': EditPullStatesGroup.edit_impurity,
            'weed': EditPullStatesGroup.edit_weed
        }
        
        await state_mapping.get(field, EditPullStatesGroup.edit_volume).set()
    
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('culture:'), state=EditPullStatesGroup.edit_culture)
async def edit_pull_culture(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫—É–ª—å—Ç—É—Ä—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    new_culture = callback.data.split(':', 1)[1]
    
    data = await state.get_data()
    pull_id = data.get('editing_pull_id')
    
    if not pull_id or pull_id not in pulls:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.finish()
        return
    
    pull = pulls[pull_id]
    old_value = pull['culture']
    pull['culture'] = new_culture
    
    save_pulls_to_pickle()
    
    if gs and gs.spreadsheet:
        gs.update_pull_in_sheets(pull)
    
    await state.finish()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ö—É–ª—å—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
        f"–ü—É–ª #{pull_id}\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_culture}"
    )
    await asyncio.sleep(1)
    await view_pull_details(callback)
    await callback.answer("‚úÖ –ö—É–ª—å—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

@dp.callback_query_handler(lambda c: c.data.startswith('port:'), state=EditPullStatesGroup.edit_port)
async def edit_pull_port(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Ä—Ç–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    port_index = int(callback.data.split(':', 1)[1])
    ports = ['–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å', '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫', '–ê–∑–æ–≤', '–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É', '–¢–∞–º–∞–Ω—å', '–ö–∞–≤–∫–∞–∑', '–¢—É–∞–ø—Å–µ', '–ü–æ—Ä—Ç –û–ª—è']
    new_port = ports[port_index] if port_index < len(ports) else '–ê—Å—Ç—Ä–∞—Ö–∞–Ω—å'
    
    data = await state.get_data()
    pull_id = data.get('editing_pull_id')
    
    if not pull_id or pull_id not in pulls:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await state.finish()
        return
    
    pull = pulls[pull_id]
    old_value = pull['port']
    pull['port'] = new_port
    
    save_pulls_to_pickle()
    
    if gs and gs.spreadsheet:
        gs.update_pull_in_sheets(pull)
    
    await state.finish()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü–æ—Ä—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
        f"–ü—É–ª #{pull_id}\n"
        f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_port}"
    )
    await asyncio.sleep(1)
    await view_pull_details(callback)
    await callback.answer("‚úÖ –ü–æ—Ä—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")

@dp.message_handler(state=EditPullStatesGroup.edit_volume)
async def edit_pull_volume(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–±—ä—ë–º–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    await edit_pull_numeric_field(message, state, 'target_volume', '–û–±—ä—ë–º')

@dp.message_handler(state=EditPullStatesGroup.edit_price)
async def edit_pull_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    await edit_pull_numeric_field(message, state, 'price', '–¶–µ–Ω–∞')

@dp.message_handler(state=EditPullStatesGroup.edit_moisture)
async def edit_pull_moisture(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    await edit_pull_numeric_field(message, state, 'moisture', '–í–ª–∞–∂–Ω–æ—Å—Ç—å', 0, 100)

@dp.message_handler(state=EditPullStatesGroup.edit_nature)
async def edit_pull_nature(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞—Ç—É—Ä—ã –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    await edit_pull_numeric_field(message, state, 'nature', '–ù–∞—Ç—É—Ä–∞')

@dp.message_handler(state=EditPullStatesGroup.edit_impurity)
async def edit_pull_impurity(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ—Ä–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    await edit_pull_numeric_field(message, state, 'impurity', '–°–æ—Ä–Ω–æ—Å—Ç—å', 0, 100)

@dp.message_handler(state=EditPullStatesGroup.edit_weed)
async def edit_pull_weed(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–ª–∞"""
    await edit_pull_numeric_field(message, state, 'weed', '–ó–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å', 0, 100)

async def edit_pull_numeric_field(message: types.Message, state: FSMContext, field: str, field_name: str, min_val: float = 0, max_val: float = None):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π –ø—É–ª–∞"""
    try:
        new_value = float(message.text.strip().replace(',', '.'))
        if new_value < min_val:
            await message.answer(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ {min_val}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        if max_val is not None and new_value > max_val:
            await message.answer(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ {max_val}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            return
        
        data = await state.get_data()
        pull_id = data.get('editing_pull_id')
        
        if not pull_id or pull_id not in pulls:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.finish()
            return
        
        pull = pulls[pull_id]
        old_value = pull.get(field, '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        pull[field] = new_value
        
        save_pulls_to_pickle()
        
        if gs and gs.spreadsheet:
            gs.update_pull_in_sheets(pull)
        
        await state.finish()
        
        keyboard = get_role_keyboard('exporter')
        
        await message.answer(
            f"‚úÖ <b>{field_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"–ü—É–ª #{pull_id}\n"
            f"–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {old_value}\n"
            f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        await view_pull_details_direct(message, pull_id)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")

async def view_pull_details_direct(message, pull_id: int):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –ø—É–ª–∞"""
    if pull_id not in pulls:
        await message.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    pull = pulls[pull_id]
    user_id = message.from_user.id
    is_owner = pull['exporter_id'] == user_id
    
    progress = (pull['current_volume'] / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
    active_matches = [m for m in matches.values() 
                     if m['pull_id'] == pull_id and m['status'] == 'active']
    
    text = f"""
üì¶ <b>–ü—É–ª #{pull['id']}</b>

üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull['culture']}
üì¶ –û–±—ä—ë–º: {pull['current_volume']:.0f}/{pull['target_volume']:.0f} —Ç ({progress:.0f}%)
üí∞ –¶–µ–Ω–∞ FOB: ${pull['price']}/—Ç (~{pull['price'] * 75:,.0f} ‚ÇΩ/—Ç)
üö¢ –ü–æ—Ä—Ç: {pull['port']}

<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞—á–µ—Å—Ç–≤—É:</b>
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: –¥–æ {pull['moisture']}%
üèãÔ∏è –ù–∞—Ç—É—Ä–∞: –æ—Ç {pull['nature']} –≥/–ª
üåæ –°–æ—Ä–Ω–æ—Å—Ç—å: –¥–æ {pull['impurity']}%
üåø –ó–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å: –¥–æ {pull['weed']}%

üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {pull['documents']}
üìã –¢–∏–ø: {pull['doc_type']}
üìä –°—Ç–∞—Ç—É—Å: {pull.get('status', '–û—Ç–∫—Ä—ã—Ç')}
üë§ –≠–∫—Å–ø–æ—Ä—Ç—ë—Ä: {pull['exporter_name']}
üìÖ –°–æ–∑–¥–∞–Ω: {pull['created_at']}
"""
    
    if active_matches:
        text += f"\nüéØ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(active_matches)}</b>"
    
    participants_count = len(pull.get('participants', []))
    if participants_count > 0:
        text += f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}"
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    if is_owner:
        keyboard.add(
            InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_pull:{pull_id}"),
            InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_pull:{pull_id}")
        )
        
        if active_matches:
            keyboard.add(
                InlineKeyboardButton("üéØ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è", callback_data=f"view_pull_matches:{pull_id}")
            )
        
        keyboard.add(
            InlineKeyboardButton("üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏", callback_data=f"pull_participants:{pull_id}"),
            InlineKeyboardButton("üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞", callback_data=f"pull_logistics:{pull_id}")
        )
    else:
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", callback_data=f"joinpull:{pull_id}")
        )
    
    keyboard.add(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_pulls")
    )
    
    await message.answer(text, reply_markup=keyboard, parse_mode='HTML')

@dp.callback_query_handler(lambda c: c.data.startswith('delete_pull:'), state='*')
async def delete_pull_start(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–∞"""
    try:
        pull_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}, data: {callback.data}")
        return
    
    user_id = callback.from_user.id
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    if pull['exporter_id'] != user_id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é —ç—Ç–æ–≥–æ –ø—É–ª–∞", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_pull:{pull_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_pull")
    )
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—É–ª #{pull_id}?\n\n"
        f"üåæ –ö—É–ª—å—Ç—É—Ä–∞: {pull['culture']}\n"
        f"üì¶ –û–±—ä—ë–º: {pull['target_volume']} —Ç\n"
        f"üí∞ –¶–µ–Ω–∞: ${pull['price']}/—Ç\n\n"
        f"<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_delete_pull:'), state='*')
async def delete_pull_confirmed(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—É–ª–∞"""
    try:
        pull_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}, data: {callback.data}")
        return
    
    
    if pull_id in pulls:
        matches_to_delete = [match_id for match_id, match in matches.items() if match['pull_id'] == pull_id]
        for match_id in matches_to_delete:
            del matches[match_id]
        del pulls[pull_id]
        if pull_id in pull_participants:
            del pull_participants[pull_id]
        
        save_pulls_to_pickle()
        
        await callback.message.edit_text(
            f"‚úÖ –ü—É–ª #{pull_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω"
        )
        await callback.answer("‚úÖ –ü—É–ª —É–¥–∞–ª—ë–Ω")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)

@dp.callback_query_handler(lambda c: c.data == 'cancel_delete_pull', state='*')
async def cancel_delete_pull(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—É–ª–∞"""
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == 'cancel_edit_pull', state='*')
async def cancel_edit_pull(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–ª–∞"""
    await state.finish()
    await callback.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('contact_partner:'), state='*')
async def contact_partner(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø–æ —Å–¥–µ–ª–∫–µ"""
    deal_id = int(callback.data.split(':', 1)[1])
    
    if deal_id not in deals:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    deal = deals[deal_id]
    user_id = callback.from_user.id
    partner_info = None
    
    if deal.get('exporter_id') == user_id:
        farmer_ids = deal.get('farmer_ids', [])
        if farmer_ids:
            partner_info = "üë®‚Äçüåæ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ñ–µ—Ä–º–µ—Ä–æ–≤:</b>\n\n"
            for farmer_id in farmer_ids:
                farmer = users.get(farmer_id)
                if farmer:
                    partner_info += f"üìù {farmer.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    partner_info += f"üì± {farmer.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    partner_info += f"üìß {farmer.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                    partner_info += f"üìç {farmer.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    elif user_id in deal.get('farmer_ids', []):
        exporter_id = deal.get('exporter_id')
        exporter = users.get(exporter_id)
        if exporter:
            partner_info = f"üì¶ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞:</b>\n\n"
            partner_info += f"üìù {exporter.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            partner_info += f"üì± {exporter.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            partner_info += f"üìß {exporter.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            partner_info += f"üìç {exporter.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    
    elif deal.get('logistic_id') == user_id:
        exporter_id = deal.get('exporter_id')
        exporter = users.get(exporter_id)
        if exporter:
            partner_info = f"üì¶ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞:</b>\n\n"
            partner_info += f"üìù {exporter.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            partner_info += f"üì± {exporter.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            partner_info += f"üìß {exporter.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            partner_info += f"üìç {exporter.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    
    elif deal.get('expeditor_id') == user_id:
        exporter_id = deal.get('exporter_id')
        exporter = users.get(exporter_id)
        if exporter:
            partner_info = f"üì¶ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä–∞:</b>\n\n"
            partner_info += f"üìù {exporter.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            partner_info += f"üì± {exporter.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            partner_info += f"üìß {exporter.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            partner_info += f"üìç {exporter.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    
    if not partner_info:
        await callback.answer("ü§∑‚Äç‚ôÇÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    await callback.message.answer(partner_info, parse_mode='HTML')
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('complete_deal:'), state='*')
async def complete_deal(callback: types.CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
    deal_id = int(callback.data.split(':', 1)[1])
    
    if deal_id not in deals:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    deal = deals[deal_id]
    user_id = callback.from_user.id
    if deal.get('exporter_id') != user_id:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä –º–æ–∂–µ—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, –∑–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"confirm_complete_deal:{deal_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_complete_deal")
    )
    
    await callback.message.edit_text(
        f"‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–¥–µ–ª–∫—É #{deal_id}?\n\n"
        f"–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:\n"
        f"‚Ä¢ –°–¥–µ–ª–∫–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—Å—è –≤ –∞—Ä—Ö–∏–≤\n"
        f"‚Ä¢ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n"
        f"<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_complete_deal:'), state='*')
async def confirm_complete_deal(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏"""
    deal_id = int(callback.data.split(':', 1)[1])
    
    if deal_id not in deals:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    deal = deals[deal_id]
    deal['status'] = 'completed'
    deal['completed_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    save_pulls_to_pickle()
    await notify_deal_participants(deal_id, "‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    await callback.message.edit_text(
        f"üéâ <b>–°–¥–µ–ª–∫–∞ #{deal_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏.\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã Exportum!",
        parse_mode='HTML'
    )
    await callback.answer("‚úÖ –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

@dp.callback_query_handler(lambda c: c.data.startswith('cancel_deal:'), state='*')
async def cancel_deal(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏"""
    deal_id = int(callback.data.split(':', 1)[1])
    
    if deal_id not in deals:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    deal = deals[deal_id]
    user_id = callback.from_user.id
    if deal.get('exporter_id') != user_id:
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç—ë—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", show_alert=True)
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_deal:{deal_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_cancel_deal")
    )
    
    await callback.message.edit_text(
        f"‚ùå <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É #{deal_id}?\n\n"
        f"–ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã:\n"
        f"‚Ä¢ –°–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ç–º–µ–Ω—ë–Ω–Ω–∞—è\n"
        f"‚Ä¢ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n"
        f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞\n\n"
        f"<b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>",
        reply_markup=keyboard,
        parse_mode='HTML'
    )
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('confirm_cancel_deal:'), state='*')
async def confirm_cancel_deal(callback: types.CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã —Å–¥–µ–ª–∫–∏"""
    deal_id = int(callback.data.split(':', 1)[1])
    
    if deal_id not in deals:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    deal = deals[deal_id]
    deal['status'] = 'cancelled'
    deal['completed_at'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    save_pulls_to_pickle()
    await notify_deal_participants(deal_id, "‚ùå –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    await callback.message.edit_text(
        f"‚ùå <b>–°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞!</b>\n\n"
        f"–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –æ–± –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏.",
        parse_mode='HTML'
    )
    await callback.answer("‚úÖ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")

@dp.callback_query_handler(lambda c: c.data in ['cancel_complete_deal', 'cancel_cancel_deal'], state='*')
async def cancel_deal_action(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–¥–µ–ª–∫–æ–π"""
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

async def notify_deal_participants(deal_id: int, message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–¥–µ–ª–∫–∏"""
    deal = deals.get(deal_id)
    if not deal:
        return
    
    participants = []
    if deal.get('exporter_id'):
        participants.append(deal['exporter_id'])
    if deal.get('farmer_ids'):
        participants.extend(deal['farmer_ids'])
    if deal.get('logistic_id'):
        participants.append(deal['logistic_id'])
    if deal.get('expeditor_id'):
        participants.append(deal['expeditor_id'])
    for user_id in participants:
        try:
            await bot.send_message(
                user_id,
                f"üìã <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —Å–¥–µ–ª–∫–µ #{deal_id}</b>\n\n{message}",
                parse_mode='HTML'
            )
            await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

@dp.callback_query_handler(lambda c: c.data.startswith('logistics:'), state='*')
async def deal_logistics(callback: types.CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∏–∫–æ–π –¥–ª—è —Å–¥–µ–ª–∫–∏"""
    deal_id = int(callback.data.split(':', 1)[1])
    
    if deal_id not in deals:
        await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    deal = deals[deal_id]
    
    text = f"üöö <b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞ —Å–¥–µ–ª–∫–∏ #{deal_id}</b>\n\n"
    
    if deal.get('logistic_id'):
        logistic = users.get(deal['logistic_id'])
        if logistic:
            text += f"‚úÖ <b>–õ–æ–≥–∏—Å—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω:</b>\n"
            text += f"üìù {logistic.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            text += f"üì± {logistic.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"üìß {logistic.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        else:
            text += "‚ùå –õ–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ\n"
    else:
        text += "ü§∑‚Äç‚ôÇÔ∏è <b>–õ–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</b>\n\n"
        text += "–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É."
    
    if deal.get('expeditor_id'):
        expeditor = users.get(deal['expeditor_id'])
        if expeditor:
            text += f"\n‚úÖ <b>–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω:</b>\n"
            text += f"üìù {expeditor.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            text += f"üì± {expeditor.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            text += f"üìß {expeditor.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        else:
            text += "\n‚ùå –≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ\n"
    else:
        text += "\nü§∑‚Äç‚ôÇÔ∏è <b>–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω</b>\n\n"
        text += "–î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–¥–µ–ª–∫–µ", callback_data=f"view_deal:{deal_id}"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('pull_participants:'), state='*')
async def show_pull_participants(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É–ª–∞"""
    try:
        pull_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}, data: {callback.data}")
        return
    
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    participants = pull_participants.get(pull_id, [])
    
    text = f"üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—É–ª–∞ #{pull_id}</b>\n\n"
    text += f"üåæ {pull['culture']} ‚Ä¢ {pull['target_volume']} —Ç\n\n"
    
    if not participants:
        text += "ü§∑‚Äç‚ôÇÔ∏è –£ –ø—É–ª–∞ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
    else:
        total_participant_volume = 0
        for i, participant in enumerate(participants, 1):
            farmer_id = participant.get('farmer_id')
            farmer = users.get(farmer_id)
            batch_id = participant.get('batch_id')
            volume = participant.get('volume', 0)
            total_participant_volume += volume
            
            farmer_name = farmer.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if farmer else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            
            text += f"{i}. üë§ {farmer_name}\n"
            text += f"   üì¶ –ü–∞—Ä—Ç–∏—è #{batch_id}: {volume} —Ç\n"
            text += f"   üìç {farmer.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω') if farmer else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        
        fill_percentage = (total_participant_volume / pull['target_volume'] * 100) if pull['target_volume'] > 0 else 0
        text += f"üìä <b>–ò—Ç–æ–≥–æ:</b> {total_participant_volume:.0f}/{pull['target_volume']:.0f} —Ç ({fill_percentage:.1f}%)"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—É–ª—É", callback_data=f"view_pull:{pull_id}"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('pull_logistics:'), state='*')
async def pull_logistics_menu(callback: types.CallbackQuery):
    """–ú–µ–Ω—é –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—É–ª–∞"""
    try:
        pull_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}, data: {callback.data}")
        return
    
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    
    text = f"üöö <b>–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞ #{pull_id}</b>\n\n"
    text += f"üåæ {pull['culture']} ‚Ä¢ {pull['target_volume']} —Ç ‚Ä¢ {pull['port']}\n\n"
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É", callback_data=f"create_shipping:{pull_id}"),
        InlineKeyboardButton("üëÄ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", callback_data=f"view_shipping_requests:{pull_id}"),
        InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –ª–æ–≥–∏—Å—Ç–æ–≤", callback_data="view_logistics_contacts")
    )
    keyboard.add(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—É–ª—É", callback_data=f"view_pull:{pull_id}"))
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='HTML')
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('create_shipping:'), state='*')
async def create_shipping_from_pull(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É –∏–∑ –ø—É–ª–∞"""
    try:
        pull_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}, data: {callback.data}")
        return
    
    
    if pull_id not in pulls:
        await callback.answer("‚ùå –ü—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    pull = pulls[pull_id]
    
    await state.update_data(pull_id=pull_id)
    
    await callback.message.edit_text(
        f"üöö <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—É–ª–∞ #{pull_id}</b>\n\n"
        f"üåæ {pull['culture']} ‚Ä¢ {pull['target_volume']} —Ç ‚Ä¢ {pull['port']}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ (–≥–æ—Ä–æ–¥/—Ä–µ–≥–∏–æ–Ω):",
        parse_mode='HTML'
    )
    
    await ShippingRequestStatesGroup.route_from.set()
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data == "view_logistics_contacts", state='*')
async def view_logistics_contacts(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ª–æ–≥–∏—Å—Ç–æ–≤"""
    logistics_users = [user for user in users.values() if user.get('role') == 'logistic']
    
    if not logistics_users:
        await callback.answer("ü§∑‚Äç‚ôÇÔ∏è –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –ª–æ–≥–∏—Å—Ç–æ–≤", show_alert=True)
        return
    
    text = "üöö <b>–õ–æ–≥–∏—Å—Ç—ã –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ</b>\n\n"
    
    for i, logistic in enumerate(logistics_users[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑
        text += f"{i}. üìù {logistic.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"   üì± {logistic.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"   üìß {logistic.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"   üìç {logistic.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    if len(logistics_users) > 10:
        text += f"<i>... –∏ –µ—â—ë {len(logistics_users) - 10} –ª–æ–≥–∏—Å—Ç–æ–≤</i>\n\n"
    
    text += "üí° <b>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ª–æ–≥–∏—Å—Ç–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –ø–µ—Ä–µ–≤–æ–∑–∫–∏.</b>"
    
    await callback.message.edit_text(text, parse_mode='HTML')
    await callback.answer()

@dp.callback_query_handler(lambda c: c.data.startswith('view_shipping_requests:'), state='*')
async def view_shipping_requests(callback: types.CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É –¥–ª—è –ø—É–ª–∞"""
    try:
        pull_id = int(callback.data.split(':', 1)[1])
    except (IndexError, ValueError) as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback_data: {e}, data: {callback.data}")
        return
    
    await callback.answer("üìã –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@dp.message_handler(lambda m: m.text in ["üöö –ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞", "üöõ –ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞"], state='*')
async def view_service_provider_card(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –ª–æ–≥–∏—Å—Ç–∞/—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    user = users[user_id]
    role = user.get('role', '')
    
    if role not in ['logistic', 'expeditor']:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Å—Ç–∞–º –∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞–º")
        return
    
    role_emoji = "üöö" if role == 'logistic' else "üöõ"
    role_name = "–õ–æ–≥–∏—Å—Ç" if role == 'logistic' else "–≠–∫—Å–ø–µ–¥–∏—Ç–æ—Ä"
    service_type = "–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö" if role == 'logistic' else "—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—Å–∫–∏—Ö"
    
    text = f"""
{role_emoji} <b>–ú–æ—è –∫–∞—Ä—Ç–æ—á–∫–∞ {role_name.lower()}</b>

üë§ –ò–º—è: {user.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìß Email: {user.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìç –†–µ–≥–∏–æ–Ω: {user.get('region', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üé≠ –†–æ–ª—å: {role_name}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('registered_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

üíº <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {service_type} —É—Å–ª—É–≥:</b>
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–æ–∫: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
‚Ä¢ –û—Ç–∑—ã–≤–æ–≤: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
"""
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="edit_service_card"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="service_stats")
    )
    
    if role == 'logistic':
        keyboard.add(
            InlineKeyboardButton("üí∞ –£–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="set_logistics_rates"),
            InlineKeyboardButton("üõ£ –£–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã", callback_data="set_logistics_routes")
        )
    else:
        keyboard.add(
            InlineKeyboardButton("üí∞ –£–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data="set_expeditor_rates"),
            InlineKeyboardButton("üìÑ –£–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥–∏", callback_data="set_expeditor_services")
        )
    
    await message.answer(text, parse_mode='HTML', reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏", state='*')
async def view_active_service_requests(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∞/—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    role = users[user_id].get('role', '')
    if role not in ['logistic', 'expeditor']:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Å—Ç–∞–º –∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞–º")
        return
    
    service_type = "–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö" if role == 'logistic' else "—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—Å–∫–∏—Ö"
    
    text = f"üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n"
    text += f"–°–ø–∏—Å–æ–∫ {service_type} –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
    text += "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è:\n"
    text += "‚Ä¢ –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–µ–≤–æ–∑–∫–∏\n" if role == 'logistic' else "‚Ä¢ –ó–∞—è–≤–∫–∏ –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
    text += "‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–æ–≤\n"
    text += "‚Ä¢ –î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–æ–∫\n"
    text += "‚Ä¢ –°—Ç–∞—Ç—É—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n"
    
    await message.answer(text, parse_mode='HTML')

@dp.message_handler(lambda m: m.text in ["üíº –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "üìã –ú–æ–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏", "üìã –ú–æ–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"], state='*')
async def view_my_service_offers(message: types.Message, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç"""
    await state.finish()
    
    user_id = message.from_user.id
    if user_id not in users:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return
    
    role = users[user_id].get('role', '')
    if role not in ['logistic', 'expeditor']:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Å—Ç–∞–º –∏ —ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä–∞–º")
        return
    
    service_type = "–ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö" if role == 'logistic' else "—ç–∫—Å–ø–µ–¥–∏—Ç–æ—Ä—Å–∫–∏—Ö"
    completed_type = "–ø–µ—Ä–µ–≤–æ–∑–æ–∫" if role == 'logistic' else "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–π"
    
    text = f"üíº <b>–ú–æ–∏ {service_type} —É—Å–ª—É–≥–∏</b>\n\n"
    text += f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {completed_type} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
    text += "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è:\n"
    text += "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"
    text += "‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—Ç—ã\n"
    text += "‚Ä¢ –û—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
    text += "‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    
    await message.answer(text, parse_mode='HTML')

def edit_pull_fields_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –ø—É–ª–∞"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üåæ –ö—É–ª—å—Ç—É—Ä–∞", callback_data="edit_pull_field:culture"),
        InlineKeyboardButton("üì¶ –û–±—ä—ë–º", callback_data="edit_pull_field:volume"),
        InlineKeyboardButton("üí∞ –¶–µ–Ω–∞", callback_data="edit_pull_field:price"),
        InlineKeyboardButton("üö¢ –ü–æ—Ä—Ç", callback_data="edit_pull_field:port")
    )
    keyboard.add(
        InlineKeyboardButton("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å", callback_data="edit_pull_field:moisture"),
        InlineKeyboardButton("üèãÔ∏è –ù–∞—Ç—É—Ä–∞", callback_data="edit_pull_field:nature"),
        InlineKeyboardButton("üåæ –°–æ—Ä–Ω–æ—Å—Ç—å", callback_data="edit_pull_field:impurity"),
        InlineKeyboardButton("üåø –ó–∞—Å–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å", callback_data="edit_pull_field:weed")
    )
    keyboard.add(
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit_pull")
    )
    return keyboard
async def setup_scheduler():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
    try:
        scheduler.add_job(update_prices_cache, 'interval', hours=6)
        scheduler.add_job(update_news_cache, 'interval', hours=2)
        scheduler.add_job(auto_match_batches_and_pulls, 'interval', minutes=30)
        scheduler.add_job(send_daily_stats, 'cron', hour=9, minute=0)
        
        scheduler.start()
        logging.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

async def send_daily_stats():
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω—É"""
    try:
        total_users = len(users)
        role_stats = defaultdict(int)
        for user in users.values():
            role = user.get('role', 'unknown')
            role_stats[role] += 1
        total_batches = sum(len(batches) for batches in farmer_batches.values())
        active_batches = sum(1 for batches in farmer_batches.values() for b in batches if b.get('status') == '–ê–∫—Ç–∏–≤–Ω–∞')
        total_pulls = len(pulls)
        open_pulls = len([p for p in pulls.values() if p.get('status') == '–û—Ç–∫—Ä—ã—Ç'])
        total_deals = len(deals)
        active_deals = len([d for d in deals.values() if d.get('status') in ['pending', 'matched', 'shipping']])
        
        text = f"üìä <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Exportum</b>\n\n"
        text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        text += f"üì¶ –ü–∞—Ä—Ç–∏–π: {total_batches} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_batches})\n"
        text += f"üéØ –ü—É–ª–æ–≤: {total_pulls} (–æ—Ç–∫—Ä—ã—Ç—ã—Ö: {open_pulls})\n"
        text += f"üìã –°–¥–µ–ª–æ–∫: {total_deals} (–∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_deals})\n"
        text += f"üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}\n\n"
        
        text += f"<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º:</b>\n"
        for role, count in role_stats.items():
            role_name = ROLES.get(role, role)
            text += f"‚Ä¢ {role_name}: {count}\n"
        
        await bot.send_message(ADMIN_ID, text, parse_mode='HTML')
        logging.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
async def on_startup(dp):
    logging.info("üöÄ –ë–æ—Ç Exportum –∑–∞–ø—É—â–µ–Ω")
    load_users_from_json()
    load_batches_from_pickle()
    load_pulls_from_pickle()
    await setup_scheduler()
    try:
        await update_prices_cache()
        await update_news_cache()
        logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    try:
        matches_found = await auto_match_batches_and_pulls()
        logging.info(f"‚úÖ –ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: –Ω–∞–π–¥–µ–Ω–æ {matches_found} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞: {e}")
def validate_integration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    required_functions = [
        'load_users_from_json', 'save_users_to_json',
        'load_batches_from_pickle', 'save_batches_to_pickle', 
        'load_pulls_from_pickle', 'save_pulls_to_pickle',
        'update_prices_cache', 'update_news_cache',
        'auto_match_batches_and_pulls', 'find_matching_batches',
        'find_matching_exporters', 'notify_match'
    ]
    
    missing = []
    for func in required_functions:
        if not globals().get(func):
            missing.append(func)
    
    if missing:
        logging.warning(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {', '.join(missing)}")
    else:
        logging.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
validate_integration()

logging.info("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Exportum –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
logging.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
logging.info("   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –ò–ù–ù –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏")
logging.info("   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º") 
logging.info("   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç—á–∏–Ω–≥ –ø–∞—Ä—Ç–∏–π –∏ –ø—É–ª–æ–≤")
logging.info("   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è—Ö")
logging.info("   ‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
logging.info("   ‚úÖ –ó–∞—è–≤–∫–∏ –Ω–∞ –ª–æ–≥–∏—Å—Ç–∏–∫—É")
logging.info("   ‚úÖ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
logging.info("   ‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∞–º–∏")
logging.info("   ‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ")
logging.info("   ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets")
logging.info("   ‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á")

@dp.message_handler(state='*')
async def handle_unexpected_messages(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"""
    current_state = await state.get_state()
    if current_state is not None:
        await message.answer("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel")
    else:
        user_id = message.from_user.id
        if user_id in users:
            role = users[user_id].get('role')
            keyboard = get_role_keyboard(role)
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", reply_markup=keyboard)
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

@dp.callback_query_handler(state='*')
async def handle_unexpected_callbacks(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –≤ –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"""
    await callback.answer("‚ùå –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", show_alert=True)
def parse_cbot_futures():
    """–ü–∞—Ä—Å–∏–Ω–≥ CBoT —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö —Ü–µ–Ω"""
    prices = {}
    try:
        symbols = {
            '–ü—à–µ–Ω–∏—Ü–∞ CBoT': 'ZW=F',
            '–ö—É–∫—É—Ä—É–∑–∞ CBoT': 'ZC=F', 
            '–°–æ—è CBoT': 'ZS=F'
        }
        
        for name, symbol in symbols.items():
            try:
                url = f"https://query1.finance.yahoo.com/v8/finance/chart/{symbol}"
                response = requests.get(url, headers={'User-Agent': 'Mozilla/5.0'}, timeout=10)
                data = response.json()
                
                if 'chart' in data and 'result' in data['chart'] and data['chart']['result']:
                    result = data['chart']['result'][0]
                    if 'meta' in result and 'regularMarketPrice' in result['meta']:
                        price_cents = result['meta']['regularMarketPrice']
                        price_dollars = price_cents / 100
                        prices[name] = f"{price_dollars:.2f}¬¢/bu"
                        logging.info(f"‚úÖ {name}: {price_dollars:.2f}¬¢/bu")
                        
            except Exception as e:
                logging.error(f"‚ùå {name}: {e}")
                continue
        
        if not prices:
            prices = {
                '–ü—à–µ–Ω–∏—Ü–∞ CBoT': '5.50¬¢/bu',
                '–ö—É–∫—É—Ä—É–∑–∞ CBoT': '4.20¬¢/bu',
                '–°–æ—è CBoT': '10.80¬¢/bu'
            }
            logging.warning("‚ö†Ô∏è CBoT: fallback –∑–Ω–∞—á–µ–Ω–∏—è")
        
        return prices
        
    except Exception as e:
        logging.error(f"‚ùå parse_cbot_futures: {e}")
        return {
            '–ü—à–µ–Ω–∏—Ü–∞ CBoT': '5.50¬¢/bu',
            '–ö—É–∫—É—Ä—É–∑–∞ CBoT': '4.20¬¢/bu', 
            '–°–æ—è CBoT': '10.80¬¢/bu'
        }
async def on_shutdown(dp):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    logging.info("‚èπ –ë–æ—Ç Exportum –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    save_users_to_json()
    save_batches_to_pickle()
    save_pulls_to_pickle()
    logging.info("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    await bot.close()
    await dp.storage.close()
    await dp.storage.wait_closed()

if __name__ == '__main__':
    logging.info("üöÄ –ë–æ—Ç Exportum –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        import os
        os.makedirs('data', exist_ok=True)
        os.makedirs('logs', exist_ok=True)
        
        logging.info("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π: {e}")
    from aiogram import executor
    executor.start_polling(
        dp, 
        skip_updates=True, 
        on_startup=on_startup, 
        on_shutdown=on_shutdown
    )